<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Live with love]]></title>
  <subtitle><![CDATA[Live with love]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-02-22T04:11:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[践行]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Django第二天]]></title>
    <link href="http://yoursite.com/2016/02/18/Django%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>http://yoursite.com/2016/02/18/Django第二天/</id>
    <published>2016-02-18T01:53:33.000Z</published>
    <updated>2016-02-22T04:11:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u521B_u5EFA_u6570_u636E_u5E93"><a href="#u521B_u5EFA_u6570_u636E_u5E93" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>相关文件是<em>mysite/settings.py</em> , 默认用的是 SQLite . 我用的 mysql(之前在本地安装好的)</p>
<p>先在 mysql 中创建库,用户</p>
<pre><code>mysql&gt; CREATE DATABASE polls DEFAULT CHARSET=utf8;
Query OK, 1 row affected (0.00 sec)

mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON polls.* TO &apos;poller&apos;@&apos;127.0.0.1&apos; IDENTIFIED BY &apos;poller&apos;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>修改<em>mysite/settings.py</em>中的数据库设置</p>
<pre><code>DATABASES = {
    &apos;default&apos;: {
        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,
        &apos;NAME&apos;: &apos;polls&apos;,
        &apos;USER&apos;: &apos;poller&apos;,
        &apos;PASSWORD&apos;: &apos;poller&apos;,
        &apos;HOST&apos;:&apos;127.0.0.1&apos;,
        &apos;PORT&apos;:&apos;3306&apos;,
    }
}
</code></pre><a id="more"></a>
<p>顺便修改一下时区:</p>
<pre><code>TIME_ZONE = &apos;Asia/Shanghai&apos;
</code></pre><p>注意到 INSTALL_APPS</p>
<pre><code>INSTALLED_APPS = [
    &apos;django.contrib.admin&apos;,
    &apos;django.contrib.auth&apos;,
    &apos;django.contrib.contenttypes&apos;,
    &apos;django.contrib.sessions&apos;,
    &apos;django.contrib.messages&apos;,
    &apos;django.contrib.staticfiles&apos;,
]
</code></pre><p>上面这些是默认的 app, 我们在使用它们之前需要先在数据库里为它们创建 table</p>
<pre><code>$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, contenttypes, auth, sessions
Running migrations:
  Rendering model states... DONE
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying sessions.0001_initial... OK
</code></pre><p><code>migrate</code> 命令会依据 <code>INSTALLED_APPS</code> 的设置, 创建相应的数据库表</p>
<h3 id="u521B_u5EFA_Model"><a href="#u521B_u5EFA_Model" class="headerlink" title="创建 Model"></a>创建 Model</h3><p>在我们的投票 app 中, 我们将创建两个 models: Question and Choice.</p>
<p>Question 的字段: 一个问题和一个发布时间</p>
<p>Choice 的字段: 文本和投票</p>
<p>每个 Choice 都与一个 Question 相关联</p>
<p>于是</p>
<pre><code>cat polls/models.py
from __future__ import unicode_literals

from django.db import models

# Create your models here.
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField(&apos;date published&apos;)


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
</code></pre><p>关于字段的名称: 分 machine-readable name 和 human-readable name (比如上面的 date published )</p>
<p>另外就是注意一下外键 ForeignKey 的定义</p>
<h3 id="u6FC0_u6D3B_Model"><a href="#u6FC0_u6D3B_Model" class="headerlink" title="激活 Model"></a>激活 Model</h3><p>上面的那段 Model 代码可以让 Django:</p>
<ul>
<li>为 polls 这个 app 创建数据库表结构</li>
<li>为 Question 和 Choice 创建一个可以被访问的 API</li>
</ul>
<p>但是我们首先要把 polls 这个 app 加到配置</p>
<pre><code>mysite/settings.py
INSTALLED_APPS = [
    &apos;polls.apps.PollsConfig&apos;,
    &apos;django.contrib.admin&apos;,
    &apos;django.contrib.auth&apos;,
    &apos;django.contrib.contenttypes&apos;,
    &apos;django.contrib.sessions&apos;,
    &apos;django.contrib.messages&apos;,
    &apos;django.contrib.staticfiles&apos;,
]
</code></pre><p>然后执行命令</p>
<pre><code>python manage.py makemigrations polls
</code></pre><p>你会看到类似这样的结果:</p>
<pre><code>Migrations for &apos;polls&apos;:
  0001_initial.py:
    - Create model Choice
    - Create model Question
    - Add field question to choice
</code></pre><p>下面这里段不好翻译, 直接搬原文了:</p>
<p>By running <strong>makemigrations</strong>, you’re telling Django that you’ve made some changes to your models (in this case, you’ve made new ones) and that you’d like the changes to be stored as a <strong>migration</strong>.        </p>
<p><strong>Migrations</strong> are how Django stores changes to your models (and thus your database schema) - they’re just files on disk. You can read the migration for your new model if you like; it’s the file <code>polls/migrations/0001_initial.py</code></p>
<p>There’s a command that will run the migrations for you and manage your database schema automatically - that’s called <strong>migrate</strong>, and we’ll come to it in a moment - but first, let’s see what SQL that migration would run. The <strong>sqlmigrate</strong> command takes migration names and returns their SQL:</p>
<pre><code>python manage.py sqlmigrate polls 0001
</code></pre><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">BEGIN</span>;</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Create model Choice</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`choice_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`votes`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Create model Question</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span> <span class="built_in">integer</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>, <span class="string">`question_text`</span> <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, <span class="string">`pub_date`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Add field question to choice</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`question_id`</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="string">`question_id`</span> <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span></span><br><span class="line"><span class="operator"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> <span class="string">`polls_choice_7aa0f6ee`</span> <span class="keyword">ON</span> <span class="string">`polls_choice`</span> (<span class="string">`question_id`</span>);</span></span><br><span class="line"><span class="operator"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`polls_choice`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`polls_choice_question_id_c5b4b260_fk_polls_question_id`</span> FOREIGN <span class="keyword">KEY</span> (<span class="string">`question_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`polls_question`</span> (<span class="string">`id`</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="operator"><span class="keyword">COMMIT</span>;</span></span><br></pre></td></tr></table></figure>
<p><strong>sqlmigrate</strong> 命令并不会真正在你的数据库上运行 migration , 它只是打印出Django 认为需要的 SQL 语句. 可以用来检查 SQL 脚本</p>
<p>当然, 检查的命令还有</p>
<pre><code>python manage.py check
</code></pre><p>下面运行 migrate 在数据库中创建表</p>
<pre><code>$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, contenttypes, polls, auth, sessions
Running migrations:
  Rendering model states... DONE
  Applying polls.0001_initial... OK
</code></pre><p><strong>migrate</strong> 命令会把本地所有没应用到数据库的表结构变更同步到数据库</p>
<p>改变 <strong>model</strong> 的三个步骤:</p>
<ul>
<li>Change your models (in <strong>models.py</strong>).</li>
<li>Run <strong>python manage.py makemigrations</strong> to create migrations for those changes</li>
<li>Run <strong>python manage.py migrate to apply</strong> those changes to the database.</li>
</ul>
<p>至于分开这么多步实现 migrate 的原因, 我还不太理解, 开发做的少啊</p>
<h3 id="u73A9_u73A9_API"><a href="#u73A9_u73A9_API" class="headerlink" title="玩玩 API"></a>玩玩 API</h3><p>现在, 让我们进入 Python 的交互界面, 玩玩 Django 提供给我们的 API 吧, 调用 Python shell</p>
<pre><code>$ python manage.py shell
</code></pre><p>执行这个命令, manage.py 会设置 DJANGO_SETTINGS_MODULE 的环境变量</p>
<p>进入 shell 之后, 看看数据库的 API 吧</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; from polls.models import <span class="constant">Question</span>, <span class="constant">Choice</span>   <span class="comment"># Import the model classes we just wrote.</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.all()</span><br><span class="line">[]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; from django.utils import timezone</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q = <span class="constant">Question</span>(question_text=<span class="string">"What's new?"</span>, pub_date=timezone.now())</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.save()</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.id</span><br><span class="line"><span class="number">1</span>L</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.question_text</span><br><span class="line"><span class="string">"What's new?"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.pub_date</span><br><span class="line">datetime.datetime(<span class="number">2012</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">775217</span>, tzinfo=&lt;<span class="constant">UTC</span>&gt;)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.question_text = <span class="string">"What's up?"</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.save()</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.all()</span><br><span class="line">[&lt;<span class="constant">Question</span><span class="symbol">:</span> <span class="constant">Question</span> object&gt;]</span><br></pre></td></tr></table></figure>
<p>最后显示的<code>[&lt;Question: Question object&gt;]</code> 对我们来说没啥卵用, 得改一下, 加上<code>__str()__</code> 方法</p>
<pre><code>polls/models.py
from django.db import models
from django.utils.encoding import python_2_unicode_compatible

@python_2_unicode_compatible  # only if you need to support Python 2
class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text

@python_2_unicode_compatible  # only if you need to support Python 2
class Choice(models.Model):
    # ...
    def __str__(self):
        return self.choice_text
</code></pre><p>顺便自定义一个方法</p>
<pre><code>polls/models.py
import datetime

from django.db import models
from django.utils import timezone


class Question(models.Model):
    # ...
    def was_published_recently(self):
        return self.pub_date &gt;= timezone.now() - datetime.timedelta(days=1)
</code></pre><p>注意 <code>import datetime</code> 和 <code>from django.utils import timezone</code> </p>
<p>运行 python manage.py shell 再次进入 shell</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.all()</span><br><span class="line">[&lt;<span class="constant">Question</span><span class="symbol">:</span> <span class="constant">What</span><span class="string">'s up?&gt;]</span><br><span class="line">&gt;&gt;&gt; Question.objects.filter(id=1)</span><br><span class="line">[&lt;Question: What'</span>s up?&gt;]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.filter(question_text__startswith=<span class="string">'What'</span>)</span><br><span class="line">[&lt;<span class="constant">Question</span><span class="symbol">:</span> <span class="constant">What</span><span class="string">'s up?&gt;]</span><br><span class="line">&gt;&gt;&gt; from django.utils import timezone</span><br><span class="line">&gt;&gt;&gt; current_year = timezone.now().year</span><br><span class="line">&gt;&gt;&gt; Question.objects.get(pub_date__year=current_year)</span><br><span class="line">&lt;Question: What'</span>s up?&gt;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.get(id=<span class="number">2</span>)</span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;input&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"/Users/cristaly7/.virtualenvs/Django/lib/python2.7/site-packages/django/db/models/manager.py"</span>, line <span class="number">122</span>, <span class="keyword">in</span> manager_method</span><br><span class="line">    <span class="keyword">return</span> getattr(<span class="keyword">self</span>.get_queryset(), name)(*args, **kwargs)</span><br><span class="line">  <span class="constant">File</span> <span class="string">"/Users/cristaly7/.virtualenvs/Django/lib/python2.7/site-packages/django/db/models/query.py"</span>, line <span class="number">387</span>, <span class="keyword">in</span> get</span><br><span class="line">    <span class="keyword">self</span>.model._meta.object_name</span><br><span class="line"><span class="constant">DoesNotExist</span><span class="symbol">:</span> <span class="constant">Question</span> matching query does <span class="keyword">not</span> exist.</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Question</span>.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">&lt;<span class="constant">Question</span><span class="symbol">:</span> <span class="constant">What</span><span class="string">'s up?&gt;</span><br><span class="line">&gt;&gt;&gt; q = Question.objects.get(pk=1)</span><br><span class="line">&gt;&gt;&gt; q.was_published_recently()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; q = Question.objects.get(pk=1)</span><br><span class="line">&gt;&gt;&gt; q.choice_set.all()</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='</span><span class="constant">Not</span> much<span class="string">', votes=0)</span><br><span class="line">&lt;Choice: Not much&gt;</span><br><span class="line">&gt;&gt;&gt; q.choice_set.create(choice_text='</span><span class="constant">The</span> sky<span class="string">', votes=0)</span><br><span class="line">&lt;Choice: The sky&gt;</span><br><span class="line">&gt;&gt;&gt; c = q.choice_set.create(choice_text='</span><span class="constant">Just</span> hacking again<span class="string">', votes=0)</span><br><span class="line">&gt;&gt;&gt; c.question</span><br><span class="line">&lt;Question: What'</span>s up?&gt;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.choice_set.all()</span><br><span class="line">[&lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">Not</span> much&gt;, &lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">The</span> sky&gt;, &lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">Just</span> hacking again&gt;]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.choice_set.count()</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="constant">Choice</span>.objects.filter(question__pub_date__year=current_year)</span><br><span class="line">[&lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">Not</span> much&gt;, &lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">The</span> sky&gt;, &lt;<span class="constant">Choice</span><span class="symbol">:</span> <span class="constant">Just</span> hacking again&gt;]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; c = q.choice_set.filter(choice_text__startswith=<span class="string">'Just hacking'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; c.delete()</span><br><span class="line">(<span class="number">1</span>L, &#123;u<span class="string">'polls.Choice'</span><span class="symbol">:</span> <span class="number">1</span>L&#125;)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q.choice_set.count()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="Django_Admin"><a href="#Django_Admin" class="headerlink" title="Django Admin"></a>Django Admin</h3><p>创建 admin</p>
<pre><code>python manage.py createsuperuser
</code></pre><p>运行测试服务器</p>
<pre><code>python manage.py runserver
</code></pre><p>访问 <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="external">http://127.0.0.1:8000/admin/</a> ,登陆后台</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/Django_admin.png" alt="Django"></p>
<h3 id="u4F7F_u6295_u7968_App__u53EF_u4EE5_u5728_u540E_u53F0_u8FDB_u884C_u7BA1_u7406"><a href="#u4F7F_u6295_u7968_App__u53EF_u4EE5_u5728_u540E_u53F0_u8FDB_u884C_u7BA1_u7406" class="headerlink" title="使投票 App 可以在后台进行管理"></a>使投票 App 可以在后台进行管理</h3><p>我们只需要做一件事: 把 Question对象的 admin 接口告诉 admin</p>
<pre><code>polls/admin.py
from django.contrib import admin

from .models import Question

admin.site.register(Question)
</code></pre><p>然后刷新一下<br><img src="http://7xpsj5.com1.z0.glb.clouddn.com/poll.png" alt="Django"><br>点击 Questions<br><img src="http://7xpsj5.com1.z0.glb.clouddn.com/poll2.png" alt="Django"><br>编辑”What’s up?”<br><img src="http://7xpsj5.com1.z0.glb.clouddn.com/poll1.png" alt="Django"></p>
<p>自己尝试一下操作.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u521B_u5EFA_u6570_u636E_u5E93"><a href="#u521B_u5EFA_u6570_u636E_u5E93" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>相关文件是<em>mysite/settings.py</em> , 默认用的是 SQLite . 我用的 mysql(之前在本地安装好的)</p>
<p>先在 mysql 中创建库,用户</p>
<pre><code>mysql&gt; CREATE DATABASE polls DEFAULT CHARSET=utf8;
Query OK, 1 row affected (0.00 sec)

mysql&gt; GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON polls.* TO &apos;poller&apos;@&apos;127.0.0.1&apos; IDENTIFIED BY &apos;poller&apos;;
Query OK, 0 rows affected (0.00 sec)
</code></pre><p>修改<em>mysite/settings.py</em>中的数据库设置</p>
<pre><code>DATABASES = {
    &apos;default&apos;: {
        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,
        &apos;NAME&apos;: &apos;polls&apos;,
        &apos;USER&apos;: &apos;poller&apos;,
        &apos;PASSWORD&apos;: &apos;poller&apos;,
        &apos;HOST&apos;:&apos;127.0.0.1&apos;,
        &apos;PORT&apos;:&apos;3306&apos;,
    }
}
</code></pre>]]>
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django第一天]]></title>
    <link href="http://yoursite.com/2016/02/17/Django%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>http://yoursite.com/2016/02/17/Django第一天/</id>
    <published>2016-02-17T07:36:18.000Z</published>
    <updated>2016-02-22T04:11:25.000Z</updated>
    <content type="html"><![CDATA[<p>用 Django 做一个投票( poll )的 app</p>
<h3 id="u521B_u5EFA_u4E00_u4E2A_u9879_u76EE"><a href="#u521B_u5EFA_u4E00_u4E2A_u9879_u76EE" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><pre><code>django-admin startproject myproject
</code></pre><p>目录结构</p>
<pre><code>myproject/
├── manage.py
└── myproject
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
</code></pre><p>进入项目目录, 创建 app</p>
<pre><code>cd myproject
python manage.py startapp polls
</code></pre><a id="more"></a>    
<p>app 目录结构</p>
<pre><code>polls/
├── __init__.py
├── admin.py
├── apps.py
├── migrations
│   └── __init__.py
├── models.py
├── tests.py
└── views.py
</code></pre><p>运行测试</p>
<pre><code>python manage.py runserver
</code></pre><h3 id="u521B_u5EFA_u4E00_u4E2A_view"><a href="#u521B_u5EFA_u4E00_u4E2A_view" class="headerlink" title="创建一个 view"></a>创建一个 view</h3><pre><code>polls/views.py
from django.http import HttpResponse


def index(request):
    return HttpResponse(&quot;Hello, world. You&apos;re at the polls index.&quot;)
</code></pre><p>为了能访问 view, 需要写一个局部的 URLconf (URL配置文件),将 view 映射给 URL</p>
<pre><code>polls/urls.py
from django.conf.urls import url

from . import views

urlpatterns = [
    url(r&apos;^$&apos;, views.index, name=&apos;index&apos;),
]
</code></pre><p>然后把这个局部的 URLconf 文件关联到root URLconf 中</p>
<pre><code>myproject/urls.py
from django.conf.urls import include, url
from django.contrib import admin

urlpatterns = [
    url(r&apos;^polls/&apos;, include(&apos;polls.urls&apos;)),
    url(r&apos;^admin/&apos;, admin.site.urls),
]
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>用 Django 做一个投票( poll )的 app</p>
<h3 id="u521B_u5EFA_u4E00_u4E2A_u9879_u76EE"><a href="#u521B_u5EFA_u4E00_u4E2A_u9879_u76EE" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><pre><code>django-admin startproject myproject
</code></pre><p>目录结构</p>
<pre><code>myproject/
├── manage.py
└── myproject
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
</code></pre><p>进入项目目录, 创建 app</p>
<pre><code>cd myproject
python manage.py startapp polls
</code></pre>]]>
    
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二月份的碎碎念]]></title>
    <link href="http://yoursite.com/2016/02/01/%E4%BA%8C%E6%9C%88%E4%BB%BD%E7%9A%84%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://yoursite.com/2016/02/01/二月份的碎碎念/</id>
    <published>2016-02-01T03:50:01.000Z</published>
    <updated>2016-02-22T16:23:41.000Z</updated>
    <content type="html"><![CDATA[<h3 id="2016_u5E742_u67081_u65E5"><a href="#2016_u5E742_u67081_u65E5" class="headerlink" title="2016年2月1日"></a>2016年2月1日</h3><p>早上, 身体已经醒了,人没能立马起来, 懒惰的大脑就 yy 着外面好冷 …<br>主要是起床那一瞬间的奖励(或者不起床的惩罚)比不上赖床一刻的舒服啊<br>最终起来了,果然很冷, 发型很怂, 于是跑到卫生间洗了个冷水头,<br>但是洗冷水头的过程中, 觉得冷度也就那样, 洗完出来之后, 反而觉得不冷了.<br>所以很多时候困难并不像想象的那么难, 嗯, 洗冷水应该还能激发一点身体潜能.<br>另外, 不要把事情弄的太复杂, 简单化吧.<br>把事情分成要做的和不要做的就行, 别加上太多修饰词, 比如应该要做的 , 明天要做的.</p>
<p>嗯, </p>
<ul>
<li>要起床. </li>
<li>要洗头(美好的一天从早起洗头开始, 糟糕的一天从大半夜还不睡觉开始). </li>
<li>要出去取快递. </li>
<li>要熟练 docker. </li>
<li>要静心. (遇到困难是必然的,不能立马见效也是必然的,但是要坚持)</li>
<li>要锻炼.</li>
</ul>
<p>这么冷的天, Lilia居然还闻到了桂花</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/guihua.png" alt="guihua"></p>
<a id="more"></a>
<p>更新的观念:</p>
<p><a href="https://www.zhihu.com/question/20003863" target="_blank" rel="external">接地气-共鸣感</a></p>
<h3 id="2016_u5E742_u67082_u65E5"><a href="#2016_u5E742_u67082_u65E5" class="headerlink" title="2016年2月2日"></a>2016年2月2日</h3><p>去山口拜访了苏老师, 买了煎虾饼和虾饺, 貌似没以前的好吃了-0-</p>
<p>祖上风水不太好, 没官运, 面相为艺相, 靠技术手艺吃饭</p>
<h3 id="2016_u5E742_u67083_u65E5"><a href="#2016_u5E742_u67083_u65E5" class="headerlink" title="2016年2月3日"></a>2016年2月3日</h3><p>感情这事, 是很私人的,很微妙的, 所以不要让别人(即使是家人)插手, 别人的意见听听就行, 要照着去做了就真的会坏事, 真的是 Silly B 了 ! ! ! ! ! !</p>
<p>And, when things mess up , they won’t be responsible for your bad mood .</p>
<p><a href="http://www.douban.com/note/307716310/" target="_blank" rel="external">把 mac 的qq 聊天记录备份了一下</a></p>
<h3 id="2016_u5E742_u67084_u65E5"><a href="#2016_u5E742_u67084_u65E5" class="headerlink" title="2016年2月4日"></a>2016年2月4日</h3><p>猴年来了, 马月还会远吗? </p>
<p>用心生活, 即使是收拾东西, 也是可以注入灵感的. </p>
<h3 id="2016_u5E742_u67085_u65E5"><a href="#2016_u5E742_u67085_u65E5" class="headerlink" title="2016年2月5日"></a>2016年2月5日</h3><p>一位朋友毕业至今的感想:</p>
<ol>
<li>年纪不小了，要有梦，但要脚踏实地</li>
<li>成家了，心才能定下来，或许才能更有动力的去朝着既定目标努力</li>
<li>早一点培养后代，世界是我们的，但终归是那帮孙子的</li>
</ol>
<h3 id="2016_u5E742_u67086_u65E5"><a href="#2016_u5E742_u67086_u65E5" class="headerlink" title="2016年2月6日"></a>2016年2月6日</h3><p>衣服店有个眼光好的导购真的挺重要</p>
<p>衣服感觉一般就不要买了, 多逛逛, 能挑到非常合适的. </p>
<h3 id="2016_u5E742_u67087_u65E5"><a href="#2016_u5E742_u67087_u65E5" class="headerlink" title="2016年2月7日"></a>2016年2月7日</h3><p>摆摆摆,拜拜拜,烧烧烧</p>
<h3 id="2016_u5E742_u67088_u65E5"><a href="#2016_u5E742_u67088_u65E5" class="headerlink" title="2016年2月8日"></a>2016年2月8日</h3><h3 id="2016_u5E742_u67089_u65E5"><a href="#2016_u5E742_u67089_u65E5" class="headerlink" title="2016年2月9日"></a>2016年2月9日</h3><h3 id="2016_u5E742_u670810_u65E5"><a href="#2016_u5E742_u670810_u65E5" class="headerlink" title="2016年2月10日"></a>2016年2月10日</h3><p>elephant in the room &amp; Erwin Schrödinger’s Cat</p>
<p>抚琴¶挥剑</p>
<p>骚年看了一夜的天花板, 天渐凉, 心渐冷</p>
<h3 id="2016_u5E742_u670811_u65E5"><a href="#2016_u5E742_u670811_u65E5" class="headerlink" title="2016年2月11日"></a>2016年2月11日</h3><p>衣服的效果—思考关键词: 镜头中, 现实中, 各类人的眼中</p>
<p>一念成佛 一念成魔</p>
<p>忍</p>
<p>难道全是我的错?</p>
<p>如果领导段位比你高, 不要担心被他糊弄, 在你没达到领导的境界, 没看穿领导的思路之前, 不要随便跳毛</p>
<p>不要在气头上跟在乎的人争论</p>
<p>一丛竹子, 底部阴冷潮湿, 节节拔高, 唯有顶部的细节才能享受那温暖的阳光</p>
<p>凡事多想几层, 局中局呢</p>
<p>韩寒曾说：最酸的不是吃醋，最酸的是没有权利吃醋。</p>
<p><a href="https://www.zhihu.com/question/24896540" target="_blank" rel="external">男人吃醋为什么常常要假装“我没吃醋”？</a></p>
<h3 id="2016_u5E742_u670812_u65E5"><a href="#2016_u5E742_u670812_u65E5" class="headerlink" title="2016年2月12日"></a>2016年2月12日</h3><p>Black Swan Events‎:</p>
<blockquote>
<p>人们所习惯相信的信念、所乐观看待的事件，有可能是错的，而我们从未思考过“它是错的”所造成的后果，我们期待的破灭，竟是如此之轻易. </p>
</blockquote>
<p>“黑天鹅”的逻辑是：你不知道的事比你知道的事更有意义</p>
<p>从电影所宣传的正能量, 可以看出现实世界与之相对的负能量的存在.</p>
<p>follow your heart.</p>
<p>放不下，她就是再不堪你都会紧握不放。</p>
<p>放的下，她就是纯洁如月光你都会转身。</p>
<p>兼听则明适合决策，不适合爱情。</p>
<p>换位思考-换位思考-换位思考</p>
<p>The time you enjoy wasting, is not wasted.(出处:<a href="https://www.zhihu.com/question/38270275" target="_blank" rel="external">互相喜欢的人明知不可能有结果，要在一起吗？</a>)</p>
<p>佛總結出人生的八大痛苦：生、老、病、死、愛別離、怨憎會、求不得、五蕴熾盛</p>
<h3 id="2016_u5E742_u670813_u65E5"><a href="#2016_u5E742_u670813_u65E5" class="headerlink" title="2016年2月13日"></a>2016年2月13日</h3><p>琵琶行</p>
<p>白居易</p>
<p>浔阳江头夜送客，枫叶荻花秋瑟瑟。</p>
<p>主人下马客在船，举酒欲饮无管弦。</p>
<p>醉不成欢惨将别，别时茫茫江浸月。</p>
<p>忽闻水上琵琶声，主人忘归客不发。</p>
<p>寻声暗问弹者谁？琵琶声停欲语迟。</p>
<p>移船相近邀相见，添酒回灯重开宴。</p>
<p>千呼万唤始出来，犹抱琵琶半遮面。</p>
<p>转轴拨弦三两声，未成曲调先有情。</p>
<p>弦弦掩抑声声思，似诉平生不得意。</p>
<p>低眉信手续续弹，说尽心中无限事。</p>
<p>轻拢慢捻抹复挑，初为霓裳后绿腰。</p>
<p>大弦嘈嘈如急雨，小弦切切如私语。</p>
<p>嘈嘈切切错杂弹，大珠小珠落玉盘。</p>
<p>问关莺语花底滑，幽咽泉流冰下难。</p>
<p>冰泉冷涩弦凝绝，凝绝不通声暂歇。</p>
<p>别有幽愁暗恨生，此时无声胜有声。</p>
<p>银瓶乍破水浆迸，铁骑突出刀枪鸣。</p>
<p>曲终收拨当心画，四弦一声如裂帛。</p>
<p>东船西舫悄无言，惟见江心秋月白。</p>
<p>沉吟放拨插弦中，整顿衣裳起敛容。</p>
<p>自言本是京城女，家在虾蟆陵下住。</p>
<p>十三学得琵琶成，名属教坊第一部。</p>
<p>曲罢曾教善才伏，妆成每被秋娘妒。</p>
<p>五陵年少争缠头，一曲红绡不知数。</p>
<p>钿头云篦击节碎，血色罗裙翻酒污。</p>
<p>今年欢笑复明年，秋月春风等闲度。</p>
<p>弟走从军阿姨死，暮去朝来颜色故。</p>
<p><em>门前冷落车马稀，老大嫁作商人妇。</em></p>
<p><em>商人重利轻别离，前月浮梁买茶去。</em></p>
<p><em>去来江口守空船，绕船月明江水寒。</em></p>
<p><em>夜深忽梦少年事，梦啼妆泪红阑干！</em></p>
<p>我闻琵琶已叹息，又闻此语重唧唧。</p>
<p>同是天涯沦落人，相逢何必曾相识！</p>
<p>我从去年辞帝京，谪居卧病浔阳城。</p>
<p>浔阳地僻无音乐，终岁不闻丝竹声。</p>
<p>住进湓江地低湿，黄芦苦竹绕宅生。</p>
<p>其间旦暮闻何物，杜鹃啼血猿哀鸣。</p>
<p>春江花朝秋月夜，往往取酒还独倾。</p>
<p>岂无山歌与村笛？呕哑嘲 难为听。</p>
<p>今夜闻君琵琶语，如听仙乐耳暂明。</p>
<p>莫辞更坐弹一曲，为君翻作琵琶行。</p>
<p>感我此言良久立，却坐促弦弦转急。</p>
<p>凄凄不似向前声，满座重闻皆掩泣。</p>
<p>座中泣下谁最多，江州司马青衫湿。</p>
<hr>
<p><em>你当前所有的认知 , 可能都是错的</em></p>
<p>社交中的控场能力</p>
<h3 id="2016_u5E742_u670814_u65E5"><a href="#2016_u5E742_u670814_u65E5" class="headerlink" title="2016年2月14日"></a>2016年2月14日</h3><p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/love1.jpg" alt="love1"></p>
<p>给对方更大的世界, 更多的理解包容</p>
<p>2月14日是个什么日子?</p>
<p>是美国发明家亚历山大·格拉汉姆·贝尔向专利局申请电话专利的日子</p>
<p>世界上第一台通用电子计算机埃尼阿克在美国费城向外界公布</p>
<p>以色列国会第一次开会</p>
<p>伊拉克、约旦宣布成立阿拉伯联邦的日子</p>
<p>美国全球定位系统第一颗工作卫星发射升空，进入地球轨道</p>
<p>音乐家聂耳的生日</p>
<p>咆哮教主马景涛的生日</p>
<p>巴西著名球星“外星人”罗纳尔多宣布退役的日子</p>
<p>中国与墨西哥建交的日子</p>
<p>中共中央发出《关于加强党员教育工作的通知》的日子</p>
<p>你们啊, 就知道个情人节</p>
<hr>
<p>又开始降温了</p>
<p>既要有包容性, 又不能纵容, 这个度, 不好掌握</p>
<h3 id="2016_u5E742_u670815_u65E5"><a href="#2016_u5E742_u670815_u65E5" class="headerlink" title="2016年2月15日"></a>2016年2月15日</h3><p>邹康结婚</p>
<p>旁边的大哥挺好, 知道我不喝酒, 看我敬完酒之后, 就帮我把杯子的酒给倒到茶杯中, 然后先给倒点可乐, 让我涮杯子, 然后再倒可乐.</p>
<p>不能为了友情, 而对事情妥协(想想小学三年级,小强)</p>
<h3 id="2016_u5E742_u670816_u65E5"><a href="#2016_u5E742_u670816_u65E5" class="headerlink" title="2016年2月16日"></a>2016年2月16日</h3><p>生存价值-纵向(一旦深刻,给别人说就会无聊)</p>
<p>生活价值-横向</p>
<p>情感价值</p>
<p><a href="https://www.zhihu.com/question/21923064/answer/19797280" target="_blank" rel="external">上流社会-生理敏感度</a></p>
<p>思考: </p>
<ul>
<li>真爱是不求回报的么</li>
<li>喜欢和爱的区别</li>
<li>如何分辨爱与欲望</li>
</ul>
<p>任何一段经历都有其意义, 尽量从中成长, 让自己变的更好</p>
<p>即使是只付出, 对方没给什么回报, 但是实际上, 自己大概可以学会怎么付出, 算是自己给自己的回报吧</p>
<h3 id="2016_u5E742_u670817_u65E5"><a href="#2016_u5E742_u670817_u65E5" class="headerlink" title="2016年2月17日"></a>2016年2月17日</h3><p>验证一样东西的重要性, 可以这样做: 先拥有, 然后失去</p>
<p>妄自菲薄伤害的不是自己, 而是爱你的人.</p>
<p>什么是态度, 态度就是你在乎</p>
<h3 id="2016_u5E742_u670818_u65E5"><a href="#2016_u5E742_u670818_u65E5" class="headerlink" title="2016年2月18日"></a>2016年2月18日</h3><p>我没有任何的疑问, 这是爱. 只是外界的一些东西在这上面套了枷锁.</p>
<p>男人的担当, 体现在 Farm 好自己, 带领团队(2人也算小团队)走向胜利, 而不是作为一个 Carry 却去给辅助买鸡买眼挡刀让人头, 错位的打法无疑会团灭.</p>
<p><strong>本质的善良，天性的温厚，开阔的胸襟</strong> </p>
<h3 id="2016_u5E742_u670819_u65E5"><a href="#2016_u5E742_u670819_u65E5" class="headerlink" title="2016年2月19日"></a>2016年2月19日</h3><p>对事不对人: 不做动机揣摩，少做价值判断</p>
<p>我往往租的房子离公司比较近, 不是因为我喜欢上班, 是因为我喜欢下班回家.</p>
<h3 id="2016_u5E742_u670820_u65E5"><a href="#2016_u5E742_u670820_u65E5" class="headerlink" title="2016年2月20日"></a>2016年2月20日</h3><p>不要让爱情受到经济的限制, 所以, 努力工作吧!</p>
<h3 id="2016_u5E742_u670821_u65E5"><a href="#2016_u5E742_u670821_u65E5" class="headerlink" title="2016年2月21日"></a>2016年2月21日</h3><p>在成熟和不成熟之间有一道分水岭：一个人是否拥有清醒的自我认知。</p>
<p>何以解忧? 有的人通过喝酒(麻醉自己), 有的人通过旅行(转换环境), 有的人通过心理咨询(倾诉), 有的人通过忙碌工作(转移注意力).</p>
<h3 id="2016_u5E742_u670822_u65E5"><a href="#2016_u5E742_u670822_u65E5" class="headerlink" title="2016年2月22日"></a>2016年2月22日</h3><p>注意你的控制欲, 人人都是独立自由的.</p>
<h3 id="2016_u5E742_u670823_u65E5"><a href="#2016_u5E742_u670823_u65E5" class="headerlink" title="2016年2月23日"></a>2016年2月23日</h3><p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/Modern.png" alt="Modern"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="2016_u5E742_u67081_u65E5"><a href="#2016_u5E742_u67081_u65E5" class="headerlink" title="2016年2月1日"></a>2016年2月1日</h3><p>早上, 身体已经醒了,人没能立马起来, 懒惰的大脑就 yy 着外面好冷 …<br>主要是起床那一瞬间的奖励(或者不起床的惩罚)比不上赖床一刻的舒服啊<br>最终起来了,果然很冷, 发型很怂, 于是跑到卫生间洗了个冷水头,<br>但是洗冷水头的过程中, 觉得冷度也就那样, 洗完出来之后, 反而觉得不冷了.<br>所以很多时候困难并不像想象的那么难, 嗯, 洗冷水应该还能激发一点身体潜能.<br>另外, 不要把事情弄的太复杂, 简单化吧.<br>把事情分成要做的和不要做的就行, 别加上太多修饰词, 比如应该要做的 , 明天要做的.</p>
<p>嗯, </p>
<ul>
<li>要起床. </li>
<li>要洗头(美好的一天从早起洗头开始, 糟糕的一天从大半夜还不睡觉开始). </li>
<li>要出去取快递. </li>
<li>要熟练 docker. </li>
<li>要静心. (遇到困难是必然的,不能立马见效也是必然的,但是要坚持)</li>
<li>要锻炼.</li>
</ul>
<p>这么冷的天, Lilia居然还闻到了桂花</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/guihua.png" alt="guihua"></p>]]>
    
    </summary>
    
      <category term="碎碎念" scheme="http://yoursite.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker构建Nginx镜像]]></title>
    <link href="http://yoursite.com/2016/01/27/Docker%E6%9E%84%E5%BB%BANginx%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2016/01/27/Docker构建Nginx镜像/</id>
    <published>2016-01-27T14:11:04.000Z</published>
    <updated>2016-02-04T15:54:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="apt-get__u5B89_u88C5_u7248"><a href="#apt-get__u5B89_u88C5_u7248" class="headerlink" title="apt-get 安装版"></a>apt-get 安装版</h3><p>这个是做实验用的,nginx 版本比较旧(1.4.6) 建议用官方的 nginx 镜像</p>
<p>创建工作目录</p>
<pre><code>root@Ubuntu:~# mkdir nginx_ubuntu
root@Ubuntu:~# cd nginx_ubuntu
</code></pre><p>编写 Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~/nginx_ubuntu<span class="comment"># cat Dockerfile</span></span><br><span class="line"><span class="built_in">FROM</span> sshd:dockerfile</span><br><span class="line"><span class="built_in">MAINTAINER</span> Rex</span><br><span class="line"><span class="comment"># install Nginx</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">\</span><br><span class="line">  apt-get install -y nginx  \</span><br><span class="line">  &amp;&amp;  <span class="built_in">echo</span> <span class="string">"\ndaemon off;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><span class="comment"># set timezone</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash"><span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dpkg-reconfigure <span class="operator">-f</span> noninteractive tzdata</span><br><span class="line"></span><span class="comment"># add script , this will cover the old script on the same path</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">run.sh /run.sh</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chmod +x /run.sh</span><br><span class="line"></span><span class="comment"># define volume</span></span><br><span class="line"><span class="built_in">VOLUME</span> <span class="bash">[<span class="string">"/etc/nginx/sites-enabled"</span>, <span class="string">"/etc/nginx/certs"</span>, <span class="string">"/etc/nginx/conf.d"</span>, <span class="string">"/var/log/nginx"</span>]</span><br><span class="line"></span><span class="comment"># command</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[<span class="string">"/run.sh"</span>]</span><br><span class="line"></span><span class="comment"># port</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>编写 run.sh 脚本</p>
<pre><code>root@Ubuntu:~/nginx_ubuntu# cat run.sh
#!/bin/bash
/usr/sbin/sshd &amp;
service nginx start
</code></pre><p>开始构建</p>
<pre><code>root@Ubuntu:~/nginx_ubuntu# docker build -t nginx:stable .
</code></pre><p>运行测试</p>
<pre><code>root@Ubuntu:~/nginx_ubuntu# docker run -d --name=nginx -P nginx:stable
a328e2d1a2408254ead51bed477efc16b2d4c4804016405631e62798e52ecf33
root@Ubuntu:~/nginx_ubuntu# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                  NAMES
a328e2d1a240        nginx:stable        &quot;/run.sh&quot;           2 seconds ago       Up 2 seconds        0.0.0.0:32785-&gt;22/tcp, 0.0.0.0:32784-&gt;80/tcp, 0.0.0.0:32783-&gt;443/tcp   nginx
352a2bfe36b3        registry            &quot;docker-registry&quot;   3 days ago          Up 3 days           0.0.0.0:5000-&gt;5000/tcp                                                 lonely_swanson
</code></pre><h3 id="u5B98_u65B9Nginx_u955C_u50CF_u7684_Dockerfile"><a href="#u5B98_u65B9Nginx_u955C_u50CF_u7684_Dockerfile" class="headerlink" title="官方Nginx镜像的 Dockerfile"></a>官方Nginx镜像的 Dockerfile</h3><pre><code>FROM debian:jessie

MAINTAINER NGINX Docker Maintainers &quot;docker-maint@nginx.com&quot;

ENV NGINX_VERSION 1.9.10-1~jessie

RUN apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 \
    &amp;&amp; echo &quot;deb http://nginx.org/packages/mainline/debian/ jessie nginx&quot; &gt;&gt; /etc/apt/sources.list \
    &amp;&amp; apt-get update \
    &amp;&amp; apt-get install -y ca-certificates nginx=${NGINX_VERSION} gettext-base \
    &amp;&amp; rm -rf /var/lib/apt/lists/*

# forward request and error logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log \
    &amp;&amp; ln -sf /dev/stderr /var/log/nginx/error.log

EXPOSE 80 443

CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]
</code></pre><h3 id="u7F16_u8BD1_u5B89_u88C5_Tengine__u7248_u672C"><a href="#u7F16_u8BD1_u5B89_u88C5_Tengine__u7248_u672C" class="headerlink" title="编译安装 Tengine 版本"></a>编译安装 Tengine 版本</h3><p>未完待续…</p>
<h3 id="u7BA1_u7406"><a href="#u7BA1_u7406" class="headerlink" title="管理"></a>管理</h3><p>现在我们已经可以运行 nginx 容器了, 但是如何管理网站内容和对 Nginx 进行配置呢? docker 的容器是如此轻便, 我觉得有时候可以把以前的 nginx 多站点管理改成 对 docker 容器的管理就好了, 一个 docker nginx 容器就运行一个站点.</p>
<h4 id="u5185_u5BB9_u7BA1_u7406_u4E0E_u914D_u7F6E"><a href="#u5185_u5BB9_u7BA1_u7406_u4E0E_u914D_u7F6E" class="headerlink" title="内容管理与配置"></a>内容管理与配置</h4><p>一种方法是启动容器时将本地目录挂载到nginx 容器上, 从而使得本地目录的变更都能映射到容器中</p>
<pre><code>root@Ubuntu:~# docker run --name nginx -v /nginx/sites-enabled:/etc/nginx/sites-enabled:ro -v /nginx/html:/usr/share/nginx/html:ro -d -P --rm nginx:stable
</code></pre><p>如果容器正在运行, 更改了配置文件之后, 如何让 Nginx 加载配置文件呢? 可以利用 crontab 定时 reload nginx 服务…</p>
<p>ubuntu 容器默认是不运行 cron rsyslog 等服务的, 还得在 run.sh 脚本里加入运行 cron 服务的命令</p>
<p>下面构建一个 带定时 reload 的 nginx 镜像</p>
<p>Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~/dockerfile_dir/nginx_ubuntu<span class="comment"># cat Dockerfile</span></span><br><span class="line"><span class="built_in">FROM</span> sshd:dockerfile</span><br><span class="line"><span class="built_in">MAINTAINER</span> Rex</span><br><span class="line"><span class="comment"># install Nginx</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">\</span><br><span class="line">    apt-get install -qy nginx  \</span><br><span class="line">    &amp;&amp;  <span class="built_in">echo</span> <span class="string">"\ndaemon off;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><span class="comment"># set timezone</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash"><span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dpkg-reconfigure <span class="operator">-f</span> noninteractive tzdata</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Create the log file</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">touch /var/<span class="built_in">log</span>/cron.log</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># Add crontab file in the cron directory</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">crontab /etc/cron.d/nginx-reload</span><br><span class="line"></span><span class="comment"># Give execution rights on the cron job</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">chmod <span class="number">0644</span> /etc/cron.d/nginx-reload</span><br><span class="line"></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add script , this will cover the old script on the same path</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">run.sh /run.sh</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chmod +x /run.sh</span><br><span class="line"></span><span class="comment"># command</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[<span class="string">"/run.sh"</span>]</span><br><span class="line"></span></span><br><span class="line"><span class="comment"># port</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>
<p>crontab</p>
<pre><code>root@Ubuntu:~/dockerfile_dir/nginx_ubuntu# cat crontab
* * * * * root /usr/sbin/nginx -t &amp;&amp; service nginx reload &gt;&gt; /var/log/cron.log 2&gt;&amp;1
# An empty line is required at the end of this file for a valid cron file.
</code></pre><p>run.sh</p>
<pre><code>root@Ubuntu:~/dockerfile_dir/nginx_ubuntu# cat run.sh
#!/bin/bash
/usr/sbin/sshd &amp;
cron
service nginx start
</code></pre><p>构建镜像</p>
<pre><code>docker build -t rex/nginx:test .
</code></pre><p>运行</p>
<pre><code>root@Ubuntu:/var/www# docker run -d -P -v ~/dockerfile_dir/etc/nginx_conf:/etc/nginx/sites-enabled -v /var/www:/var/www --name=nginx rex/nginx:test
</code></pre><p>测试, 新建一个test2的虚拟网站</p>
<pre><code>root@Ubuntu:/var/www# mkdir test2
root@Ubuntu:/var/www# echo test2 &gt;&gt; test2/index.html

root@Ubuntu:~/dockerfile_dir/etc/nginx_conf# cat test2
server {
   listen 80;
   server_name test2.a-ho.com;
   root /var/www/test2;
   index index.html;
}
</code></pre><p>等一分钟后, 访问网页, 就能看到输出 test2</p>
<h4 id="u65E5_u5FD7_u5904_u7406"><a href="#u65E5_u5FD7_u5904_u7406" class="headerlink" title="日志处理"></a>日志处理</h4><p>感谢:</p>
<p><a href="https://hub.docker.com/_/nginx/" target="_blank" rel="external">Docker 官方 Nginx 镜像</a></p>
<p><a href="https://blog.docker.com/2015/04/tips-for-deploying-nginx-official-image-with-docker/" target="_blank" rel="external">Docker部署 nginx 的技巧</a></p>
<p><a href="http://www.ivankrizsan.se/2015/10/31/time-in-docker-containers/" target="_blank" rel="external">容器设置时区以及时间同步</a></p>
<p><a href="https://www.ekito.fr/people/run-a-cron-job-with-docker/" target="_blank" rel="external">Docker 容器中运行 crontab 任务</a></p>
<p><a href="http://dockone.io/article/131" target="_blank" rel="external">CMD 和 ENTRYPOINT 区别</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="apt-get__u5B89_u88C5_u7248"><a href="#apt-get__u5B89_u88C5_u7248" class="headerlink" title="apt-get 安装版"></a>apt-get 安装版</h3><p>这个是做实验用的,nginx 版本比较旧(1.4.6) 建议用官方的 nginx 镜像</p>
<p>创建工作目录</p>
<pre><code>root@Ubuntu:~# mkdir nginx_ubuntu
root@Ubuntu:~# cd nginx_ubuntu
</code></pre><p>编写 Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~/nginx_ubuntu<span class="comment"># cat Dockerfile</span></span><br><span class="line"><span class="built_in">FROM</span> sshd:dockerfile</span><br><span class="line"><span class="built_in">MAINTAINER</span> Rex</span><br><span class="line"><span class="comment"># install Nginx</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash">\</span><br><span class="line">  apt-get install -y nginx  \</span><br><span class="line">  &amp;&amp;  <span class="built_in">echo</span> <span class="string">"\ndaemon off;"</span> &gt;&gt; /etc/nginx/nginx.conf</span><br><span class="line"></span><span class="comment"># set timezone</span></span><br><span class="line"><span class="built_in">RUN</span> <span class="bash"><span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">dpkg-reconfigure <span class="operator">-f</span> noninteractive tzdata</span><br><span class="line"></span><span class="comment"># add script , this will cover the old script on the same path</span></span><br><span class="line"><span class="built_in">ADD</span> <span class="bash">run.sh /run.sh</span><br><span class="line"></span><span class="built_in">RUN</span> <span class="bash">chmod +x /run.sh</span><br><span class="line"></span><span class="comment"># define volume</span></span><br><span class="line"><span class="built_in">VOLUME</span> <span class="bash">[<span class="string">"/etc/nginx/sites-enabled"</span>, <span class="string">"/etc/nginx/certs"</span>, <span class="string">"/etc/nginx/conf.d"</span>, <span class="string">"/var/log/nginx"</span>]</span><br><span class="line"></span><span class="comment"># command</span></span><br><span class="line"><span class="built_in">CMD</span> <span class="bash">[<span class="string">"/run.sh"</span>]</span><br><span class="line"></span><span class="comment"># port</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="built_in">EXPOSE</span> <span class="number">443</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[创建SSH服务镜像]]></title>
    <link href="http://yoursite.com/2016/01/26/%E7%94%A8Dockerfile%E5%88%9B%E5%BB%BASSH%E6%9C%8D%E5%8A%A1%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2016/01/26/用Dockerfile创建SSH服务镜像/</id>
    <published>2016-01-26T06:39:23.000Z</published>
    <updated>2016-01-27T15:24:05.000Z</updated>
    <content type="html"><![CDATA[<p>docker 镜像默认都是没安装 ssh 服务的. 虽然用exec的方法可以在宿主机进入容器, 每个镜像跑一个 ssh 服务也违背了 docker 一个容器运行一个服务的原则, 但是还是习惯了用 ssh 来进行管理, 加上 ssh 所占资源也不多, 那么还是创建一个吧.</p>
<p>创建镜像有2种方法, 第一种是基于 commit 命令创建, 第二张是用 Dockerfile 创建</p>
<p>用 Dockerfile 创建推荐的, 但是 Dockerfile 怎么写出来呢? 除非你很熟练了, 不然还是先用第一种方式创建一个, 成功之后, 在把执行过的命令写到 Dockerfile , 这样就比较好写了.</p>
<a id="more"></a>
<h4 id="u57FA_u4E8E_commit__u547D_u4EE4_u521B_u5EFA"><a href="#u57FA_u4E8E_commit__u547D_u4EE4_u521B_u5EFA" class="headerlink" title="基于 commit 命令创建"></a>基于 commit 命令创建</h4><p>创建一个 ubuntu 容器, ssh 命令是没有安装的</p>
<pre><code>root@Ubuntu:~# docker run -it ubuntu /bin/bash
root@0af4196431d5:/# ssh
bash: ssh: command not found
</code></pre><p>更换国内的源</p>
<pre><code>root@0af4196431d5:/# vi /etc/apt/sources.list
root@0af4196431d5:/# cat &gt; /etc/apt/sources.list &lt;&lt; EOF
deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
EOF
root@0af4196431d5:/# cat /etc/apt/sources.list
deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse    
root@0af4196431d5:/# apt-get update -y
</code></pre><p>安装 ssh 服务</p>
<pre><code>root@0af4196431d5:/# apt-get install -y openssh-server
</code></pre><p>启动 ssh</p>
<pre><code>root@0af4196431d5:/# /etc/init.d/ssh start
</code></pre><p>查看一下, 已经处于监听状态</p>
<pre><code>root@0af4196431d5:/# ss -l |grep ssh
tcp    LISTEN     0      128                  *:ssh                   *:*
tcp    LISTEN     0      128                 :::ssh                  :::*
root@0af4196431d5:/# ss -ln |grep 22
tcp    LISTEN     0      128                    *:22                    *:*
tcp    LISTEN     0      128                   :::22                   :::*
</code></pre><p>创建公钥目录, 添加公钥</p>
<pre><code>root@0af4196431d5:/# mkdir ~/.ssh
root@0af4196431d5:/# cat &gt; ~/.ssh/authorized_keys &lt;&lt; EOF
&gt; &lt;你的公钥&gt;
&gt; EOF
root@0af4196431d5:/# chmod 750 .ssh/
root@0af4196431d5:/# chmod 400 ~/.ssh/authorized_keys
</code></pre><p>创建启动 ssh 服务的脚本, 然后退出容器</p>
<pre><code>root@0af4196431d5:/# cat &gt; run.sh &lt;&lt; EOF
&gt; #!/bin/bash
&gt; /usr/sbin/sshd -D    #这里必须要用 -D 模式运行 ,否则 docker 容器运行完就退出了
&gt; EOF
root@0af4196431d5:/# chmod +x run.sh
root@0af4196431d5:/# exit    
</code></pre><p>commit 提交修改, 保存为新的 sshd:ubuntu 镜像</p>
<pre><code>root@Ubuntu:~# docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS                    NAMES
0af4196431d5        ubuntu              &quot;/bin/bash&quot;         42 minutes ago      Exited (1) 18 seconds ago                            reverent_morse
352a2bfe36b3        registry            &quot;docker-registry&quot;   42 hours ago        Up 42 hours                 0.0.0.0:5000-&gt;5000/tcp   lonely_swanson

root@Ubuntu:~# docker commit 0af sshd:ubuntu

root@Ubuntu:~# docker images|grep ssh
sshd                            ubuntu              cd28451ce252        About a minute ago   252.6 MB
</code></pre><p>使用镜像, 启动容器, 添加端口映射 10022-&gt;22</p>
<pre><code>root@Ubuntu:~# docker run -d -p 10022:22 sshd:ubuntu /run.sh

root@Ubuntu:~# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES
a11e3d2e8c43        sshd:ubuntu         &quot;/run.sh&quot;           23 seconds ago      Up 22 seconds       0.0.0.0:10022-&gt;22/tcp    jovial_hugle
352a2bfe36b3        registry            &quot;docker-registry&quot;   42 hours ago        Up 42 hours         0.0.0.0:5000-&gt;5000/tcp   lonely_swanson
</code></pre><p>在外面进行登录测试:</p>
<pre><code>ssh root@192.168.100.103 -p 10022  
</code></pre><h4 id="u4F7F_u7528_Dockerfile__u521B_u5EFA"><a href="#u4F7F_u7528_Dockerfile__u521B_u5EFA" class="headerlink" title="使用 Dockerfile 创建"></a>使用 Dockerfile 创建</h4><p>创建工作目录</p>
<pre><code>root@Ubuntu:~# mkdir sshd_ubuntu
</code></pre><p>创建Dockerfile 和 run.sh</p>
<pre><code>root@Ubuntu:~# cd sshd_ubuntu
root@Ubuntu:~/sshd_ubuntu# touch Dockerfile run.sh
root@Ubuntu:~/sshd_ubuntu# ls
Dockerfile  run.sh
</code></pre><p>编写 run.sh 脚本和秘钥认证文件</p>
<pre><code>root@Ubuntu:~/sshd_ubuntu# cat &gt; run.sh &lt;&lt; EOF
&gt; #!/bin/bash
&gt; /usr/sbin/sshd -D
&gt; EOF
root@Ubuntu:~/sshd_ubuntu# cat ~/.ssh/
authorized_keys  id_rsa           id_rsa.pub
root@Ubuntu:~/sshd_ubuntu# cat ~/.ssh/id_rsa.pub &gt; authorized_keys
</code></pre><p>编写 Dockerfile</p>
<pre><code>root@Ubuntu:~/sshd_ubuntu# cat Dockerfile
# base image
FROM ubuntu
# maintainer info
MAINTAINER from localhost by Rex
# change apt source to aliyun
RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot; &gt; /etc/apt/sources.list
RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN echo &quot;deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse&quot; &gt;&gt; /etc/apt/sources.list
RUN apt-get update -y
# install ssh service
RUN apt-get install -y openssh-server
# start ssh service , it will create /var/run/ssh
RUN /etc/init.d/ssh start
RUN /etc/init.d/ssh stop
RUN mkdir -p /root/.ssh
ADD authorized_keys /root/.ssh/authorized_keys
ADD run.sh /run.sh
RUN chmod 750 /root/.ssh/
RUN chmod 400 /root/.ssh/authorized_keys
RUN chmod +x /run.sh
# open port
EXPOSE 22
# set auto run command
CMD [&quot;/run.sh&quot;]
</code></pre><p>注意事项:</p>
<ul>
<li>尽量使用绝对路径</li>
<li>cat &gt; file &lt;&lt; EOF 的用法不行</li>
</ul>
<p>开始构建:</p>
<pre><code>root@Ubuntu:~/sshd_ubuntu# docker build -t sshd:dockerfile .

root@Ubuntu:~/sshd_ubuntu# docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
sshd                            dockerfile          896888f6e3f3        40 seconds ago      252.6 MB
</code></pre><p>在外面测试, 连接成功!</p>
<p>感谢:</p>
<p><a href="https://blog.docker.com/2014/06/why-you-dont-need-to-run-sshd-in-docker" target="_blank" rel="external">Why you don’t need to run SSHd in your Docker containers</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>docker 镜像默认都是没安装 ssh 服务的. 虽然用exec的方法可以在宿主机进入容器, 每个镜像跑一个 ssh 服务也违背了 docker 一个容器运行一个服务的原则, 但是还是习惯了用 ssh 来进行管理, 加上 ssh 所占资源也不多, 那么还是创建一个吧.</p>
<p>创建镜像有2种方法, 第一种是基于 commit 命令创建, 第二张是用 Dockerfile 创建</p>
<p>用 Dockerfile 创建推荐的, 但是 Dockerfile 怎么写出来呢? 除非你很熟练了, 不然还是先用第一种方式创建一个, 成功之后, 在把执行过的命令写到 Dockerfile , 这样就比较好写了.</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[容器间通信]]></title>
    <link href="http://yoursite.com/2016/01/24/%E5%AE%B9%E5%99%A8%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2016/01/24/容器间通信/</id>
    <published>2016-01-24T12:08:14.000Z</published>
    <updated>2016-01-26T06:07:02.000Z</updated>
    <content type="html"><![CDATA[<p>做一个最简单实验就明白了</p>
<p>创建一个redis数据库容器:</p>
<pre><code>root@Ubuntu:~# docker run -d --name redis1 redis
</code></pre><p>然後建立一個新的容器，並將它連接到 db 容器:</p>
<pre><code>root@Ubuntu:~# docker run -it --link redis1:redis --name redisclient1 busybox
</code></pre><p>此時，db 容器和 web 容器建立互聯關系:</p>
<p><code>--link</code> 參數的格式為 <code>--link name:alias</code>，其中 <code>name</code> 是要連接的容器名稱，<code>alias</code> 是這個連接的別名。</p>
<a id="more"></a>
<p>执行完命令后, 会进入 busybox 的 shell, 执行如下命令:</p>
<pre><code>/ # cat /etc/hosts
172.17.0.4    48cc7f111327
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
172.17.0.3    redis c92f7376a0d1 redis1
/ # ping redis
PING redis (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.111 ms
^C
--- redis ping statistics ---
1 packets transmitted, 1 packets received, 0% packet loss
round-trip min/avg/max = 0.111/0.111/0.111 ms
</code></pre><p>发现 hosts 文件以及自动添加上了 redis 的地址</p>
<p>运行 set 命令还能查看具体信息:</p>
<pre><code>/ # set
...
REDIS_ENV_REDIS_DOWNLOAD_SHA1=&apos;4b1c7b1201984bca8f7f9c6c58862f6928cf0a25&apos;
REDIS_ENV_REDIS_DOWNLOAD_URL=&apos;http://download.redis.io/releases/redis-3.0.6.tar.gz&apos;
REDIS_ENV_REDIS_VERSION=&apos;3.0.6&apos;
REDIS_NAME=&apos;/redisclient1/redis&apos;
REDIS_PORT=&apos;tcp://172.17.0.3:6379&apos;
REDIS_PORT_6379_TCP=&apos;tcp://172.17.0.3:6379&apos;
REDIS_PORT_6379_TCP_ADDR=&apos;172.17.0.3&apos;
REDIS_PORT_6379_TCP_PORT=&apos;6379&apos;
REDIS_PORT_6379_TCP_PROTO=&apos;tcp&apos;
...
</code></pre><p>我们怎么知道这样是真的就连上了呢? 可以这样测试一下</p>
<p>用 redis 镜像新建一个容器:</p>
<pre><code>root@Ubuntu:~# docker run -it --link redis1:redis --name client1 redis sh
</code></pre><p>进行连接</p>
<pre><code># redis-cli -h redis
redis:6379&gt; PING
PONG
redis:6379&gt; set myvar DOCKER
OK
redis:6379&gt; get myvar
&quot;DOCKER&quot;
redis:6379&gt; exit
# exit
</code></pre><p>成功!</p>
<p>再新建一个容器, 连接同一个 redis 数据库:</p>
<pre><code>root@Ubuntu:~# docker run -it --link redis1:redis --name client2 redis sh
# redis-cli -h redis
redis:6379&gt; get myvar
&quot;DOCKER&quot;
redis:6379&gt; exit
# exit
</code></pre><p>OK</p>
<p>感谢:</p>
<p><a href="http://rominirani.com/2015/07/31/docker-tutorial-series-part-8-linking-containers/" target="_blank" rel="external">Docker Tutorial Series : Part 8 : Linking Containers</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>做一个最简单实验就明白了</p>
<p>创建一个redis数据库容器:</p>
<pre><code>root@Ubuntu:~# docker run -d --name redis1 redis
</code></pre><p>然後建立一個新的容器，並將它連接到 db 容器:</p>
<pre><code>root@Ubuntu:~# docker run -it --link redis1:redis --name redisclient1 busybox
</code></pre><p>此時，db 容器和 web 容器建立互聯關系:</p>
<p><code>--link</code> 參數的格式為 <code>--link name:alias</code>，其中 <code>name</code> 是要連接的容器名稱，<code>alias</code> 是這個連接的別名。</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker数据卷]]></title>
    <link href="http://yoursite.com/2016/01/23/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
    <id>http://yoursite.com/2016/01/23/Docker数据卷/</id>
    <published>2016-01-23T13:31:38.000Z</published>
    <updated>2016-01-26T06:06:39.000Z</updated>
    <content type="html"><![CDATA[<h5 id="u7279_u70B9"><a href="#u7279_u70B9" class="headerlink" title="特点"></a>特点</h5><ul>
<li>数据卷可以在容器间共享和重用</li>
<li>对数据卷的修改会立马生效</li>
<li>对数据卷的更新,不会影响镜像</li>
<li>卷会一直存在, 直到没有容器使用</li>
</ul>
<p>数据卷容器: 如果需要在容器间共享一些持续更新的数据, 最简单的方式是使用数据卷容器.</p>
<p>相当于是创建了一个共享文件夹给各个容器用</p>
<a id="more"></a>
<h5 id="u521B_u5EFA"><a href="#u521B_u5EFA" class="headerlink" title="创建"></a>创建</h5><p>创建一个名为 dbdata 的数据卷容器</p>
<pre><code>root@Ubuntu:~# docker run -it -v /dbdata --name dbdata ubuntu
</code></pre><p>查看挂载信息    </p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@Ubuntu</span>:~<span class="comment"># docker inspect -f "&#123;&#123; .Mounts &#125;&#125;" dbdata</span></span><br><span class="line">[&#123;<span class="number">6e59</span>fe3a00d347531fa38c7e9c0fb908ee19d60aebcf5b68bd05b5468c139c73 /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span>/<span class="title">volumes</span>/6<span class="title">e59fe3a00d347531fa38c7e9c0fb908ee19d60aebcf5b68bd05b5468c139c73</span>/<span class="title">_data</span> /<span class="title">dbdata</span> <span class="title">local</span>  <span class="title">true</span>&#125;]</span></span><br></pre></td></tr></table></figure>
<p>其中第一段表示 id, 第二段表示 Ubuntu 本地的目录 , 第三段表示本地目录挂载到容器内的目录</p>
<p>然後，在其他容器中使用 –volumes-from 來掛載 dbdata 容器中的資料卷</p>
<pre><code>docker run -it --volumes-from dbdata --name db1 ubuntu
docker run -it --volumes-from dbdata --name db2 ubuntu
</code></pre><p>注意: 使用 <code>--volumes-from</code> 參數所掛載資料卷的容器自己並不需要保持在執行狀態</p>
<p>此时: 宿主机Ubuntu上的<code>/var/lib/docker/volumes/6e59fe3a00d347531fa38c7e9c0fb908ee19d60aebcf5b68bd05b5468c139c73/_data</code>等于 dbdata, db1, db2 上的 <code>/dbdata</code></p>
<p>可以多次使用 <code>--volumes-from</code> 参数来从多个容器挂载多个数据卷, 还可以从其他已经挂载了容器卷的容器来挂载数据卷,如</p>
<pre><code>docker run -it --volumes-from db1 --name db3 ubuntu
</code></pre><h5 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h5><p>数据卷要在删除最后一个还挂载着它的容器时候指定: <code>docker rm -v</code></p>
<h5 id="u5907_u4EFD"><a href="#u5907_u4EFD" class="headerlink" title="备份"></a>备份</h5><p>用下面命令来备份dbdata数据卷容器内的数据卷</p>
<pre><code>root@Ubuntu:~# docker run --volumes-from dbdata -v $(pwd):/backup --name worker ubuntu tar cvf /backup/backup.tar /dbdata
</code></pre><p>实际就是创建了一个 worker 的容器, worker 挂载了 dbdata , 然后在 worker 上执行命令 <code>tar cvf /backup/backup.tar /dbdata</code></p>
<p>之后就会把<code>/dbdata</code>目录的数据备份在当前目录</p>
<h5 id="u6062_u590D"><a href="#u6062_u590D" class="headerlink" title="恢复"></a>恢复</h5><p>我的做法(仅供参考, 概不负责): </p>
<pre><code>root@Ubuntu:~# docker run --volumes-from dbdata -v $(pwd):/restore --name restorer ubuntu tar xf /restore/backup.tar -C /
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h5 id="u7279_u70B9"><a href="#u7279_u70B9" class="headerlink" title="特点"></a>特点</h5><ul>
<li>数据卷可以在容器间共享和重用</li>
<li>对数据卷的修改会立马生效</li>
<li>对数据卷的更新,不会影响镜像</li>
<li>卷会一直存在, 直到没有容器使用</li>
</ul>
<p>数据卷容器: 如果需要在容器间共享一些持续更新的数据, 最简单的方式是使用数据卷容器.</p>
<p>相当于是创建了一个共享文件夹给各个容器用</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端学习(二)--CSS]]></title>
    <link href="http://yoursite.com/2016/01/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0-%E4%BA%8C-CSS/"/>
    <id>http://yoursite.com/2016/01/20/前端学习-二-CSS/</id>
    <published>2016-01-20T15:44:46.000Z</published>
    <updated>2016-01-21T11:32:49.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a>语法</h4><p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/css1.png" alt="css1"></p>
<p>多个属性用分号分隔</p>
<p>注释: /*…*/</p>
<a id="more"></a>
<h4 id="u4F4D_u7F6E"><a href="#u4F4D_u7F6E" class="headerlink" title="位置"></a>位置</h4><p>CSS样式可以写在哪些地方呢？从CSS 样式代码插入的形式来看基本可以分为以下3种：内联式、嵌入式和外部式三种, </p>
<p>1.内联式:</p>
<pre><code>&lt;p style=&quot;color:red;font-size:12px&quot;&gt;这里文字是红色。&lt;/p&gt;
</code></pre><p>2.嵌入式:就是把css样式代码写在<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code>标签之间<br>外联式:写在单独的一个文件中</p>
<p>3.外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将css样式文件链接到HTML文件内，如下面代码：</p>
<pre><code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
</code></pre><p>三种方式的优先级从上到下,但是嵌入式&gt;外部式有一个前提：嵌入式css样式的位置一定在外部式的后面(就近原则), 注意这个和后面提到的<strong>权值</strong>的区别</p>
<h4 id="u9009_u62E9_u5668_u2B50_uFE0F"><a href="#u9009_u62E9_u5668_u2B50_uFE0F" class="headerlink" title="选择器⭐️"></a>选择器⭐️</h4><h5 id="u7C7B_u9009_u62E9_u5668"><a href="#u7C7B_u9009_u62E9_u5668" class="headerlink" title="类选择器"></a>类选择器</h5><p>标签的 class 属性:</p>
<pre><code>&lt;span class=&quot;stress&quot;&gt;胆小如鼠&lt;/span&gt;
</code></pre><p>然后css:</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
.stress{
    color:red;
}
&lt;/style&gt;
</code></pre><h5 id="ID_u9009_u62E9_u5668"><a href="#ID_u9009_u62E9_u5668" class="headerlink" title="ID选择器"></a>ID选择器</h5><pre><code>&lt;span id=&quot;setGreen&quot;&gt;公开课&lt;/span&gt;

#setGreen{
   color:green;
}
</code></pre><p>二者区别: </p>
<p>1.ID 只能用一次, 类可以用多次</p>
<p>2.可以使用类选择器词列表方法为一个元素同时设置多个样式, 而 ID 不行</p>
<pre><code>.stress{
    color:red;
}
.bigsize{
    font-size:25px;
}
&lt;p&gt;到了&lt;span class=&quot;stress bigsize&quot;&gt;三年级&lt;/span&gt;下学期时，我们班上了一节公开课...&lt;/p&gt;
</code></pre><h5 id="u5B50_u9009_u62E9_u5668"><a href="#u5B50_u9009_u62E9_u5668" class="headerlink" title="子选择器"></a>子选择器</h5><p>即大于符号(&gt;),用于选择指定标签元素的第一代子元素</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/css2.png" alt="css2"></p>
<h5 id="u540E_u4EE3_u9009_u62E9_u5668"><a href="#u540E_u4EE3_u9009_u62E9_u5668" class="headerlink" title="后代选择器"></a>后代选择器</h5><p> 加入空格符,用于选择指定标签元素下的后辈元素</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/css3.png" alt="css3"></p>
<p>子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素</p>
<h5 id="u4F2A_u7C7B_u9009_u62E9_u7B26"><a href="#u4F2A_u7C7B_u9009_u62E9_u7B26" class="headerlink" title="伪类选择符"></a>伪类选择符</h5><p>比如说我们给html中一个超链接标签元素的鼠标滑过的状态来设置字体颜色：</p>
<pre><code>a:hover{color:red;}
</code></pre><h5 id="u5206_u7EC4_u9009_u62E9_u7B26"><a href="#u5206_u7EC4_u9009_u62E9_u7B26" class="headerlink" title="分组选择符"></a>分组选择符</h5><p>当你想为html中多个标签元素设置同一个样式时，可以使用分组选择符（，）</p>
<pre><code>h1,span{color:red;}
</code></pre><h4 id="u7EE7_u627F__u6743_u503C__u5C42_u53E0"><a href="#u7EE7_u627F__u6743_u503C__u5C42_u53E0" class="headerlink" title="继承 权值 层叠"></a>继承 权值 层叠</h4><p><strong>继承</strong>的意思,学过面向对象的都懂</p>
<p><strong>权值</strong></p>
<p>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100</p>
<pre><code>p{color:red;} /*权值为1*/
p span{color:green;} /*权值为1+1=2*/
.warning{color:white;} /*权值为10*/
p span.warning{color:purple;} /*权值为1+1+10=12*/
#footer .note p{color:yellow;} /*权值为100+10+1=111*/
</code></pre><p><strong>层叠</strong></p>
<p>层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用</p>
<p><strong>重要性</strong> !important </p>
<pre><code>p{color:red!important;}
p{color:green;}
&lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;
</code></pre><p>优先级: 浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式 &lt;  !important </p>
<h4 id="u6392_u7248"><a href="#u6392_u7248" class="headerlink" title="排版"></a>排版</h4><pre><code>{font-family:&quot;Microsoft Yahei&quot;;}  #字体,注意不要设置不常用的字体，因为如果用户本地电脑上如果没有安装你设置的字体，就会显示浏览器默认的字体

{font-size:12px;color:#666}    #字号、颜色
{font-weight:bold;}    #粗体
{font-style:italic;}    #斜体    
{text-decoration:underline;}    #下划线
{text-decoration:line-through;}    #删除线
{text-indent:2em;}    #中文文章开头空2个字
{line-height:1.5em;}    #行间距
{letter-spacing:50px;}    #字间距
{word-spacing:50px;}    #单词间距
div{text-align:center;}     #为块状元素的文字图片设置居中样式
</code></pre><h4 id="u76D2_u6A21_u578B"><a href="#u76D2_u6A21_u578B" class="headerlink" title="盒模型"></a>盒模型</h4><h5 id="u5143_u7D20_u5206_u7C7B"><a href="#u5143_u7D20_u5206_u7C7B" class="headerlink" title="元素分类"></a>元素分类</h5><p>块状元素、内联元素(又叫行内元素)和内联块状元素</p>
<p>常用的块状元素有：</p>
<p><code>&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</code></p>
<p>块级元素特点：</p>
<p>1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</p>
<p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p>
<p>3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</p>
<p>设置display:block就是将元素显示为块级元素,如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点</p>
<pre><code>a{display:block;}
</code></pre><p>常用的内联元素有：</p>
<p><code>&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</code></p>
<p>内联元素特点：</p>
<p>1、和其他元素都在一行上；</p>
<p>2、元素的高度、宽度及顶部和底部边距不可设置；</p>
<p>3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p>
<p>块状元素也可以通过代码<code>display:inline</code>将元素设置为内联元素</p>
<p>常用的内联块状元素有：</p>
<p><code>&lt;img&gt;、&lt;input&gt;</code></p>
<p>inline-block 元素特点：</p>
<p>1、和其他元素都在一行上；</p>
<p>2、元素的高度、宽度、行高以及顶和底边距都可设置。</p>
<p>代码display:inline-block就是将元素设置为内联块状元素。</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/css4.png" alt="css4"></p>
<h5 id="u56FE_u89E3_u76D2_u6A21_u578B"><a href="#u56FE_u89E3_u76D2_u6A21_u578B" class="headerlink" title="图解盒模型"></a>图解盒模型</h5><p>内填充</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/padding.png" alt="padding"></p>
<p>外边距</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/margin.png" alt="margin"></p>
<p>边框</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/border.png" alt="border"></p>
<p>例子</p>
<pre><code>p{border:2px dotted #ccc;}    #设置边框
div{border-bottom:1px solid red;}    #设置一个方向的边框
</code></pre><p>内填充,外边距,边框都有四个方向</p>
<p>盒子宽高计算</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/box1.png" alt="box1"></p>
<p>填充(上,右,下,左–顺时针)</p>
<pre><code>div{padding:20px 10px 15px 30px;}
div{padding:10px;}
div{padding:10px 20px;}    #上下10,左右20
div{margin:10px 20px 30px;}   #上10,左右20,下30
</code></pre><h4 id="CSS_u5E03_u5C40_u6A21_u578B"><a href="#CSS_u5E03_u5C40_u6A21_u578B" class="headerlink" title="CSS布局模型"></a>CSS布局模型</h4><p>在网页中，元素有三种布局模型：</p>
<ul>
<li>流动模型（Flow）</li>
<li>浮动模型 (Float)</li>
<li>层模型（Layer）</li>
</ul>
<h5 id="u6D6E_u52A8_u6A21_u578B"><a href="#u6D6E_u52A8_u6A21_u578B" class="headerlink" title="浮动模型"></a>浮动模型</h5><p>块状元素默认是独占一行,想要实现如图的并列显示:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/float1.png" alt="float1"></p>
<p>代码:</p>
<pre><code>div{
    width:200px;
    height:200px;
    border:2px red solid;
    float:left;
}
&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;
</code></pre><p>要实现如图的左右浮动:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/float2.png" alt="float2"></p>
<p>代码:</p>
<pre><code>div{
    width:200px;
    height:200px;
    border:2px red solid;
}
#div1{float:left;}
#div2{float:right;}
</code></pre><h5 id="u5C42_u6A21_u578B"><a href="#u5C42_u6A21_u578B" class="headerlink" title="层模型"></a>层模型</h5><p>层模型有三种形式：</p>
<ol>
<li><p>绝对定位(position: absolute)</p>
</li>
<li><p>相对定位(position: relative)</p>
</li>
<li><p>固定定位(position: fixed)</p>
</li>
</ol>
<h6 id="u7EDD_u5BF9_u5B9A_u4F4D"><a href="#u7EDD_u5BF9_u5B9A_u4F4D" class="headerlink" title="绝对定位"></a>绝对定位</h6><p>将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位. 如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口</p>
<p>如下面代码可以实现div元素相对于浏览器窗口向右移动100px，向下移动50px。</p>
<pre><code>div{
    width:200px;
    height:200px;
    border:2px red solid;
    position:absolute;
    left:100px;
    top:50px;
}
&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
</code></pre><p>效果图:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/absolute1.png" alt="absolute1"></p>
<h6 id="u76F8_u5BF9_u5B9A_u4F4D"><a href="#u76F8_u5BF9_u5B9A_u4F4D" class="headerlink" title="相对定位"></a>相对定位</h6><p>需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在<strong>正常文档流</strong>中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后<strong>相对于以前的位置移动</strong>，移动的方向和幅度由left、right、top、bottom属性确定，<strong>偏移前的位置保留不动</strong>。</p>
<p>如下代码实现相对于以前位置向下移动50px，向右移动100px</p>
<pre><code>#div1{
    width:200px;
    height:200px;
    border:2px red solid;
    position:relative;
    left:100px;
    top:50px;
}

&lt;div id=&quot;div1&quot;&gt;&lt;/div&gt;
</code></pre><p>效果图：</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/relative1.png" alt="relative1"></p>
<p>什么叫做“偏移前的位置保留不动”呢？</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/relative2.png" alt="relative2"></p>
<h6 id="u56FA_u5B9A_u5B9A_u4F4D"><a href="#u56FA_u5B9A_u5B9A_u4F4D" class="headerlink" title="固定定位"></a>固定定位</h6><p><code>posttion:fixed</code></p>
<p>想想上下拉网页, 都依然在原地的广告位吧</p>
<h6 id="Relative_u4E0EAbsolute_u7EC4_u5408_u4F7F_u7528_u2B50_uFE0F"><a href="#Relative_u4E0EAbsolute_u7EC4_u5408_u4F7F_u7528_u2B50_uFE0F" class="headerlink" title="Relative与Absolute组合使用⭐️"></a>Relative与Absolute组合使用⭐️</h6><p>一开始是这样的:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/ra1.png" alt="ra1"></p>
<p>对应的代码:</p>
<pre><code>#box3{
    width:200px;
    height:200px;      
}
#box4{
    width:99%;
}

&lt;div id=&quot;box3&quot;&gt;
    &lt;img src=&quot;http://img.mukewang.com/541a7d8a00018cf102000200.jpg&quot;&gt;
    &lt;div id=&quot;box4&quot;&gt;当我还是三年级的学生时是一个害羞的小女生。&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>现在要变成这样的(box4定位到 box3底部):</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/ra2.png" alt="ra2"></p>
<p>对应的代码:</p>
<pre><code>#box3{
    width:200px;
    height:200px;
    position:relative;       
}
#box4{
    width:99%;
     position:absolute;    
    bottom:0px;
}

&lt;div id=&quot;box3&quot;&gt;
    &lt;img src=&quot;http://img.mukewang.com/541a7d8a00018cf102000200.jpg&quot;&gt;
    &lt;div id=&quot;box4&quot;&gt;当我还是三年级的学生时是一个害羞的小女生。&lt;/div&gt;
&lt;/div&gt;
</code></pre><h4 id="u989C_u8272"><a href="#u989C_u8272" class="headerlink" title="颜色"></a>颜色</h4><p>英文颜色</p>
<pre><code>p{color:red;}
</code></pre><p>RGB颜色</p>
<p>这个与 photoshop 中的 RGB 颜色是一致的，由 R(red)、G(green)、B(blue) 三种颜色的比例来配色。</p>
<p>每一项的值可以是 0~255 之间的整数，也可以是 0%~100% 的百分数。</p>
<pre><code>p{color:rgb(133,45,200);}
p{color:rgb(20%,33%,25%);}
</code></pre><p>十六进制颜色</p>
<pre><code>p{color:#00ffff;}
</code></pre><p>这种颜色设置方法是现在比较普遍使用的方法，其原理其实也是 RGB 设置，但是其每一项的值由 0-255 变成了十六进制 00-ff</p>
<h4 id="u6837_u5F0F_u8BBE_u7F6E_u6280_u5DE7"><a href="#u6837_u5F0F_u8BBE_u7F6E_u6280_u5DE7" class="headerlink" title="样式设置技巧"></a>样式设置技巧</h4><h5 id="u6C34_u5E73_u5C45_u4E2D_u8BBE_u7F6E"><a href="#u6C34_u5E73_u5C45_u4E2D_u8BBE_u7F6E" class="headerlink" title="水平居中设置"></a>水平居中设置</h5><h6 id="u884C_u5185_u5143_u7D20"><a href="#u884C_u5185_u5143_u7D20" class="headerlink" title="行内元素"></a>行内元素</h6><p>如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 <code>text-align:center</code> 来实现的</p>
<h6 id="u5B9A_u5BBD_u5757_u72B6_u5143_u7D20"><a href="#u5B9A_u5BBD_u5757_u72B6_u5143_u7D20" class="headerlink" title="定宽块状元素"></a>定宽块状元素</h6><p>当被设置元素为块状元素时用 text-align：center 就不起作用了，这时也分两种情况：定宽块状元素和不定宽块状元素</p>
<pre><code>&lt;style&gt;
div{
    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/

    width:500px;/*定宽*/
    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */
} 
&lt;/style&gt;
</code></pre><h6 id="u4E0D_u5B9A_u5BBD_u5757_u72B6_u5143_u7D20_u65B9_u6CD5"><a href="#u4E0D_u5B9A_u5BBD_u5757_u72B6_u5143_u7D20_u65B9_u6CD5" class="headerlink" title="不定宽块状元素方法"></a>不定宽块状元素方法</h6><p>在实际工作中我们会遇到需要为“不定宽度的块状元素”设置居中，比如网页上的分页导航，因为分页的数量是不确定的，所以我们不能通过设置宽度来限制它的弹性。</p>
<p>不定宽度的块状元素有三种方法居中（这三种方法目前使用的都比多）：</p>
<p>1.加入 table 标签</p>
<p>html 代码:</p>
<pre><code>&lt;div&gt;
&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</code></pre><p>css 代码:</p>
<pre><code>&lt;style&gt;
table{
    margin:0 auto;
}

ul{list-style:none;margin:0;padding:0;}
li{float:left;display:inline;margin-right:8px;}
&lt;/style&gt;
</code></pre><p>2.设置 display;inline 方法</p>
<p>改变块级元素的 display 为 inline 类型，然后使用 text-align:center 来实现居中效果</p>
<p>html代码：</p>
<pre><code>&lt;body&gt;
&lt;div class=&quot;container&quot;&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;1&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;3&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;/body&gt;
</code></pre><p>css代码：</p>
<pre><code>&lt;style&gt;
.container{
    text-align:center;
}
.container ul{
    list-style:none;
    margin:0;
    padding:0;
    display:inline;
}
.container li{
    margin-right:8px;
    display:inline;
}
&lt;/style&gt;
</code></pre><p>这种方法相比第一种方法的优势是不用增加无语义标签，简化了标签的嵌套深度，但也存在着一些问题：它将块状元素的 display 类型改为 inline，变成了行内元素，所以少了一些功能，比如设定长度值。</p>
<p>3.设置 position:relative 和 left:50%;</p>
<p>通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left:-50% 来实现水平居中</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u8BED_u6CD5"><a href="#u8BED_u6CD5" class="headerlink" title="语法"></a>语法</h4><p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/css1.png" alt="css1"></p>
<p>多个属性用分号分隔</p>
<p>注释: /*…*/</p>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端学习(一)]]></title>
    <link href="http://yoursite.com/2016/01/20/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/01/20/前端学习-一/</id>
    <published>2016-01-20T07:55:19.000Z</published>
    <updated>2016-01-20T14:49:48.000Z</updated>
    <content type="html"><![CDATA[<p>前端学习的笔记,方便自己复习</p>
<h4 id="css__u662F_u600E_u4E48_u5F71_u54CD_html__u7684_3F"><a href="#css__u662F_u600E_u4E48_u5F71_u54CD_html__u7684_3F" class="headerlink" title="css 是怎么影响 html 的?"></a>css 是怎么影响 html 的?</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="label">html:</span> &lt;h1&gt;Hi,Jack&lt;/h1&gt;</span><br><span class="line"><span class="label">css:</span>  h1&#123;</span><br><span class="line">         color: <span class="preprocessor">#930;</span></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<h4 id="html_u7ED3_u6784"><a href="#html_u7ED3_u6784" class="headerlink" title="html结构"></a>html结构</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span>...<span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span>...<span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>1.<code>&lt;html&gt;&lt;/html&gt;</code>称为根标签，所有的网页标签都在<code>&lt;html&gt;&lt;/html&gt;</code>中。</p>
<p>2.<code>&lt;head&gt;</code>标签用于定义文档的头部，它是所有头部元素的容器。头部元素有<code>&lt;title&gt;、&lt;script&gt;、 &lt;style&gt;、&lt;link&gt;、 &lt;meta&gt;</code>等标签</p>
<h4 id="u8BA4_u8BC6_u4E00_u4E9B_u5E38_u7528_u6807_u7B7E"><a href="#u8BA4_u8BC6_u4E00_u4E9B_u5E38_u7528_u6807_u7B7E" class="headerlink" title="认识一些常用标签"></a>认识一些常用标签</h4><p>关于标签的<strong>语义化</strong>, 我还不太理解</p>
<p>head部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span> 网页标题, 位于浏览器顶部的那个</span><br></pre></td></tr></table></figure>
<p>body部分</p>
<h5 id="u5E38_u7528_u6587_u672C_u6807_u7B7E"><a href="#u5E38_u7528_u6587_u672C_u6807_u7B7E" class="headerlink" title="常用文本标签"></a>常用文本标签</h5><pre><code>&lt;p&gt;&lt;/p&gt; 段
&lt;hx&gt;&lt;/hx&gt; x 级标题
&lt;em&gt;&lt;/em&gt; 斜体
&lt;strong&gt;&lt;/strong&gt; 粗体
&lt;span&gt;&lt;/span&gt; 为选中的文本单独设置css样式
&lt;q&gt;&lt;/q&gt; 引用一句话,浏览器会自动加上双引号
&lt;blockquote&gt;&lt;/blockquote&gt; 长文本引用, 自带缩进, 也不用加双引号
&lt;br /&gt; 回车换行. 这是个空标签,平时的回车键不管用,因为在html中是忽略回车和空格的
&amp;nbsp; 输入空格
&lt;hr /&gt; 水平横线
&lt;address&gt;&lt;/address&gt; 联系地址信息,联系人信息, 默认斜体
&lt;code&gt;&lt;/code&gt; 插入一行代码
&lt;pre&gt;&lt;/pre&gt; 多行代码, 并且标签内的空格回车生效


&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;  无序列表标签,默认带小圆点
&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;  有序列表标签
</code></pre><h5 id="u5E03_u5C40_u6807_u7B7E_DIV"><a href="#u5E03_u5C40_u6807_u7B7E_DIV" class="headerlink" title="布局标签 DIV"></a>布局标签 DIV</h5><pre><code>&lt;div&gt;&lt;/div&gt; 容器标签, 用于确定一组互相关联的元素, 如下图中红框部分:
</code></pre><p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/div1.png" alt="div1"></p>
<p>可以使用 id 属性为不同 div 区块命名</p>
<h5 id="u8868_u683C_u6807_u7B7E_table"><a href="#u8868_u683C_u6807_u7B7E_table" class="headerlink" title="表格标签 table"></a>表格标签 table</h5><pre><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;认识table表标签&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;table&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;th&gt;班级&lt;/th&gt;
        &lt;th&gt;学生数&lt;/th&gt;
        &lt;th&gt;平均成绩&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;一班&lt;/td&gt;
        &lt;td&gt;30&lt;/td&gt;
        &lt;td&gt;89&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;二班&lt;/td&gt;
        &lt;td&gt;35&lt;/td&gt;
        &lt;td&gt;85&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;三班&lt;/td&gt;
        &lt;td&gt;32&lt;/td&gt;
        &lt;td&gt;80&lt;/td&gt;
    &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>上面这段代码的效果图:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/table1.png" alt="table1"></p>
<p><code>&lt;tbody&gt;…&lt;/tbody&gt;</code>：当表格内容非常多时，表格会下载一点显示一点，但如果加上<tbody>标签后，这个表格就要等表格内容全部下载完才会显示。如右侧代码编辑器中的代码。</tbody></p>
<p>但是这个表格是没边框的,需要用css 样式为它添加边框</p>
<p>在<code>&lt;head&gt;..&lt;/head&gt;</code>中添加代码:</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
table tr td,th{border:1px solid #000;}
&lt;/style&gt;
</code></pre><p>效果:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/table2.png" alt="table2"></p>
<p>利用 summary 属性为表格添加<strong>摘要</strong>(为了<strong>语义化</strong>)和用<code>&lt;caption&gt;&lt;/caption&gt;</code>标签为表格添加标题</p>
<h5 id="u8D85_u94FE_u63A5_u6807_u7B7E"><a href="#u8D85_u94FE_u63A5_u6807_u7B7E" class="headerlink" title="超链接标签"></a>超链接标签</h5><p>语法</p>
<pre><code>&lt;a  href=&quot;目标网址&quot;  title=&quot;鼠标滑过显示的文本&quot;&gt;链接显示的文本&lt;/a&gt;
</code></pre><p>添加 <em>target=”_blank”</em> 属性, 是设置新窗口打开链接</p>
<p>使用mailto在网页中链接邮件地址:</p>
<pre><code>&lt;a href=&quot;mailto:yy@imooc.com?subject=邮件标题&amp;body=邮件内容&quot;&gt;对此影评有何感想，发送邮件给我&lt;/a&gt;
</code></pre><p>注意：如果mailto后面同时有多个参数的话，第一个参数必须以“?”开头，后面的参数每一个都以“&amp;”分隔。</p>
<h5 id="u56FE_u7247_u6807_u7B7E"><a href="#u56FE_u7247_u6807_u7B7E" class="headerlink" title="图片标签"></a>图片标签</h5><p>语法</p>
<pre><code>&lt;img src=&quot;图片地址&quot; alt=&quot;下载失败时的替换文本&quot; title = &quot;提示文本&quot;&gt;
</code></pre><h5 id="u2B50_uFE0F_u4E0E_u6D4F_u89C8_u8005_u4EA4_u4E92_u2013_u8868_u5355_u6807_u7B7E"><a href="#u2B50_uFE0F_u4E0E_u6D4F_u89C8_u8005_u4EA4_u4E92_u2013_u8868_u5355_u6807_u7B7E" class="headerlink" title="⭐️与浏览者交互–表单标签"></a>⭐️与浏览者交互–表单标签</h5><p>网站怎样与用户进行交互？答案是使用HTML表单(form)。表单是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据。</p>
<p>语法：</p>
<pre><code>&lt;form method=&quot;post&quot; action=&quot;save.php&quot;&gt;
  &lt;label for=&quot;username&quot;&gt;用户名:&lt;/label&gt;
  &lt;input type=&quot;text&quot;  name=&quot;username&quot; id=&quot;username&quot; value=&quot;&quot; /&gt; 
  &lt;label for=&quot;pass&quot;&gt;密码:&lt;/label&gt;
  &lt;input type=&quot;password&quot;  name=&quot;pass&quot; id=&quot;pass&quot; value=&quot;&quot; /&gt;    
  &lt;input type=&quot;submit&quot; value=&quot;确定&quot;  name=&quot;submit&quot; /&gt;      &lt;!--提交按钮--&gt;
  &lt;input type=&quot;reset&quot; value=&quot;重置&quot; name=&quot;reset&quot; /&gt;   &lt;!--重置按钮--&gt;
&lt;/form&gt;
</code></pre><p>action ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)</p>
<p>method ： 数据传送的方式（get/post）</p>
<p>所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在<code>&lt;form&gt;&lt;/form&gt;</code>标签之间（否则用户输入的信息可提交不到服务器上哦！）</p>
<p><a href="http://www.imooc.com/wiki/detail/id/142" target="_blank" rel="external">method:post/get的区别</a>这一部分内容属于后端程序员考虑的问题</p>
<p><strong>文本输入框,密码输入框</strong></p>
<pre><code>&lt;form&gt;
   &lt;input type=&quot;text/password&quot; name=&quot;名称&quot; value=&quot;文本&quot; /&gt;
&lt;/form&gt;
</code></pre><p>1、type：</p>
<p>   当type=”text”时，输入框为文本输入框;</p>
<p>   当type=”password”时, 输入框为密码输入框。</p>
<p>2、name：为文本框命名，以备后台程序ASP 、PHP使用。</p>
<p>3、value：为文本输入框设置默认值。(一般起到提示作用)</p>
<p><strong>label标签</strong>不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 label 标签内点击文本，就会触发此控件。就是说，当用户单击选中该label标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该label标签相关连的表单控件上）。</p>
<p>语法：</p>
<pre><code>&lt;label for=&quot;控件id名称&quot;&gt;
</code></pre><p>注意：标签的 for 属性中的值应当与相关控件的 id 属性值一定要相同。</p>
<p><strong>文本域标签</strong></p>
<pre><code>&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt;
</code></pre><p>注意这两个属性可用css样式的width和height来代替：col用width、row用height来代替</p>
<p><strong>单选框, 复选框</strong></p>
<pre><code>&lt;input   type=&quot;radio/checkbox&quot;   value=&quot;值&quot;    name=&quot;名称&quot;   checked=&quot;checked&quot;/&gt;
</code></pre><p>1、type:</p>
<p>   当 type=”radio” 时，控件为单选框</p>
<p>   当 type=”checkbox” 时，控件为复选框</p>
<p>2、value：提交数据到服务器的值（后台程序PHP使用）</p>
<p>3、name：为控件命名，以备后台程序 ASP、PHP 使用</p>
<p>4、checked：当设置 checked=”checked” 时，该选项被默认选中</p>
<p>关于 value 和 name :</p>
<p>form里面的数据不管是post 还是get提交。最后都要让服务器接受，是吧？那么服务器怎么知道你传过来的是什么东西呢？就是通过name来标示的，而这个东西具体有什么值呢？就是value了</p>
<p>效果图:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/checkbox2.png" alt="checkbox2"></p>
<p>对应代码:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/checkbox1.png" alt="checkbox1"></p>
<p>注意:同一组的单选按钮，name 取值一定要一致，比如上面例子为同一个名称“radioLove”，这样同一组的单选按钮才可以起到单选的作用。</p>
<p><strong>下拉列表框</strong> (节省空间)</p>
<pre><code>&lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;
    &lt;label&gt;爱好:&lt;/label&gt;
    &lt;select&gt;
      &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;
      &lt;option value=&quot;旅游&quot; selected=&quot;selected&quot;&gt;旅游&lt;/option&gt;
      &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;
      &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;
    &lt;/select&gt;
&lt;/form&gt;
</code></pre><p>value是向服务器提交的值, selected默认选中</p>
<p>设置多选:</p>
<pre><code>&lt;select multiple=&quot;multiple&quot; size=3&gt;...&lt;/select&gt;
</code></pre><p>先这样了, 明天起来学CSS</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前端学习的笔记,方便自己复习</p>
<h4 id="css__u662F_u600E_u4E48_u5F71_u54CD_html__u7684_3F"><a href="#css__u662F_u600E_u4E48_u5F71_u54CD_html__u7684_3F" class="headerlink" title="css 是怎么影响 html 的?"></a>css 是怎么影响 html 的?</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="label">html:</span> &lt;h1&gt;Hi,Jack&lt;/h1&gt;</span><br><span class="line"><span class="label">css:</span>  h1&#123;</span><br><span class="line">         color: <span class="preprocessor">#930;</span></span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>
<h4 id="html_u7ED3_u6784"><a href="#html_u7ED3_u6784" class="headerlink" title="html结构"></a>html结构</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">head</span>&gt;</span>...<span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">body</span>&gt;</span>...<span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打造Linux 终端翻墙环境]]></title>
    <link href="http://yoursite.com/2016/01/16/%E6%89%93%E9%80%A0Linux-%E7%BB%88%E7%AB%AF%E7%BF%BB%E5%A2%99%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/01/16/打造Linux-终端翻墙环境/</id>
    <published>2016-01-16T04:05:55.000Z</published>
    <updated>2016-01-22T10:31:47.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/shawshank1.png" alt="shawshank"></p>
<h4 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h4><p>本菜最近在做 docker 的实验,需要在新安装 Ubuntu 虚拟机上安装 docker , 但是呢, 该死的 GFW 不让人顺利安装啊     </p>
<p>MD - -! 忍你好久了! I believe I can Fan !</p>
<h4 id="u52A8_u624B"><a href="#u52A8_u624B" class="headerlink" title="动手"></a>动手</h4><p>环境: Ubuntu 14.04.3  </p>
<p>FQ方案为: <strong>shadowsocks</strong> + <strong>privoxy</strong> </p>
<a id="more"></a>
<h5 id="u66F4_u65B0_u56FD_u5185_u6E90"><a href="#u66F4_u65B0_u56FD_u5185_u6E90" class="headerlink" title="更新国内源"></a>更新国内源</h5><p>首先更新 Ubuntu 源, Ubuntu 本来是 us 的源, 更新不动, 只能换国内源了,  国内的 163 源更新时候报错 :    </p>
<pre><code>W: Failed to fetch http://mirrors.163.com/ubuntu/dists/trusty-proposed/main/i18n/Translation-en  Hash Sum mismatch
</code></pre><p>然后换了阿里的源, 更新成功, 具体步骤</p>
<p>1.先备份原来的源列表</p>
<pre><code>cp /etc/apt/sources.list /tmp/source.list.bak
</code></pre><p>2.然后打开<em>/etc/apt/sources.list</em>文件, 清空当前的源, 用下面的源替换</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span></span><br><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>3.更新</p>
<pre><code>apt-get update -y  更新源列表
apt-get upgrade -y (选做)升级软件包
</code></pre><h5 id="u5B89_u88C5_u914D_u7F6Eshadowsocks"><a href="#u5B89_u88C5_u914D_u7F6Eshadowsocks" class="headerlink" title="安装配置shadowsocks"></a>安装配置shadowsocks</h5><p>安装</p>
<pre><code>apt-get install python-gevent python-pip -y  
</code></pre><p>配置</p>
<p>创建shadowsocks配置文件 <em>/etc/shadowsocks.json</em> , 添加shadowsocks服务的配置参数</p>
<p>(注:shadowsocks 服务可以自己买vps 搭建 ,也可以买服务商提供的)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">server</span>": <span class="value"><span class="string">"your server ip"</span></span>,</span><br><span class="line">    "<span class="attribute">server_port</span>": <span class="value"><span class="number">15216</span></span>,</span><br><span class="line">    "<span class="attribute">local_address</span>": <span class="value"><span class="string">"127.0.0.1"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>": <span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">password</span>": <span class="value"><span class="string">"your password"</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>": <span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">fast_open</span>": <span class="value"><span class="literal">true</span></span>,</span><br><span class="line">    "<span class="attribute">workers</span>": <span class="value"><span class="number">1</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>后台运行 shadowsocks</p>
<pre><code>nohup sslocal -c /etc/shadowsocks.json &amp;
</code></pre><p>查看服务端口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~<span class="preprocessor"># lsof -i:<span class="number">1080</span></span></span><br><span class="line">COMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">sslocal <span class="number">16572</span> root    <span class="number">3u</span>  IPv4  <span class="number">53244</span>      <span class="number">0</span>t0  TCP localhost:socks (LISTEN)</span><br><span class="line">sslocal <span class="number">16572</span> root    <span class="number">4u</span>  IPv4  <span class="number">53245</span>      <span class="number">0</span>t0  UDP localhost:socks</span><br></pre></td></tr></table></figure>
<p>运行成功!</p>
<h5 id="u5B89_u88C5_u914D_u7F6EPrivoxy"><a href="#u5B89_u88C5_u914D_u7F6EPrivoxy" class="headerlink" title="安装配置Privoxy"></a>安装配置Privoxy</h5><p>安装</p>
<pre><code>apt-get install privoxy -y
</code></pre><p>配置</p>
<p>打开配置文件<em>/etc/privoxy/config</em></p>
<p>找到 <em>4.2. toggle</em> 上方加入如下配置</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/privoxy1.png" alt="privoxy1"></p>
<p>注意, 这里要 127.0.0.1 不能用 localhost 代替, 否则 privoxy 服务端口会绑定到 ipv6上, 坑!</p>
<p>再到 <em>5.3</em> 上方加入下图配置</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/privoxy2.png" alt="privoxy1"></p>
<p>重启服务</p>
<pre><code>service privoxy restart
</code></pre><p>查看服务端口</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~<span class="comment"># lsof -i:8118</span></span><br><span class="line">COMMAND   PID    <span class="keyword">USER</span>   <span class="title">FD</span>   <span class="operator">TYPE</span> DEVICE SIZE/OFF <span class="keyword">NODE</span><span class="identifier"> </span><span class="title">NAME</span></span><br><span class="line">privoxy <span class="number">19429</span> privoxy    <span class="number">4</span>u  IPv4  <span class="number">58574</span>      <span class="number">0</span>t0  TCP localhost:<span class="number">8118</span> (LISTEN)</span><br></pre></td></tr></table></figure>
<p>运行成功!</p>
<h5 id="u914D_u7F6E_u7EC8_u7AEF_u73AF_u5883http_u4EE3_u7406"><a href="#u914D_u7F6E_u7EC8_u7AEF_u73AF_u5883http_u4EE3_u7406" class="headerlink" title="配置终端环境http代理"></a>配置终端环境http代理</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure>
<p>测试翻墙效果</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~<span class="preprocessor"># wget http:<span class="comment">//facebook.com</span></span></span><br><span class="line">--<span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">35</span>--  http:<span class="comment">//facebook.com/</span></span><br><span class="line">Connecting <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8118</span>... connected.</span><br><span class="line">Proxy request sent, awaiting response... <span class="number">302</span> Found</span><br><span class="line"><span class="built_in">Location</span>: https:<span class="comment">//facebook.com/ [following]</span></span><br><span class="line">--<span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">36</span>--  https:<span class="comment">//facebook.com/</span></span><br><span class="line">Connecting <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8118</span>... connected.</span><br><span class="line">Proxy request sent, awaiting response... <span class="number">301</span> Moved Permanently</span><br><span class="line"><span class="built_in">Location</span>: https:<span class="comment">//www.facebook.com/?_rdr=p [following]</span></span><br><span class="line">--<span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">37</span>--  https:<span class="comment">//www.facebook.com/?_rdr=p</span></span><br><span class="line">Connecting <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8118</span>... connected.</span><br><span class="line">Proxy request sent, awaiting response... <span class="number">302</span> Found</span><br><span class="line"><span class="built_in">Location</span>: https:<span class="comment">//www.facebook.com/unsupportedbrowser [following]</span></span><br><span class="line">--<span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">38</span>--  https:<span class="comment">//www.facebook.com/unsupportedbrowser</span></span><br><span class="line">Connecting <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8118</span>... connected.</span><br><span class="line">Proxy request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: unspecified [<span class="built_in">text</span>/html]</span><br><span class="line">Saving <span class="keyword">to</span>: <span class="string">'index.html'</span></span><br><span class="line"></span><br><span class="line">    [ &lt;=&gt;                                                                                                                                      ] <span class="number">31</span>,<span class="number">392</span>       <span class="number">156</span>KB/s   <span class="built_in">in</span> <span class="number">0.2</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2016</span>-<span class="number">01</span>-<span class="number">16</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">39</span> (<span class="number">156</span> KB/s) - <span class="string">'index.html'</span> saved [<span class="number">31392</span>]</span><br></pre></td></tr></table></figure>
<p>哈!成功! 那就开始愉快的 apt-get 吧, 当我执行 apt-get update 后, 立马报了错, 额, 可能是代理在国外, 访问不了阿里源吧, 于是我把之前备份的 us 源还原回去, 再次执行, 依然报错:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~# apt-get <span class="operator"><span class="keyword">update</span> -y</span><br><span class="line">Ign <span class="keyword">http</span>://<span class="keyword">security</span>.ubuntu.com trusty-<span class="keyword">security</span> InRelease</span><br><span class="line">Err <span class="keyword">http</span>://<span class="keyword">security</span>.ubuntu.com trusty-<span class="keyword">security</span> <span class="keyword">Release</span>.gpg</span><br><span class="line">  Cannot initiate the <span class="keyword">connection</span> <span class="keyword">to</span> <span class="number">8118</span>:<span class="number">80</span> (<span class="number">0.0</span><span class="number">.31</span><span class="number">.182</span>). - <span class="keyword">connect</span> (<span class="number">22</span>: Invalid argument)</span><br><span class="line">  ...</span><br><span class="line">  ...</span></span><br></pre></td></tr></table></figure>
<p>wget 的测试成功了, 说明代理是走得通的, 但是 apt-get 却失败, 这是为什么呢? 我估计是 apt-get 还需要另外配置代理, 果不其然, 通过 google , 找到了答案, 具体往下面看</p>
<h5 id="u914D_u7F6E_apt-get__u7684_u4EE3_u7406"><a href="#u914D_u7F6E_apt-get__u7684_u4EE3_u7406" class="headerlink" title="配置 apt-get 的代理"></a>配置 apt-get 的代理</h5><p>很简单, 创建一个文件 <em>/etc/apt/apt.conf</em> , 添加一句:</p>
<pre><code>Acquire::http::Proxy &quot;http://127.0.0.1:8118&quot;;
</code></pre><p>再次运行 apt-get update -y</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root@Ubuntu:~# apt-get <span class="operator"><span class="keyword">update</span> -y</span><br><span class="line">Ign <span class="keyword">http</span>://us.<span class="keyword">archive</span>.ubuntu.com trusty InRelease</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">1</span> https://apt.dockerproject.org ubuntu-trusty InRelease</span><br><span class="line">Ign https://apt.dockerproject.org ubuntu-trusty InRelease</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">2</span> https://apt.dockerproject.org ubuntu-trusty <span class="keyword">Release</span></span><br><span class="line"><span class="keyword">Get</span>:<span class="number">3</span> https://apt.dockerproject.org ubuntu-trusty/<span class="keyword">main</span> amd64 Packages</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">4</span> https://apt.dockerproject.org ubuntu-trusty/<span class="keyword">main</span> i386 Packages</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">5</span> <span class="keyword">http</span>://<span class="keyword">security</span>.ubuntu.com trusty-<span class="keyword">security</span> InRelease [<span class="number">64.4</span> kB]</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">6</span> https://apt.dockerproject.org ubuntu-trusty/<span class="keyword">main</span> <span class="keyword">Translation</span>-en</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">7</span> <span class="keyword">http</span>://us.<span class="keyword">archive</span>.ubuntu.com trusty-updates InRelease [<span class="number">64.4</span> kB]</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">8</span> <span class="keyword">http</span>://<span class="keyword">security</span>.ubuntu.com trusty-<span class="keyword">security</span>/<span class="keyword">main</span> Sources [<span class="number">103</span> kB]</span><br><span class="line"><span class="keyword">Get</span>:<span class="number">9</span> <span class="keyword">http</span>://us.<span class="keyword">archive</span>.ubuntu.com trusty-backports InRelease [<span class="number">64.5</span> kB]</span><br><span class="line">...</span><br><span class="line">...</span></span><br></pre></td></tr></table></figure>
<p>已经能成功运行, 简直是如丝般顺滑~</p>
<p>docker 的库是我之前配置的, 你们运行时应该看不到2333</p>
<h5 id="u5F00_u673A_u81EA_u542F_u52A8_u7FFB_u5899_u914D_u7F6E"><a href="#u5F00_u673A_u81EA_u542F_u52A8_u7FFB_u5899_u914D_u7F6E" class="headerlink" title="开机自启动翻墙配置"></a>开机自启动翻墙配置</h5><p>在 <em>/etc/rc.local</em> 中加入下面配置, 注意是在 <em>exit 0</em> 之前。 </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">nohup sslocal -c /etc/shadowsocks<span class="class">.json</span> &amp;</span><br><span class="line">service privoxy start</span><br></pre></td></tr></table></figure>
<p>在 <em>/etc/profile</em> 的末尾添加如下两句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"127.0.0.1:8118"</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"127.0.0.1:8118"</span></span><br></pre></td></tr></table></figure>
<h5 id="u4FEE_u6539_DNS"><a href="#u4FEE_u6539_DNS" class="headerlink" title="修改 DNS"></a>修改 DNS</h5><p>顺利安装好 docker 后, 拉取镜像报错:</p>
<pre><code>$ docker pull ubuntu
Using default tag: latest
Pulling repository docker.io/library/ubuntu
Error while pulling image: Get https://index.docker.io/v1/repositories/library/ubuntu/images: dial tcp: lookup index.docker.io: no such host
</code></pre><p>国内运营商的 DNS 太污了,  打开文件 <em>/etc/resolvconf/resolv.conf.d/base</em> , 添加 google 的 dns:<br>nameserver 8.8.8.8<br>nameserver 8.8.4.4</p>
<h4 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h4><p>一句话总结: <strong>一颗赛艇!</strong></p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/excited.png" alt="excited"></p>
<p>感谢:  </p>
<p><a href="http://www.itdadao.com/article/169999/" target="_blank" rel="external">Ubuntu 14.04 配置Shadowsocks和Privoxy实现浏览器和终端代理</a></p>
<p><a href="http://wiki.ubuntu.org.cn/%E6%BA%90%E5%88%97%E8%A1%A8#Trusty.2814.04.29.E7.89.88.E6.9C.AC" target="_blank" rel="external">Ubuntu源列表</a></p>
<p><a href="https://help.ubuntu.com/community/AptGet/Howto" target="_blank" rel="external">Setting up apt-get to use a http-proxy</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/shawshank1.png" alt="shawshank"></p>
<h4 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h4><p>本菜最近在做 docker 的实验,需要在新安装 Ubuntu 虚拟机上安装 docker , 但是呢, 该死的 GFW 不让人顺利安装啊     </p>
<p>MD - -! 忍你好久了! I believe I can Fan !</p>
<h4 id="u52A8_u624B"><a href="#u52A8_u624B" class="headerlink" title="动手"></a>动手</h4><p>环境: Ubuntu 14.04.3  </p>
<p>FQ方案为: <strong>shadowsocks</strong> + <strong>privoxy</strong> </p>]]>
    
    </summary>
    
      <category term="privoxy" scheme="http://yoursite.com/tags/privoxy/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker私有仓库]]></title>
    <link href="http://yoursite.com/2016/01/15/Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2016/01/15/Docker私有仓库/</id>
    <published>2016-01-15T13:47:35.000Z</published>
    <updated>2016-01-22T17:16:29.000Z</updated>
    <content type="html"><![CDATA[<p>为了方便企业内部使用, 更多时候我们需要搭建Docker私有仓库</p>
<p>实验环境:</p>
<ul>
<li>Mac OS X 10.11    ip 为 <em>192.168.100.101</em></li>
<li>Parallels虚拟机虚拟了一台Ubuntu ip 为 <em>192.168.100.103</em> , Ubuntu 上安装了 docker</li>
<li>用docker-machine 在 Mac 上生成了一台名为 default 的虚拟机, 用来跑 docker</li>
</ul>
<p><code>docker-machine ip default</code> 得到结果是: <em>192.168.99.100</em></p>
<p>mac 跟 Ubuntu 是桥接网络, mac 与 default 是 NAT 网络</p>
<p>从 default(192.168.99.100) 能 ping 通 Ubuntu, 反过来不行(原因未明,不知怎么打通,有大神看到请指点一二). 所以我决定在 Ubuntu 上搭建仓库</p>
<a id="more"></a>
<h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><p>1.最简单的是使用官方提供的<strong>registry</strong>镜像进行安装:</p>
<pre><code>docker run -d -p 5000:5000 registry  
</code></pre><p>也可以安装时把镜像文件存在本地指定路径<code>/opt/docker-registry</code>:  </p>
<pre><code>docker run -d -p 5000:5000 -v /opt/docker-registry:/tmp/registry registry
</code></pre><p>完了在 mac 上测试一下:</p>
<pre><code>$ curl http://192.168.100.103:5000
&quot;\&quot;docker-registry server\&quot;&quot;%
</code></pre><p>访问成功</p>
<h4 id="u4F7F_u7528_28_u4E0A_u4F20_u4E0B_u8F7D_29"><a href="#u4F7F_u7528_28_u4E0A_u4F20_u4E0B_u8F7D_29" class="headerlink" title="使用(上传下载)"></a>使用(上传下载)</h4><p>在 mac 本地的 docker 中随意选一个镜像, <code>docker images</code> 查看它的 ID</p>
<pre><code>$ docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
sinatra                         v2                  1a6a1230cfe3        13 days ago         319.4 MB
</code></pre><p>然后用<code>docker tag</code>修改镜像对应仓库</p>
<pre><code>$ docker tag 1a6a1230cfe3 192.168.100.103:5000/sinatra
$ docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
192.168.100.103:5000/sinatra    latest              1a6a1230cfe3        13 days ago         319.4 MB
sinatra                         v2                  1a6a1230cfe3        13 days ago         319.4 MB
</code></pre><p><code>docker tag</code>语法</p>
<pre><code>Usage:    docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
</code></pre><p>其中1a6a1230cfe3 对应 IMAGE</p>
<p>192.168.100.103:5000 对应 REGISTRYHOST</p>
<p>sinatra 对应 NAME</p>
<p>开始上传</p>
<pre><code>$ docker push 192.168.100.103:5000/sinatra
The push refers to a repository [192.168.100.103:5000/sinatra] (len: 1)
unable to ping registry endpoint https://192.168.100.103:5000/v0/
v2 ping attempt failed with error: Get https://192.168.100.103:5000/v2/: EOF
 v1 ping attempt failed with error: Get https://192.168.100.103:5000/v1/_ping: EOF
</code></pre><p>报错了, 解决方法如下</p>
<p>进入docker 虚拟机</p>
<pre><code>docker-machine ssh default
</code></pre><p>在default 虚拟机里修改 <em>/var/lib/boot2docker/profile</em> 文件, 在<strong>EXTRA_ARGS=</strong>里加入:<br><em>–insecure-registry 192.168.100.103:5000</em></p>
<p>重启 vm</p>
<pre><code>docker-machine restart default
</code></pre><p>再次运行:</p>
<pre><code>mac $ docker push 192.168.100.103:5000/sinatra
The push refers to a repository [192.168.100.103:5000/sinatra] (len: 1)
Sending image list
Pushing repository 192.168.100.103:5000/sinatra (1 tags)
895b070402bd: Image successfully pushed
02e5bca4149b: Image successfully pushed
b2ae0a712b39: Image successfully pushed
af88597ec24b: Image successfully pushed
c37dd6c531a6: Image successfully pushed
8a6b590a7aec: Image successfully pushed
5ef2f192cdff: Image successfully pushed
1a6a1230cfe3: Image successfully pushed
Pushing tag for rev [1a6a1230cfe3] on {http://192.168.100.103:5000/v1/repositories/sinatra/tags/latest}
</code></pre><p>curl查看:</p>
<pre><code>$ curl http://192.168.100.103:5000/v1/search
{&quot;num_results&quot;: 1, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [{&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sinatra&quot;}]}%
</code></pre><p>已经成功出现 library/sinatra</p>
<p>下载:</p>
<p>现在到 ubuntu 上下载刚上传的 sinatra 镜像</p>
<pre><code>$ docker pull 192.168.100.103:5000/sinatra
Using default tag: latest
Error response from daemon: unable to ping registry endpoint https://192.168.100.103:5000/v0/
v2 ping attempt failed with error: Get https://192.168.100.103:5000/v2/: EOF
 v1 ping attempt failed with error: Get https://192.168.100.103:5000/v1/_ping: EOF
</code></pre><p>又是这个错, 不过这次修改的文件是<code>/etc/default/docker</code>, 加入:</p>
<pre><code>DOCKER_OPTS=&quot;--insecure-registry 192.168.100.103:5000&quot;
</code></pre><p>然后stop 仓库的镜像, 重启 docker ,再 pull</p>
<pre><code>docker pull 192.168.100.103:5000/sinatra
Using default tag: latest
Pulling repository 192.168.100.103:5000/sinatra
1a6a1230cfe3: Download complete
895b070402bd: Download complete
02e5bca4149b: Download complete
b2ae0a712b39: Download complete
af88597ec24b: Download complete
c37dd6c531a6: Download complete
8a6b590a7aec: Download complete
5ef2f192cdff: Download complete
Status: Downloaded newer image for 192.168.100.103:5000/sinatra:latest
192.168.100.103:5000/sinatra: this image was pulled from a legacy registry.  Important: This registry version will not be supported in future versions of docker.
</code></pre><p>成功!    </p>
<p>不过这种方式不是很好, 每次新加一个仓库都要重启 docker , 有人建议这样:</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com//docker1.png" alt="docker1.png"></p>
<p>嗯, 以后有空再试了</p>
<h4 id="u7BA1_u7406"><a href="#u7BA1_u7406" class="headerlink" title="管理"></a>管理</h4><h5 id="u505C_u6B62"><a href="#u505C_u6B62" class="headerlink" title="停止"></a>停止</h5><pre><code>docker stop registry &amp;&amp; docker rm -v registry
</code></pre><h5 id="u67E5_u627E"><a href="#u67E5_u627E" class="headerlink" title="查找"></a>查找</h5><p>查找名字为sinatra 的镜像</p>
<pre><code>$ curl http://192.168.100.103:5000/v1/search?q=sinatra
{&quot;num_results&quot;: 1, &quot;query&quot;: &quot;sinatra&quot;, &quot;results&quot;: [{&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/sinatra&quot;}]}%
</code></pre><h5 id="u67E5_u770B_u955C_u50CF_u7248_u672C"><a href="#u67E5_u770B_u955C_u50CF_u7248_u672C" class="headerlink" title="查看镜像版本"></a>查看镜像版本</h5><pre><code>$ curl http://192.168.100.103:5000/v1/repositories/library/sinatra/tags
{&quot;latest&quot;: &quot;1a6a1230cfe34b1fd2e7cd66d50e342fc3169a365159754115efd4aae3300c00&quot;}%
</code></pre><h5 id="u5220_u9664"><a href="#u5220_u9664" class="headerlink" title="删除"></a>删除</h5><p><a href="http://stackoverflow.com/questions/25436742/deleting-images-from-a-private-docker-registry" target="_blank" rel="external">貌似没有很好的办法</a></p>
<p>感谢:</p>
<p><a href="http://www.zation.me/2015/05/06/how_to_deploy_docker_registry_on_aliyun.html" target="_blank" rel="external">如何在阿里云上部署私有的Docker Registry</a></p>
<p><a href="http://dockone.io/question/21" target="_blank" rel="external">http://dockone.io/question/21</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了方便企业内部使用, 更多时候我们需要搭建Docker私有仓库</p>
<p>实验环境:</p>
<ul>
<li>Mac OS X 10.11    ip 为 <em>192.168.100.101</em></li>
<li>Parallels虚拟机虚拟了一台Ubuntu ip 为 <em>192.168.100.103</em> , Ubuntu 上安装了 docker</li>
<li>用docker-machine 在 Mac 上生成了一台名为 default 的虚拟机, 用来跑 docker</li>
</ul>
<p><code>docker-machine ip default</code> 得到结果是: <em>192.168.99.100</em></p>
<p>mac 跟 Ubuntu 是桥接网络, mac 与 default 是 NAT 网络</p>
<p>从 default(192.168.99.100) 能 ping 通 Ubuntu, 反过来不行(原因未明,不知怎么打通,有大神看到请指点一二). 所以我决定在 Ubuntu 上搭建仓库</p>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在OS X上安装Docker]]></title>
    <link href="http://yoursite.com/2016/01/08/%E5%9C%A8OS-X%E4%B8%8A%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://yoursite.com/2016/01/08/在OS-X上安装Docker/</id>
    <published>2016-01-08T07:04:22.000Z</published>
    <updated>2016-01-13T14:12:18.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/dockerdocker-engine.png" alt="docker-engine"></p>
<h4 id="Docker__u662F_u4EC0_u4E48_2C__u53EF_u4EE5_u5E94_u7528_u5728_u4EC0_u4E48_u5730_u65B9"><a href="#Docker__u662F_u4EC0_u4E48_2C__u53EF_u4EE5_u5E94_u7528_u5728_u4EC0_u4E48_u5730_u65B9" class="headerlink" title="Docker 是什么, 可以应用在什么地方"></a>Docker 是什么, 可以应用在什么地方</h4><p>超轻量级的虚拟化技术</p>
<p>特点是:<em>敏捷</em></p>
<p>为什么说特点是敏捷, 启动快, 占用资源少是一方面. 但是最令人喜欢的应该是它类似 Git 那样的的版本管理功能了 , 有了这个功能, 试错的时间成本将大大下降 . 而这个功能我觉得主要得感谢 <a href="http://coolshell.cn/articles/17061.html" target="_blank" rel="external">AuFS</a> 这个文件系统, 使得实现了镜像的增量变化<br><a id="more"></a></p>
<p>应用:</p>
<p>由于敏捷性, 我们可以用来搭建开发测试环境, 至于生产环境,放第一位考虑的应该还是稳定性,不知道 docker 现在的稳定性如何. 如果稳定性也是比较 ok, 那还能用来做线上环境的变更发布. 而且弄错了还能回滚! </p>
<h4 id="u5B89_u88C5Docker_Toolbox"><a href="#u5B89_u88C5Docker_Toolbox" class="headerlink" title="安装Docker Toolbox"></a>安装Docker Toolbox</h4><p>因为 docker 进程要用到 Linux 内核的特性 , 所以不能直接在原生的 OS X 系统上运行 docker , 需要使用 docker-machine 来创建一个 vm (虚拟机) .</p>
<p>下载安装 <a href="https://www.docker.com/docker-toolbox" target="_blank" rel="external">Docker Toolbox</a></p>
<p>toolbox包含的组件:</p>
<ul>
<li>Docker Client</li>
<li>Docker Machine</li>
<li>Docker Compose</li>
<li>Docker Kitematic</li>
<li>VirtualBox</li>
</ul>
<h4 id="u6982_u5FF5_u5B66_u4E60_u2B50_uFE0F"><a href="#u6982_u5FF5_u5B66_u4E60_u2B50_uFE0F" class="headerlink" title="概念学习⭐️"></a>概念学习⭐️</h4><p>入门概念</p>
<ul>
<li>镜像（Image）类比虚拟机的镜像, 可以用来创建容器, <em>只读</em>属性</li>
<li>容器（Container) 类比虚拟机</li>
<li>仓库（Repository) 存放镜像</li>
</ul>
<p>高级概念</p>
<ul>
<li>Linux Namespace</li>
<li>Linux CGroup</li>
<li>AuFS</li>
<li>DeviceMapper</li>
</ul>
<h4 id="Docker__u7684Hello_World"><a href="#Docker__u7684Hello_World" class="headerlink" title="Docker 的Hello World"></a>Docker 的Hello World</h4><p>安装过程中, 会让你选择启动方式, 我选择了iTerm, 选择好之后, 会在 iTerm 新开一个终端, 自动创建一个名为default的 vm, 你会在终端看到这样的输出:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">bash <span class="comment">--login '/Applications/Docker/Docker Quickstart Terminal.app/Contents/Resources/Scripts/start.sh'</span></span><br><span class="line">Creating Machine default...</span><br><span class="line">Running pre-<span class="operator"><span class="keyword">create</span> checks...</span><br><span class="line">Creating machine...</span><br><span class="line">(<span class="keyword">default</span>) Copying /<span class="keyword">Users</span>/cristaly7/.docker/machine/<span class="keyword">cache</span>/boot2docker.iso <span class="keyword">to</span> /<span class="keyword">Users</span>/cristaly7/.docker/machine/machines/<span class="keyword">default</span>/boot2docker.iso...</span><br><span class="line">(<span class="keyword">default</span>) Creating VirtualBox VM...</span><br><span class="line">(<span class="keyword">default</span>) Creating SSH <span class="keyword">key</span>...</span><br><span class="line"></span><br><span class="line">(<span class="keyword">default</span>) <span class="keyword">Starting</span> VM...</span><br><span class="line">Waiting <span class="keyword">for</span> machine <span class="keyword">to</span> be running, this may take a few minutes...</span><br><span class="line">Machine <span class="keyword">is</span> running, waiting <span class="keyword">for</span> SSH <span class="keyword">to</span> be available...</span><br><span class="line">Detecting operating <span class="keyword">system</span> <span class="keyword">of</span> created <span class="keyword">instance</span>...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning <span class="keyword">with</span> boot2docker...</span><br><span class="line">Copying certs <span class="keyword">to</span> the <span class="keyword">local</span> machine <span class="keyword">directory</span>...</span><br><span class="line">Copying certs <span class="keyword">to</span> the remote machine...</span><br><span class="line">Setting Docker configuration <span class="keyword">on</span> the remote daemon...</span><br><span class="line">Checking <span class="keyword">connection</span> <span class="keyword">to</span> Docker...</span><br><span class="line">Docker <span class="keyword">is</span> up <span class="keyword">and</span> running!</span><br><span class="line"><span class="keyword">To</span> see how <span class="keyword">to</span> <span class="keyword">connect</span> Docker <span class="keyword">to</span> this machine, run: /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/docker-machine env <span class="keyword">default</span></span><br><span class="line">Setting environment <span class="keyword">variables</span> <span class="keyword">for</span> machine <span class="keyword">default</span>...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        ##         .</span><br><span class="line">                  ## ## ##        ==</span><br><span class="line">               ## ## ## ## ##    ===</span><br><span class="line">           /<span class="string">"""""""""""""""""\___/ ===</span><br><span class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</span><br><span class="line">           \______ o           __/</span><br><span class="line">             \    \         __/</span><br><span class="line">              \____\_______/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker is configured to use the default machine with IP 192.168.99.100</span><br><span class="line">For help getting started, check out the docs at https://docs.docker.com</span></span></span><br></pre></td></tr></table></figure>
<p> vm 创建完成后, 试试在终端输入:</p>
<p><code>docker run hello-world</code></p>
<p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p>
<ul>
<li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li>
<li>利用镜像创建并启动一个容器</li>
<li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li>
<li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li>
<li>从地址池配置一个 ip 地址给容器</li>
<li>执行用户指定的应用程序</li>
<li>执行完毕后容器被终止</li>
</ul>
<p>上面创建的vm 配置文件目录位置: <code>~/.docker/machine/machines/default</code></p>
<h4 id="u5229_u7528docker-machine__u624B_u52A8_u521B_u5EFA_vm"><a href="#u5229_u7528docker-machine__u624B_u52A8_u521B_u5EFA_vm" class="headerlink" title="利用docker-machine 手动创建 vm"></a>利用docker-machine 手动创建 vm</h4><p>上面的是安装完软件后自动创建的 vm, 如果要自己手动创建 vm , 可以用 <strong>docker-machine</strong> 这个命令</p>
<p>1 创建 vm</p>
<p><code>docker-machine create --driver virtualbox [vmname]</code></p>
<p>2 查看 vm</p>
<p><code>docker-machine ls</code>    </p>
<p>3 获取 vm 环境变量</p>
<p><code>docker-machine env default</code></p>
<p>4 把 shell 连接到 vm</p>
<p><code>$ eval &quot;$(docker-machine env [vmname])&quot;</code></p>
<p>把<em>eval $(docker-machine env default)</em>这句加到 ~/.bashrc 文件里, 每次启动新的shell 都自动加载</p>
<p>5 测试 vm</p>
<p><code>docker run hello-world</code></p>
<p>6 如果不想要了, 可以这样删除 vm</p>
<p><code>docker-machine rm [vmname]</code></p>
<h4 id="Access_container_ports"><a href="#Access_container_ports" class="headerlink" title="Access container ports"></a>Access container ports</h4><p>创建好了 vm, 就可以玩 <strong>docker</strong> 的容器了</p>
<p>1 运行一个 nginx 的容器</p>
<p><code>docker run -d -P --name web nginx</code></p>
<p>docker run 启动容器, 运行, 退出<br>-d 使得docker run 之后容器能够继续运行<br>-P 把容器开放的端口映射到 vm 的随机端口</p>
<p>2 显示正在运行的容器</p>
<p><code>docker ps</code></p>
<p>3 查看容器开放的端口</p>
<p><code>docker port web</code></p>
<p>可能输出是</p>
<pre><code>443/tcp -&gt; 0.0.0.0:32768
80/tcp -&gt; 0.0.0.0:32769
</code></pre><p>这时候如果你在浏览器中输入 0.0.0.0:32768 , 是访问不到东西的, 为什么呢? 因为这里的0.0.0.0 针对 vm 的, 而要查看 vm 的 ip, 要用下面的命令</p>
<p><code>docker-machine ip [vmname]</code></p>
<p>然后访问 ip:port 就能看到nginx 首页了</p>
<p>停止并移除 nginx的容器:</p>
<p><code>$ docker stop web</code></p>
<p><code>$ docker rm web</code></p>
<h4 id="Mount_a_volume_on_the_container"><a href="#Mount_a_volume_on_the_container" class="headerlink" title="Mount a volume on the container"></a>Mount a volume on the container</h4><p>进入用户家目录</p>
<p><code>cd $HOME</code></p>
<p>新建一个目录site</p>
<p><code>mkdir site &amp;&amp; cd site</code></p>
<p>新建一个文件</p>
<p><code>echo &quot;my new site&quot; &gt; index.html</code></p>
<p>新建一个容器, 并用 site 替换 html 文件夹</p>
<p><code>docker run -d -P -v $HOME/site:/usr/share/nginx/html --name mysite nginx</code></p>
<p>获取端口, 并访问</p>
<p><code>docker port mysite</code></p>
<p>实时添加一个新文件到 $HOME/site 文件夹中</p>
<p><code>echo &quot;This is cool&quot; &gt; cool.html</code></p>
<p>然后访问 ip:port/cool.html </p>
<h4 id="u5347_u7EA7_Toolbox"><a href="#u5347_u7EA7_Toolbox" class="headerlink" title="升级 Toolbox"></a>升级 Toolbox</h4><p>下载最新版本的 installer 并安装</p>
<h4 id="u5378_u8F7D_Toolbox"><a href="#u5378_u8F7D_Toolbox" class="headerlink" title="卸载 Toolbox"></a>卸载 Toolbox</h4><p>To uninstall, do the following:</p>
<p>1 List your machines.</p>
<p><code>$ docker-machine ls</code></p>
<p>2 Remove each machine.</p>
<p><code>$ docker-machine rm dev</code><br>Successfully removed dev<br>Removing a machine deletes its VM from VirtualBox and from the ~/.docker/machine/machines directory.</p>
<p>3 Remove the Docker Quickstart Terminal and Kitematic from your “Applications” folder.</p>
<p>4 Remove the docker, docker-compose, and docker-machine commands from the /usr/local/bin folder.</p>
<p>$ rm /usr/local/bin/docker</p>
<p>5 Delete the ~/.docker folder from your system.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/dockerdocker-engine.png" alt="docker-engine"></p>
<h4 id="Docker__u662F_u4EC0_u4E48_2C__u53EF_u4EE5_u5E94_u7528_u5728_u4EC0_u4E48_u5730_u65B9"><a href="#Docker__u662F_u4EC0_u4E48_2C__u53EF_u4EE5_u5E94_u7528_u5728_u4EC0_u4E48_u5730_u65B9" class="headerlink" title="Docker 是什么, 可以应用在什么地方"></a>Docker 是什么, 可以应用在什么地方</h4><p>超轻量级的虚拟化技术</p>
<p>特点是:<em>敏捷</em></p>
<p>为什么说特点是敏捷, 启动快, 占用资源少是一方面. 但是最令人喜欢的应该是它类似 Git 那样的的版本管理功能了 , 有了这个功能, 试错的时间成本将大大下降 . 而这个功能我觉得主要得感谢 <a href="http://coolshell.cn/articles/17061.html">AuFS</a> 这个文件系统, 使得实现了镜像的增量变化<br>]]>
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="os x" scheme="http://yoursite.com/tags/os-x/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<<七年就是一辈子>>读书笔记]]></title>
    <link href="http://yoursite.com/2016/01/05/%E4%B8%83%E5%B9%B4%E5%B0%B1%E6%98%AF%E4%B8%80%E8%BE%88%E5%AD%90-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/01/05/七年就是一辈子-读书笔记/</id>
    <published>2016-01-05T14:43:26.000Z</published>
    <updated>2016-02-08T03:22:26.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u6DF1_u5165_u5B9E_u8DF5_u6700_u91CD_u8981_u7684_u6982_u5FF5"><a href="#u6DF1_u5165_u5B9E_u8DF5_u6700_u91CD_u8981_u7684_u6982_u5FF5" class="headerlink" title="深入实践最重要的概念"></a>深入实践最重要的概念</h4><p>任何一个概念，都需要认真琢磨:</p>
<ul>
<li>它的内涵、外延；</li>
<li>它是什么，它不是什么；</li>
<li>它与类似概念的相似、不同之处；</li>
<li>它在被应用之时需要注意的地方及其常见误区<a id="more"></a>
</li>
</ul>
<p><strong>学习方法论之一</strong></p>
<p>必须多问问自己 <em>这个领域里最重要的概念是什么?</em> 先找出点</p>
<p>找到最重要的<em>概念</em>之后，就要想尽一切办法为这个<em>概念</em>搭建足够系统的<em>方法论</em>。由点带线</p>
<p>学习这个领域最重要的概念是<em>自学</em></p>
<p>自学中最厉害的方法论是: <strong>践行那个概念</strong></p>
<p>如何才能践行这个重要的概念，和它所带来的结论，以及相关的方法论呢？</p>
<p>再进一步，其实总共可以问两个问题：</p>
<ul>
<li>什么是最重要的概念（以及相关的方法论）？</li>
<li>这个概念（以及相关的方法论）还可以用到什么地方？</li>
</ul>
<p>聪明的朴素定义: <em>聪明就是用来筛选、吸收、理解、应用、反思正确的知识的本领。</em></p>
<h4 id="u53CD_u5411_u5851_u9020"><a href="#u53CD_u5411_u5851_u9020" class="headerlink" title="反向塑造"></a>反向塑造</h4><p>警惕!</p>
<blockquote>
<p>远离___的人</p>
<p>远离___的环境</p>
</blockquote>
<h4 id="u7C7B_u6BD4_u5F71_u54CD_u601D_u7EF4"><a href="#u7C7B_u6BD4_u5F71_u54CD_u601D_u7EF4" class="headerlink" title="类比影响思维"></a>类比影响思维</h4><p>成功与突破更像是破冰而不是登山</p>
<p>类比影响思维, 思维影响行动, 不要小看语言的力量</p>
<h4 id="u5982_u4F55_u771F_u6B63_u6D88_u5316_u4E00_u672C_u4E66"><a href="#u5982_u4F55_u771F_u6B63_u6D88_u5316_u4E00_u672C_u4E66" class="headerlink" title="如何真正消化一本书"></a><a href="http://chuansong.me/n/2162747" target="_blank" rel="external">如何真正消化一本书</a></h4><p>书籍分类:</p>
<ul>
<li>虚构类（Fiction）</li>
<li>非虚构类（Non-Fiction）</li>
</ul>
<p><strong>阅读，是为了理解，而理解这事儿，慢，即是快；快，便是无。</strong></p>
<ul>
<li>完整性阅读</li>
<li>检索式阅读</li>
</ul>
<p><strong>完整性阅读，是没办法有功利性的，因为其实完全没办法知道所读、所学的东西究竟什么时候才能真正发挥它的核能量。</strong></p>
<p>检索式阅读本身就是功利性的</p>
<p><strong>信息这东西，必须系统才有价值。</strong>碎片化的信息也许有用，但就算完全忽略，也不至于致命。舍了就舍了，没啥。这种勇气其实不少人都有，巴菲特就是其中之一。害怕错过什么，是一种情绪，来自于空虚的情绪：因为什么都没有，所以就渴望有一点什么，所以就特别害怕错过任何机会。</p>
<p><strong>拿来一本书，就好像要打一场仗，打仗之前最好先考察一下地形吧？</strong></p>
<p><strong>在读的过程中，不断整理这些概念与方法论之间的关系，其实是“消化”的必要过程。</strong></p>
<p><strong>在阅读的过程中，要不断向后总结，向前预期 —— 这是最基本的理解技巧。</strong></p>
<p><em>一定要用起来。</em></p>
<p>暂时用不起来怎么办？教！我总是重复这句话：<strong>教是最好的学习方法。</strong></p>
<p>分享，不仅需要能力支撑，也是培养能力的最重要手段。知识分享，没有成本，只有收益 —— 双方都有的收益。</p>
<p><strong>这个概念、这个方法论、这个道理、这个知识，还可以用在什么地方？</strong></p>
<p>与喜欢学习的人泡在一起</p>
<h4 id="u6700_u53EF_u6015_u7684_u662F_u4EC0_u4E48"><a href="#u6700_u53EF_u6015_u7684_u662F_u4EC0_u4E48" class="headerlink" title="最可怕的是什么"></a>最可怕的是什么</h4><p>据说，对每个人来说都一样的 —— 最可怕的事情都一样，只有一件：</p>
<blockquote>
<p>这世界跟我没有任何联系。</p>
</blockquote>
<p>所以,<strong>对身边的人好一些，某种意义上是为自己负责。</strong></p>
<p>所以说，朋友不一定要多，但一定要有，从某个罕见的角度望过去，<em>朋友是用来保命的</em>。</p>
<p>为什么年轻的时候更容易产生自杀冲动？解释也应该非常简单，就是因为年轻，所以尚处在弱小的阶段，能力不强，积累不够，被关注的可能性也小，又恰恰因此格外无谓地渴求被关注…… 一切的关系（友情、亲情）实际上都是靠积累的，但仅因为年轻，那些关系积累不够，尚需证明。于是一旦挫折出现的时候，大脑一充血，就可能得到极端偏颇的结论。</p>
<p>又，年轻时的绝望常常是一时的困境，甚至只不过是一时的感觉。岁数一大把了，突然感觉绝望，那才可怕 —— 那不再是一时冲动了，而是无可奈何真的绝望。<strong>要是年轻时想明白了这个道理，就不大可能虚度光阴了 —— 因为恐惧从来都是最有效的动力，对全人类都有效（其实对所有动物都有效）。</strong></p>
<h4 id="u4E3A_u4EC0_u4E48_u4F60_u6700_u7EC8_u7ADF_u7136_u65E0_u6CD5_u6539_u53D8_u81EA_u5DF1_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u4F60_u6700_u7EC8_u7ADF_u7136_u65E0_u6CD5_u6539_u53D8_u81EA_u5DF1_uFF1F" class="headerlink" title="为什么你最终竟然无法改变自己？"></a>为什么你最终竟然无法改变自己？</h4><p><strong>不能改变的最根本原因在于不愿意改变。</strong></p>
<p>想知道自己内心最深处的取向，有个特别好玩的方法。拿出纸笔，罗列出如若真的改变之后可能带来的坏处 —— 注意，不是好处，而是坏处。罗列得越多越好，甚至可以花很长一段时间陆续罗列，直到实在再也想不出来其它的坏处为止…… 这其实是为了让自己更了解自己。</p>
<p>早睡的坏处:</p>
<ul>
<li>太早睡睡不着,睡着了也可能半夜12点, 2,3点醒来, 然后睡不着, 到白天又会困</li>
<li>早睡也不一定能早起, 不早起就浪费很多时间在睡觉上了</li>
<li>有种”啥都没干, 一天就过去了”的感觉</li>
</ul>
<p>早起的坏处:</p>
<ul>
<li>起太早,中午容易困, 可能上午10点多的时候就开始困了</li>
<li>起太早,又没吃的,会很悲催</li>
</ul>
<p>跑步的坏处:</p>
<ul>
<li>天气冷,跑步容易感冒</li>
<li>容易伤膝盖</li>
<li>会出汗</li>
<li>花费时间</li>
</ul>
<p>好像以上的坏处都是可以接受的 -0-</p>
<p>知道自己的缺点，也知道自己改不掉，其实并不是最坏的情况，最坏的情况是，自己确实有缺点，自己却完全不知道，甚至以为自己其实是完美的 —— 这才是真正不可容忍的缺陷。</p>
<p><strong>想改，却最终失败，大抵上都是“误以为改变是瞬间的事情”造成的。</strong></p>
<p><em>下个决心，是瞬间的事情，瞬间的决定，行动才是填补后面非瞬间的整个过程的实际内容。若是真想明白了这个道理，就可以直接把 “下决心的这个瞬间决定” 直接跳过 —— 它没必要存在；直接开始行动就好，这才是关键。</em></p>
<p>解锁这个关键之后，一切都显得明显了：</p>
<ul>
<li>改变是个过程。</li>
<li>改变最初的时候很难显现。</li>
<li>改变需要足够的时间，所以也需要足够的耐心。</li>
<li>改变结果出现的时候，已经耗费了很长时间、很多精力、很多耐心。</li>
<li>看到自己的改变，会给自己更多的自信；改变是过程，获得、积累自信也是过程。</li>
<li>看到别人已经改变的时候，不会盲目地羡慕，因为真正改变过自己的你，知道那意味着什么……</li>
</ul>
<p>最为关键的是，因为自己清楚变化是个过程，知道这个过程在最初的时候不明显，甚至完全看不到，<em>所以，你就不会误以为身边的人都没什么变化…… 也不会因为（许多年后）突然有一天看到朋友的明显变化而感到惊诧甚至懊恼……</em></p>
<p><strong>刚开始用力过猛，就基本上注定会失败。</strong></p>
<p>想想<strong>人际交往中的期望值管理能力</strong> , 是相通的 <code>Happiness = Reality - Expectations</code></p>
<p>千万别用力过猛。避免这个误区的核心在于，心平气和地接受自己最初的弱小。既然改变是个过程，那么就可以把“改变”理解成一股势力，最初相当弱小的势力，它需要时间，需要投入，需要持续投入才能逐步壮大起来。它就跟花儿一样，上来就浇了太多的水，会被涝死的！</p>
<p>对大多数人来说，很多“根深蒂固”的观念其实只不过是变化失败之后的“合理化解释”而已……</p>
<h4 id="u5982_u4F55_u628A_u574F_u8FD0_u6C14_u53D8_u6210_u597D_u8FD0_u6C14"><a href="#u5982_u4F55_u628A_u574F_u8FD0_u6C14_u53D8_u6210_u597D_u8FD0_u6C14" class="headerlink" title="如何把坏运气变成好运气"></a>如何把坏运气变成好运气</h4><ol>
<li>磨练技能，是抵消、抵御坏运气的一个手段 —— 既然运气不可控。</li>
<li>长期战斗，是抵消、抵御坏运气的另外一个手段 —— 不管运气是否可控。</li>
</ol>
<p>什么是坏事儿？抵御不了、承受不起的遭遇才算是坏事 —— 不仅仅是因为有损失，更是因为因此一下子没能力继续战斗了。</p>
<p>什么是好事儿，好事儿不一定非要获益了才叫好事儿，遇到麻烦了、遇到挫折了，但抵御得了、承受得起，解决了麻烦、克服了挫折，所以可以继续战斗，这分明也是好事么！</p>
<p><strong>很多的时候，直觉就是完全不靠谱的 —— 能力越差的人，直觉越不靠谱</strong>。专家的直觉才有价值，即便如此，也正因为是专家，才有可能一不小心就掉进“更高级的”陷阱。</p>
<h4 id="u5176_u5B9E_uFF0C_u6709_u4E00_u628A_u89E3_u51B3_u6240_u6709_u9EBB_u70E6_u7684_u4E07_u80FD_u94A5_u5319_u2026_u2026"><a href="#u5176_u5B9E_uFF0C_u6709_u4E00_u628A_u89E3_u51B3_u6240_u6709_u9EBB_u70E6_u7684_u4E07_u80FD_u94A5_u5319_u2026_u2026" class="headerlink" title="其实，有一把解决所有麻烦的万能钥匙……"></a>其实，有一把解决所有麻烦的万能钥匙……</h4><p>“如何解决麻烦”，通常是个伪问题. 真正的好问题其实是：</p>
<p><strong>如何才能避免制造麻烦？</strong></p>
<p>认清什么会造成麻烦</p>
<p><strong>多观察、多研究、多思考别人的失败与麻烦。</strong>研究他人的失败，比研究他人的成功更有指导意义。</p>
<h4 id="u666E_u904D_u6765_u770B_uFF0C_u4EBA_u4EEC_u6700_u5BB9_u6613_u88AB_u4EC0_u4E48_u6837_u7684_u4EBA_u5438_u5F15_uFF1F"><a href="#u666E_u904D_u6765_u770B_uFF0C_u4EBA_u4EEC_u6700_u5BB9_u6613_u88AB_u4EC0_u4E48_u6837_u7684_u4EBA_u5438_u5F15_uFF1F" class="headerlink" title="普遍来看，人们最容易被什么样的人吸引？"></a>普遍来看，人们最容易被什么样的人吸引？</h4><p>魅力其实是每个人都可以习得、培养、发展的，因为魅力这东西来自于一个人的观念模式（Mindset）以及很多与之相关的非语言行为模式。</p>
<ul>
<li>Presence（注意力高度集中，全神贯注地参与）</li>
<li>Power（给力）</li>
<li>Warmth（温暖)</li>
</ul>
<p><strong>反应快的人有更大的魅力。</strong></p>
<p>与大多数人想象的不一样的地方是，几乎所有的“反应快”，无论是身体上的还是思想上的，其实都是“<strong>练出来的</strong>”。</p>
<p>这世界永远处于动态，但我们在思考的时候，却常常以对待静态的方式去处理 —— 这是个很大的陷阱。</p>
<p>所谓的“天赋”其实是习得的，且是通过重复的练习逐步加强的。</p>
<p>发展潜力最大的维度对任何人来说永远都是一样的：思考。</p>
<h4 id="u6BD4_u538B_u529B_u5C71_u5927_u66F4_u53EF_u6015_u7684_u662F_u4EC0_u4E48_uFF1F"><a href="#u6BD4_u538B_u529B_u5C71_u5927_u66F4_u53EF_u6015_u7684_u662F_u4EC0_u4E48_uFF1F" class="headerlink" title="比压力山大更可怕的是什么？"></a>比压力山大更可怕的是什么？</h4><p>人就是这样一种动物：</p>
<blockquote>
<p>心理与生理相互影响。</p>
</blockquote>
<h4 id="To_be_continue__u2026"><a href="#To_be_continue__u2026" class="headerlink" title="To be continue …"></a>To be continue …</h4>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u6DF1_u5165_u5B9E_u8DF5_u6700_u91CD_u8981_u7684_u6982_u5FF5"><a href="#u6DF1_u5165_u5B9E_u8DF5_u6700_u91CD_u8981_u7684_u6982_u5FF5" class="headerlink" title="深入实践最重要的概念"></a>深入实践最重要的概念</h4><p>任何一个概念，都需要认真琢磨:</p>
<ul>
<li>它的内涵、外延；</li>
<li>它是什么，它不是什么；</li>
<li>它与类似概念的相似、不同之处；</li>
<li>它在被应用之时需要注意的地方及其常见误区]]>
    
    </summary>
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
      <category term="learn" scheme="http://yoursite.com/categories/learn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[<<把时间当做朋友>>读书笔记]]></title>
    <link href="http://yoursite.com/2016/01/05/%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/01/05/把时间当做朋友-读书笔记/</id>
    <published>2016-01-05T09:03:49.000Z</published>
    <updated>2016-01-13T14:14:03.000Z</updated>
    <content type="html"><![CDATA[<p>很好的一本书, 条理清晰, 见解直击要害</p>
<p>读完这本书, 获益良多</p>
<h6 id="u7B2C_u4E00_u70B9-_u4E86_u89E3_u4E86_u5F88_u591A_u4EE5_u524D_u8111_u5B50_u91CC_u7684_u6BD2_u6982_u5FF5_u548C_u574F_u4E60_u60EF_2C__u8FD9_u4E9B_u6BD2_u6982_u5FF5_u5927_u90FD_u662F_u5229_u7528_u4E86_u4EBA_u8111_u7684_u5F31_u70B9_3A"><a href="#u7B2C_u4E00_u70B9-_u4E86_u89E3_u4E86_u5F88_u591A_u4EE5_u524D_u8111_u5B50_u91CC_u7684_u6BD2_u6982_u5FF5_u548C_u574F_u4E60_u60EF_2C__u8FD9_u4E9B_u6BD2_u6982_u5FF5_u5927_u90FD_u662F_u5229_u7528_u4E86_u4EBA_u8111_u7684_u5F31_u70B9_3A" class="headerlink" title="第一点.了解了很多以前脑子里的毒概念和坏习惯, 这些毒概念大都是利用了人脑的弱点:"></a>第一点.了解了很多以前脑子里的毒概念和坏习惯, 这些毒概念大都是利用了人脑的弱点:</h6><ul>
<li><p><em>速读, 速成</em>  <code>利用了人&quot;希望自己的欲望能快点得到满足&quot;的天性, 也在一定程度上把人给弄的很浮躁.</code></p>
</li>
<li><p><em>完美主义</em>   <code>内因:恐惧犯错, 会让你变成拖拉狂, 人人做事都是要先犯错的. 外因: 犯错被他人嘲笑的几率很高. 但是, 你要明白, 真正做成事的人, 会知道其中的艰辛, 他们才不会随便嘲弄犯错的新手, 甚至会去鼓励他们. 他们也许会批评, 但也是建设性的, 不是为了秀优越的. 这可以做反向筛选, 随便嘲弄别人的, 说明他自己不怎么样. 何必在意这些人的看法呢? 他们的心智成长都是固定模式的了.</code></p>
<a id="more"></a></li>
<li><p><em>细节决定成败</em>    <code>没把整体弄通就去折腾细节, 简直是管中窥豹</code></p>
</li>
<li><p><em>内因才是最主要的, 环境不重要</em>    <code>bullshit!  环境与人是相互作用, 互为因果的</code></p>
</li>
<li><p><em>梦想”毁”人</em>   <code>当你带着心中 yy 的梦想去做另一件事, 你觉得你能100%投入当下这事吗?  而且为了所谓的梦想换工作, 就是重新下赌注了, 必定会被时间&quot;抽水&quot;.</code></p>
</li>
<li><p><em>逆境造就成功, 困难使人成熟</em>    <code>bullshit!  亲测无效! 好多苦吃了根本对成长毫无帮助, 甚至抑制你的成长</code></p>
</li>
<li><p><em>逃避倾向, 回避困难</em>    <code>花费很多时间去做非常容易做的事情, 麻痹自己, 殊不知却导致效率低下.(想想学习时候的偏科) 正确的做法应该是: 简单的要迅速做完, 把节约的时间投放在后面困难的部分上.</code></p>
</li>
<li><p><em>目标定的太高, 计划做的太长远</em></p>
</li>
<li><p><em>计划并不等于目标</em></p>
</li>
<li><p><em>语文和文学过分紧密联系了</em></p>
</li>
</ul>
<hr>
<h6 id="u7B2C_u4E8C_u70B9-_u660E_u767D_u4E86_u4E4B_u524D_u81EA_u5DF1_u9047_u5230_u7684_u56F0_u5883_2C__u5E76_u4E14_u77E5_u9053_u4E86_u90A3_u662F_u8FDB_u6B65_u8FC7_u7A0B_u4E2D_u7684_u5FC5_u7136_u73B0_u8C61-__u6BD4_u5982_u5B66_u4E60_u8FDB_u6B65_u56FE_u5F62_2C__u4E0D_u662F_u4E00_u6761_u8FDE_u7EED_u7684_u659C_u7EBF_2C__u800C_u662F_u7C7B_u4F3C_u9636_u68AF_u72B6_u7684"><a href="#u7B2C_u4E8C_u70B9-_u660E_u767D_u4E86_u4E4B_u524D_u81EA_u5DF1_u9047_u5230_u7684_u56F0_u5883_2C__u5E76_u4E14_u77E5_u9053_u4E86_u90A3_u662F_u8FDB_u6B65_u8FC7_u7A0B_u4E2D_u7684_u5FC5_u7136_u73B0_u8C61-__u6BD4_u5982_u5B66_u4E60_u8FDB_u6B65_u56FE_u5F62_2C__u4E0D_u662F_u4E00_u6761_u8FDE_u7EED_u7684_u659C_u7EBF_2C__u800C_u662F_u7C7B_u4F3C_u9636_u68AF_u72B6_u7684" class="headerlink" title="第二点.明白了之前自己遇到的困境, 并且知道了那是进步过程中的必然现象. 比如学习进步图形, 不是一条连续的斜线, 而是类似阶梯状的."></a>第二点.明白了之前自己遇到的困境, 并且知道了那是进步过程中的必然现象. 比如学习进步图形, 不是一条连续的斜线, 而是类似阶梯状的.</h6><p>困境如下:</p>
<ul>
<li><p><em>学习中的未知 , 我们要学会忍受, 接受不确定性</em></p>
</li>
<li><p><em>现状是无法立马摆脱的</em></p>
</li>
<li><p><em>错误估算任务时间</em>  <code>工作中经常遇到, 上司派你一个新任务, 还要你估算时间, 你估算不出来, 然而这并不是你的错, 因为这是新任务, 你对任务的过程没经历过, 是无法准确估算出来的, 其中有多少坑, 每个坑要花多少时间填, 根本没办法知道. 但是反过来, 你每完成一次任务, 就得总结一下它, 方便日后估算任务时间, 老任务时间再估算不出来, 就是你的错了.</code></p>
</li>
<li><p><em>学习进程曲线</em></p>
</li>
</ul>
<hr>
<h6 id="u7B2C_u4E09_u70B9-__u77E5_u9053_u4EC0_u4E48_u77E5_u8BC6_u662F_u91CD_u8981_u7684_2C_u600E_u6837_u7684_u505A_u4E8B_u65B9_u6CD5_u662F_u6B63_u786E_u7684_2C_u6709_u6548_u7684_2C__u4EC0_u4E48_u6837_u7684_u4EBA_u662F_u503C_u5F97_u4EA4_u5F80_u7684"><a href="#u7B2C_u4E09_u70B9-__u77E5_u9053_u4EC0_u4E48_u77E5_u8BC6_u662F_u91CD_u8981_u7684_2C_u600E_u6837_u7684_u505A_u4E8B_u65B9_u6CD5_u662F_u6B63_u786E_u7684_2C_u6709_u6548_u7684_2C__u4EC0_u4E48_u6837_u7684_u4EBA_u662F_u503C_u5F97_u4EA4_u5F80_u7684" class="headerlink" title="第三点. 知道什么知识是重要的,怎样的做事方法是正确的,有效的, 什么样的人是值得交往的"></a>第三点. 知道什么知识是重要的,怎样的做事方法是正确的,有效的, 什么样的人是值得交往的</h6><ul>
<li><p><em>关注HOW</em>    学会任务拆分</p>
</li>
<li><p><em>预演</em></p>
</li>
<li><p><em>死要面子活受罪的人不值得交往</em></p>
</li>
</ul>
<hr>
<h6 id="u7B2C_u56DB_u70B9-__u5B66_u4F1A_u601D_u8003_2C__u878D_u4F1A_u8D2F_u901A_2C__u5F62_u6210_u81EA_u5DF1_u7684_u77E5_u8BC6_u6EE4_u7F51_2C__u8FC7_u6EE4_u6BD2_u6982_u5FF5_2C_u6BD2_u77E5_u8BC6"><a href="#u7B2C_u56DB_u70B9-__u5B66_u4F1A_u601D_u8003_2C__u878D_u4F1A_u8D2F_u901A_2C__u5F62_u6210_u81EA_u5DF1_u7684_u77E5_u8BC6_u6EE4_u7F51_2C__u8FC7_u6EE4_u6BD2_u6982_u5FF5_2C_u6BD2_u77E5_u8BC6" class="headerlink" title="第四点. 学会思考, 融会贯通, 形成自己的知识滤网, 过滤毒概念,毒知识"></a>第四点. 学会思考, 融会贯通, 形成自己的知识滤网, 过滤毒概念,毒知识</h6><ul>
<li>“那….这个道理还能用在什么地方?”</li>
</ul>
<h4 id="To_be_continue__u2026"><a href="#To_be_continue__u2026" class="headerlink" title="To be continue …"></a>To be continue …</h4>]]></content>
    <summary type="html">
    <![CDATA[<p>很好的一本书, 条理清晰, 见解直击要害</p>
<p>读完这本书, 获益良多</p>
<h6 id="u7B2C_u4E00_u70B9-_u4E86_u89E3_u4E86_u5F88_u591A_u4EE5_u524D_u8111_u5B50_u91CC_u7684_u6BD2_u6982_u5FF5_u548C_u574F_u4E60_u60EF_2C__u8FD9_u4E9B_u6BD2_u6982_u5FF5_u5927_u90FD_u662F_u5229_u7528_u4E86_u4EBA_u8111_u7684_u5F31_u70B9_3A"><a href="#u7B2C_u4E00_u70B9-_u4E86_u89E3_u4E86_u5F88_u591A_u4EE5_u524D_u8111_u5B50_u91CC_u7684_u6BD2_u6982_u5FF5_u548C_u574F_u4E60_u60EF_2C__u8FD9_u4E9B_u6BD2_u6982_u5FF5_u5927_u90FD_u662F_u5229_u7528_u4E86_u4EBA_u8111_u7684_u5F31_u70B9_3A" class="headerlink" title="第一点.了解了很多以前脑子里的毒概念和坏习惯, 这些毒概念大都是利用了人脑的弱点:"></a>第一点.了解了很多以前脑子里的毒概念和坏习惯, 这些毒概念大都是利用了人脑的弱点:</h6><ul>
<li><p><em>速读, 速成</em>  <code>利用了人&quot;希望自己的欲望能快点得到满足&quot;的天性, 也在一定程度上把人给弄的很浮躁.</code></p>
</li>
<li><p><em>完美主义</em>   <code>内因:恐惧犯错, 会让你变成拖拉狂, 人人做事都是要先犯错的. 外因: 犯错被他人嘲笑的几率很高. 但是, 你要明白, 真正做成事的人, 会知道其中的艰辛, 他们才不会随便嘲弄犯错的新手, 甚至会去鼓励他们. 他们也许会批评, 但也是建设性的, 不是为了秀优越的. 这可以做反向筛选, 随便嘲弄别人的, 说明他自己不怎么样. 何必在意这些人的看法呢? 他们的心智成长都是固定模式的了.</code></p>]]>
    
    </summary>
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
      <category term="learn" scheme="http://yoursite.com/categories/learn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的书单]]></title>
    <link href="http://yoursite.com/2016/01/05/%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>http://yoursite.com/2016/01/05/我的书单/</id>
    <published>2016-01-05T08:53:00.000Z</published>
    <updated>2016-01-13T14:13:22.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5DF2_u8BFB"><a href="#u5DF2_u8BFB" class="headerlink" title="已读"></a>已读</h3><ul>
<li>&lt;&lt;把时间当做朋友&gt;&gt; <a href="http://xeroth.github.io/2016/01/05/%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">读书笔记</a> ⭐️⭐️⭐️⭐️⭐️ 看得爽,能治郁闷</li>
<li><a href="http://xiaolai.github.io/alpha/on-learning/" target="_blank" rel="external"> &lt;&lt; 学习学习再学习 &gt;&gt; </a> ⭐️⭐️⭐️⭐️ 学习的方法论</li>
<li>&lt;&lt; 动物庄园 &gt;&gt; ⭐️⭐️ 没太大惊喜</li>
<li>&lt;&lt; 十年一梦 &gt;&gt; ⭐️⭐️ 当故事来看</li>
<li>&lt;&lt; 我只是敢和别人不一样 &gt;&gt; ⭐️⭐️⭐️ 让你更特立独行的鸡汤</li>
<li>&lt;&lt; 黑客与画家 &gt;&gt; ⭐️⭐️⭐️⭐️⭐️ 不一样的角度看问题<a id="more"></a>
</li>
</ul>
<h3 id="u5728_u8BFB"><a href="#u5728_u8BFB" class="headerlink" title="在读"></a>在读</h3><ul>
<li>&lt;&lt; the leadership pipeline &gt;&gt; 进度 序</li>
<li>&lt;&lt; 七年就是一辈子 &gt;&gt; <a href="http://xeroth.github.io/2016/01/05/%E4%B8%83%E5%B9%B4%E5%B0%B1%E6%98%AF%E4%B8%80%E8%BE%88%E5%AD%90-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">读书笔记</a> 每日连载…</li>
<li><a href="http://zhibimo.com/read/xiaolai/everyone-can-use-english/" target="_blank" rel="external">&lt;&lt; 人人都能用英语 &gt;&gt;</a> 进度20%</li>
<li>&lt;&lt; 批判性思维 &gt;&gt; 进度30%</li>
<li><a href="http://dockerpool.com/static/books/docker_practice/index.html" target="_blank" rel="external">&lt;&lt; Docker —— 从入门到实践 &gt;&gt;</a> 20%</li>
</ul>
<h3 id="u5F85_u8BFB"><a href="#u5F85_u8BFB" class="headerlink" title="待读"></a>待读</h3><ul>
<li>&lt;&lt; 少有人走的路 &gt;&gt;</li>
<li>&lt;&lt; 反脆弱 &gt;&gt;</li>
<li>&lt;&lt; Beyond Feelings &gt;&gt;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5DF2_u8BFB"><a href="#u5DF2_u8BFB" class="headerlink" title="已读"></a>已读</h3><ul>
<li>&lt;&lt;把时间当做朋友&gt;&gt; <a href="http://xeroth.github.io/2016/01/05/%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</a> ⭐️⭐️⭐️⭐️⭐️ 看得爽,能治郁闷</li>
<li><a href="http://xiaolai.github.io/alpha/on-learning/"> &lt;&lt; 学习学习再学习 &gt;&gt; </a> ⭐️⭐️⭐️⭐️ 学习的方法论</li>
<li>&lt;&lt; 动物庄园 &gt;&gt; ⭐️⭐️ 没太大惊喜</li>
<li>&lt;&lt; 十年一梦 &gt;&gt; ⭐️⭐️ 当故事来看</li>
<li>&lt;&lt; 我只是敢和别人不一样 &gt;&gt; ⭐️⭐️⭐️ 让你更特立独行的鸡汤</li>
<li>&lt;&lt; 黑客与画家 &gt;&gt; ⭐️⭐️⭐️⭐️⭐️ 不一样的角度看问题]]>
    
    </summary>
    
      <category term="book" scheme="http://yoursite.com/tags/book/"/>
    
      <category term="learn" scheme="http://yoursite.com/categories/learn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo 博客优化]]></title>
    <link href="http://yoursite.com/2016/01/05/hexo-%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/01/05/hexo-博客优化/</id>
    <published>2016-01-05T04:34:44.000Z</published>
    <updated>2016-01-30T09:27:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u66F4_u6362_u4E3B_u9898"><a href="#u66F4_u6362_u4E3B_u9898" class="headerlink" title="更换主题"></a>更换主题</h3><p>我选择更换的主题是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a></p>
<p>进入 hexo 主目录:</p>
<pre><code>cd [folder]
</code></pre><p>安装:</p>
<pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia
</code></pre><a id="more"></a>
<p>配置:</p>
<p>修改hexo根目录下的 </p>
<p><code>_config.yml ： theme: yilia</code></p>
<p>更新:</p>
<pre><code>cd themes/yilia
git pull
</code></pre><h3 id="u914D_u7F6E_u5934_u50CF"><a href="#u914D_u7F6E_u5934_u50CF" class="headerlink" title="配置头像"></a>配置头像</h3><p>首先你得把头像图片上传到网上, 我是上传到了七牛</p>
<p>然后配置文件 <code>themes/yilia/\_config.yml</code> : </p>
<pre><code>favicon: &quot;http://7xpsj5.com1.z0.glb.clouddn.com/%E5%B0%8F%E9%BB%84.jpg&quot;  # 网页 ico

avatar: &quot;http://7xpsj5.com1.z0.glb.clouddn.com/%E7%9A%AE%E5%8D%A1%E4%B8%98%E5%B1%81%E5%B1%81.jpg&quot;  #你的头像url
</code></pre><h3 id="u914D_u7F6E_u591A_u8BF4_u8BC4_u8BBA"><a href="#u914D_u7F6E_u591A_u8BF4_u8BC4_u8BBA" class="headerlink" title="配置多说评论"></a>配置多说评论</h3><p>首先打开<a href="http://duoshuo.com" target="_blank" rel="external">多说</a>网站</p>
<p>点击<strong>我要安装</strong>, 进行注册, 还有多说域名的配置, 配置里有一项是多说域名, 假设配置的是 <em>xxx.duoshuo.com</em> , 那么duoshuo的short_name就是xxx</p>
<p>然后打开文件<em>themes/yilia/layout/_partial/post/duoshuo.ejs</em></p>
<p>将<em>将var duoshuoQuery = {short_name:”&lt;%=theme.duoshuo%&gt;”};</em>修改为</p>
<p><em>var duoshuoQuery = {short_name:”xxx”};</em></p>
<p>保存推出, 部署测试一下, 一般右下角显示成你多说站点的名称正在使用多说就是ok的, 如果显示”True’s Me”正在使用多说, 那就不成功 </p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/duoshuo_test.png" alt="duoshuo_test"></p>
<h3 id="u914D_u7F6E_u4EE3_u7801_u9AD8_u4EAE"><a href="#u914D_u7F6E_u4EE3_u7801_u9AD8_u4EAE" class="headerlink" title="配置代码高亮"></a>配置代码高亮</h3><p>修改hexo配置文件: <code>_config.yml</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">highlight</span>:</span><br><span class="line">    <span class="attribute">enable</span>: true</span><br><span class="line">    <span class="attribute">line_number</span>: false</span><br><span class="line">    <span class="attribute">auto_detect</span>: true</span><br><span class="line">    <span class="attribute">tab_replace</span>:</span><br><span class="line">    <span class="attribute">style</span>: <span class="string">'github'</span></span><br></pre></td></tr></table></figure>
<h3 id="u8BBE_u7F6E_google_analytics"><a href="#u8BBE_u7F6E_google_analytics" class="headerlink" title="设置 google analytics"></a>设置 google analytics</h3><p>注册 <strong>google analytics</strong></p>
<p>修改文件: <code>themes/yilia/_config.yml</code></p>
<p><em>google_analytics: ‘Tracking-ID’</em></p>
<h3 id="u6DFB_u52A0RSS"><a href="#u6DFB_u52A0RSS" class="headerlink" title="添加RSS"></a>添加<a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" target="_blank" rel="external">RSS</a></h3><pre><code>npm install hexo-generator-feed --save
</code></pre><p>安装完后, 在hexo 配置文件_config.yml 中加入:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#RSS订阅</span><br><span class="line">plugin:</span><br><span class="line">    - hexo-generator-feed</span><br><span class="line"><span class="hexcolor">#Fee</span>d Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom<span class="class">.xml</span></span><br><span class="line">limit: <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>最后，在你当前主题下的_config.yml下，添加RSS订阅链接即可，这里我用的是Yilia主题，subnav下添加rss：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"># SubNav</span></span><br><span class="line"><span class="label">subnav:</span></span><br><span class="line"><span class="label">rss:</span> <span class="string">"/atom.xml"</span></span><br></pre></td></tr></table></figure>
<p>完了之后部署更新, 点击RSS 按钮</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/hexo_rss.png" alt="hexo_rss"></p>
<p>页面跳转到 <a href="http://你的域名/atom.xml" target="_blank" rel="external">http://你的域名/atom.xml</a> 说明配置成功了</p>
<p>关于 RSS 订阅, 我用的是 Chrome 的插件 <a href="https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp" target="_blank" rel="external">RSS Feed Reader</a></p>
<p><br></p>
<h3 id="u6DFB_u52A0_u6587_u7AE0_u76EE_u5F55"><a href="#u6DFB_u52A0_u6587_u7AE0_u76EE_u5F55" class="headerlink" title="添加文章目录"></a>添加文章目录</h3><p>打开<em>themes/yilia/layout/_partial/article.ejs</em>文件，在<em>&lt;%- post.content %&gt;</em>之前插入以下代码</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span>&lt;%<span class="ruby"> <span class="keyword">if</span>(post.toc !== <span class="keyword">false</span>)&#123; </span>%&gt;<span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"toc"</span> <span class="attribute">class</span>=<span class="value">"toc-article"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">strong</span> <span class="attribute">class</span>=<span class="value">"toc-title"</span>&gt;</span></span>&lt;%=<span class="ruby"> _<span class="number">_</span>(<span class="string">'文章目录'</span>) </span>%&gt;<span class="xml"><span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line">	</span>&lt;%-<span class="ruby"> toc(post.content) </span>%&gt;<span class="xml"></span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span>&lt;%<span class="ruby"> &#125; </span>%&gt;<span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>为文章目录添加CSS样式</p>
<p>打开<em>themes/yilia/source/css/_partial/article.styl</em>, 在最后加入如下 CSS样式即可:</p>
<pre><code>//toc
.toc-article
  background #eee
  margin 2em 0 0 0.5em
  padding 1em
  strong
    padding 0.3em 0
#toc
  line-height 1.5em
  font-size 1em
  float right
  .toc
    padding 0
    li
      list-style-type none

  .toc-child 
    padding-left 0.7em
</code></pre><p><br></p>
<h3 id="u521B_u5EFA_u6807_u7B7E_u4E91_u9875_u9762"><a href="#u521B_u5EFA_u6807_u7B7E_u4E91_u9875_u9762" class="headerlink" title="创建标签云页面"></a>创建标签云页面</h3><p>新建一个页面，命名为 tags 。命令如下：</p>
<pre><code>hexo new page &quot;tags&quot;
</code></pre><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云</p>
<pre><code>---
title: 标签云
date: 2016-01-13
toc: false
type: &quot;tags&quot;
comments: false
---
</code></pre><p>在菜单中添加链接。编辑主题的 _config.yml ，添加 tags 到 menu 中，如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="tag">menu</span>:</span><br><span class="line">  主页: /</span><br><span class="line">  所有文章: /archives</span><br><span class="line">  标签云: /tags</span><br></pre></td></tr></table></figure>
<p>然后按照<a href="http://moxfive.xyz/2015/10/25/hexo-tag-cloud/" target="_blank" rel="external">这位大神的文章</a>进行代码修改, 利用的是<a href="https://hexo.io/zh-cn/docs/helpers.html#tagcloud" target="_blank" rel="external">hexo的辅助函数</a></p>
<p>完了效果是这样的</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/cloud_tag1.png" alt="cloud_tag1"></p>
<p>后来发现了个更酷的<a href="http://www.netcan666.com/2015/12/15/Hexo%E4%B8%AA%E6%80%A7%E5%8C%96%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/" target="_blank" rel="external">球型云标签</a></p>
<p>然而暂时搞不懂, 先这样吧</p>
<p><br></p>
<h3 id="u81EA_u5B9A_u4E49_u57DF_u540D"><a href="#u81EA_u5B9A_u4E49_u57DF_u540D" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>首先是要到域名提供商处购买域名, 常见的域名提供商有 Godaddy, Namecheap等 , 我在 Namecheap 买的.</p>
<p>然后把域名解析服务器设置为国内的 <a href="/www.dnspod.cn">DNSPOD</a></p>
<p>登陆 DNSPOD 进行设置, 如图</p>
<p><img src="http://7xpsj5.com1.z0.glb.clouddn.com/gitpage-cname.png" alt="gitpage-cname"></p>
<p>A记录是 yourusername.github.io的 ip</p>
<p>CNAME 记录 我设置的是 www 后面跟的 yourusername.github.io</p>
<p>完了之后在 hexo的主目录创建一个CNAME文件: <em>hexo/source/CNAME</em> , 文件里就一行:<br><em>www.a-ho.com</em></p>
<p>完了之后 hexo clean &amp;&amp; hexo g -d 部署上去就好了</p>
<h3 id="u6DFB_u52A0_u8BBF_u95EE_u7EDF_u8BA1"><a href="#u6DFB_u52A0_u8BBF_u95EE_u7EDF_u8BA1" class="headerlink" title="添加访问统计"></a>添加访问统计</h3><p>我用的是<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="external">不蒜子</a></p>
<p>在文件 <em>themes/yilia/layout/_partial/footer.ejs</em> 中的<em>footer-right</em>标签中添加代码:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">async</span> <span class="attribute">src</span>=<span class="value">"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">本站总访问量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次，本站访客数<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>人次，本文总阅读量<span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"busuanzi_value_page_pv"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>次</span><br></pre></td></tr></table></figure>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><ul>
<li>修改文章生成模板 <code>scaffolds/post.md</code> 比如添加 categories: </li>
</ul>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="symbol">title:</span> <span class="expansion">&#123;&#123; title &#125;&#125;</span></span><br><span class="line"><span class="symbol">date:</span> <span class="expansion">&#123;&#123; date &#125;&#125;</span></span><br><span class="line"><span class="symbol">categories:</span></span><br><span class="line"><span class="symbol">tags:</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://www.yehbeats.com/2015/04/06/hexo-topmenu/" target="_blank" rel="external">添加返回顶部按钮</a></p>
</li>
<li><p>mac 上的 markdown 编辑器, 现在用的是 Mou</p>
</li>
<li><a href="http://zipperary.com/2013/06/02/hexo-guide-5/" target="_blank" rel="external">添加sitemap</a></li>
<li>列表每篇文章的预览部分 是用这个标签<em>\<!--more--></em></li>
<li><del><a href="http://www.jianshu.com/p/0c5d6678ed6d" target="_blank" rel="external">Markdown页内跳转</a></del>坑爹的</li>
<li><del>脚注 (有了这个, 妈妈再也不用担心我的文章引用出处啦)</del></li>
</ul>
<pre><code>[^1]

[^1]:abcd
</code></pre><ul>
<li><a href="http://moxfive.xyz/2015/10/16/hexo-404-page/#u53C2_u8003_u8D44_u6599" target="_blank" rel="external">添加404页面</a> 我加了腾讯的<a href="http://www.qq.com/404/" target="_blank" rel="external">公益404</a>,很简单, 加段代码就行, <a href="http://www.a-ho.com/404" target="_blank" rel="external">点击</a>查看效果</li>
<li>关闭评论 <em>comments: false</em></li>
<li><a href="http://blog.justforfun.top/2015/02/07/hexo-BGM%E7%9A%84%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/" target="_blank" rel="external">hexo BGM</a></li>
</ul>
<p>参考:</p>
<p><a href="http://www.yuthon.com/2015/02/03/tips-for-hexo/" target="_blank" rel="external">hexo使用技巧</a></p>
<p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E7%BD%AE%E5%A4%9A%E8%AF%B4-DISQUS" target="_blank" rel="external">设置多说DISQUS</a></p>
<p><a href="https://github.com/litten/hexo-theme-yilia/issues/51" target="_blank" rel="external">如何截取文章长度</a></p>
<p><a href="http://hanhailong.com/2015/10/08/Hexo%E2%80%94%E6%AD%A3%E7%A1%AE%E6%B7%BB%E5%8A%A0RSS%E8%AE%A2%E9%98%85/" target="_blank" rel="external">Hexo—正确添加RSS订阅</a></p>
<p><a href="http://blog.xiaobaidonghui.cn/2015/07/28/%E9%87%8D%E6%96%B0%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%8B%E5%A4%9A%E8%AF%B4/" target="_blank" rel="external">yilia主题多说的重新配置</a></p>
<p><a href="http://www.yehbeats.com/2015/04/08/hexo-search/" target="_blank" rel="external">Hexo，Yilia主题添加站内搜索功能</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u66F4_u6362_u4E3B_u9898"><a href="#u66F4_u6362_u4E3B_u9898" class="headerlink" title="更换主题"></a>更换主题</h3><p>我选择更换的主题是<a href="https://github.com/litten/hexo-theme-yilia">yilia</a></p>
<p>进入 hexo 主目录:</p>
<pre><code>cd [folder]
</code></pre><p>安装:</p>
<pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia
</code></pre>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="yilia" scheme="http://yoursite.com/tags/yilia/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何用hexo-github搭建静态博客]]></title>
    <link href="http://yoursite.com/2016/01/04/%E5%A6%82%E4%BD%95%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/01/04/如何用hexo-github搭建静态博客/</id>
    <published>2016-01-04T14:30:42.000Z</published>
    <updated>2016-01-20T14:47:19.000Z</updated>
    <content type="html"><![CDATA[<p>搭建环境和版本:</p>
<ul>
<li><p>OS X EI Captain</p>
</li>
<li><p>node v4.2.4</p>
</li>
</ul>
<h3 id="u4E00__u5B89_u88C5nodes"><a href="#u4E00__u5B89_u88C5nodes" class="headerlink" title="一  安装nodes"></a>一  安装nodes</h3><p>brew安装NVM</p>
<pre><code>brew install nvm
</code></pre><p>將下列指令加入 .bash_profile（或 .bashrc）檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>重新載入 .bash_profile 設定</p>
<pre><code>source .bash_profile
</code></pre><p>找出目前所有可安裝的 Node.js 版本</p>
<pre><code>nvm ls-remote
</code></pre><p>安裝最新稳定版的 Node.js(我这时候是v4.2.4)</p>
<pre><code>nvm install v4.2.4
</code></pre><p>指定nvm使用的 Node.js版本</p>
<pre><code>nvm use 4.2.4   
</code></pre><p>預設使用 0.11.16 版本，否則每次重新連線登入，還需要重新 nvm use 一次</p>
<pre><code>nvm alias default 4.2.4
</code></pre><p>測試 Node.js</p>
<pre><code>node -v
</code></pre><h3 id="u4E8C__u5B89_u88C5_u521D_u59CB_u5316_u914D_u7F6E_hexo"><a href="#u4E8C__u5B89_u88C5_u521D_u59CB_u5316_u914D_u7F6E_hexo" class="headerlink" title="二  安装初始化配置 hexo"></a>二  安装初始化配置 hexo</h3><p>初始化</p>
<pre><code>$ hexo init [folder]      #创建 hexo 主目录
</code></pre><p>生成静态网页文件</p>
<pre><code>$ hexo g
</code></pre><p>本地运行服务查看,访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<pre><code>$ hexo s
</code></pre><h3 id="u4E09__u914D_u7F6E_github_page"><a href="#u4E09__u914D_u7F6E_github_page" class="headerlink" title="三  配置 github page"></a>三  配置 github page</h3><p>注册 github 账号<br>新建一个仓库, 仓库名: <strong>yourusername.github.io</strong>   (必须是这个格式)</p>
<h3 id="u56DB__u90E8_u7F72_u5230github"><a href="#u56DB__u90E8_u7F72_u5230github" class="headerlink" title="四  部署到github"></a>四  部署到github</h3><p>打开 _config.yml 文件, 修改</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">    <span class="attribute">type</span>: git</span><br><span class="line">    <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourusername/yourusername.github.io.git</span><br><span class="line">    <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>然后部署</p>
<pre><code>$ hexo clean   #清空缓存
$ hexo d
</code></pre><p>如果提示</p>
<p><code>ERROR Deployer not found: git.</code></p>
<p>安装</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>即可解决</p>
<p>部署完成后, 访问 <a href="http://yourusername.github.io" target="_blank" rel="external">http://yourusername.github.io</a> 就可以看到效果了</p>
<h3 id="u4E94__u5199_u6587_u7AE0"><a href="#u4E94__u5199_u6587_u7AE0" class="headerlink" title="五  写文章"></a>五  写文章</h3><pre><code>$ hexo new &quot;文章标题&quot;
</code></pre><p>然后在 <code>source/_posts/</code> 目录下可以找到文件进行编辑<br>编辑完成后,部署更新:</p>
<pre><code>$ hexo g -d
</code></pre><p>基本这样就能写了</p>
<h4 id="u8349_u7A3F"><a href="#u8349_u7A3F" class="headerlink" title="草稿"></a>草稿</h4><p>hexo n 默认是创建正式发布的文章, 想要先写草稿不发布, 使用这样的命令创建草稿:</p>
<pre><code>hexo n draft &lt;title&gt;
</code></pre><h4 id="u9884_u89C8"><a href="#u9884_u89C8" class="headerlink" title="预览"></a>预览</h4><p>预览正式文章</p>
<pre><code>hexo s
</code></pre><p>预览包含草稿在内的文章</p>
<pre><code>hexo s --draft
</code></pre><p>将草稿正式发布</p>
<pre><code>hexo publish &lt;title&gt;
</code></pre><p>注:草稿 publish 之后, 如果要变更内容, 记得要在 post 的位置重新打开文章, 因为文章位置变了, 继续原来的编辑会导致保存不了</p>
<p>参考:</p>
<p><a href="http://mac-osx-for-newbie-book.kejyun.com/software/softwareWebDeveloperNodeJS.html" target="_blank" rel="external">Mac OSX 新手入门</a>    </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>搭建环境和版本:</p>
<ul>
<li><p>OS X EI Captain</p>
</li>
<li><p>node v4.2.4</p>
</li>
</ul>
<h3 id="u4E00__u5B89_u88C5nodes"><a href="#u4E00__u5B89_u88C5nodes" class="headerlink" title="一  安装nodes"></a>一  安装nodes</h3><p>brew安装NVM</p>
<pre><code>brew install nvm
</code></pre><p>將下列指令加入 .bash_profile（或 .bashrc）檔案</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=~/.nvm</span><br><span class="line"><span class="built_in">source</span> $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="os x" scheme="http://yoursite.com/tags/os-x/"/>
    
      <category term="it" scheme="http://yoursite.com/categories/it/"/>
    
  </entry>
  
</feed>
